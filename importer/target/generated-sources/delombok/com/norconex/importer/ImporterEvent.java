// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2020-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer;

import com.norconex.commons.lang.event.Event;
import com.norconex.importer.doc.Doc;
import com.norconex.importer.handler.parser.ParseState;

/**
 * An Importer event.
 */
public class ImporterEvent extends Event {
    private static final long serialVersionUID = 1L;
    public static final String IMPORTER_INIT_BEGIN = "IMPORTER_INIT_BEGIN";
    public static final String IMPORTER_INIT_END = "IMPORTER_INIT_END";
    public static final String IMPORTER_HANDLER_BEGIN = "IMPORTER_HANDLER_BEGIN";
    public static final String IMPORTER_HANDLER_END = "IMPORTER_HANDLER_END";
    public static final String IMPORTER_HANDLER_ERROR = "IMPORTER_HANDLER_ERROR";
    public static final String IMPORTER_HANDLER_CONDITION_TRUE = "IMPORTER_HANDLER_CONDITION_TRUE";
    public static final String IMPORTER_HANDLER_CONDITION_FALSE = "IMPORTER_HANDLER_CONDITION_FALSE";
    public static final String IMPORTER_PARSER_BEGIN = "IMPORTER_PARSER_BEGIN";
    public static final String IMPORTER_PARSER_END = "IMPORTER_PARSER_END";
    public static final String IMPORTER_PARSER_ERROR = "IMPORTER_PARSER_ERROR";
    /**
     * Gets the document parse state (never <code>null</code>).
     */
    @SuppressWarnings("javadoc")
    private final ParseState parseState;
    /**
     * Gets the document associated with this event, if applicable.
     */
    @SuppressWarnings("javadoc")
    private final transient Doc document;

    /**
     * Gets whether this document was parsed. Convenience method equivalent
     * to <code>return getParseState() == ParseState.POST</code>.
     * @return <code>true</code> if the document was parsed
     */
    public boolean isParsed() {
        return ParseState.isPost(parseState);
    }

    /**
     * A string representation of this event.
     */
    @Override
    public String toString() {
        var b =  // doc is never null
        new StringBuilder(super.toString()).append(" - ").append(getDocument().getReference()).append(" - Parsed: ").append(isParsed());
        if (getSource() != null) {
            b.append(" - ").append(getSource().toString());
        }
        return b.toString();
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static abstract class ImporterEventBuilder<C extends ImporterEvent, B extends ImporterEvent.ImporterEventBuilder<C, B>> extends Event.EventBuilder<C, B> {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private ParseState parseState;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Doc document;

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B parseState(final ParseState parseState) {
            this.parseState = parseState;
            return self();
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B document(final Doc document) {
            this.document = document;
            return self();
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected abstract B self();

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public abstract C build();

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "ImporterEvent.ImporterEventBuilder(super=" + super.toString() + ", parseState=" + this.parseState + ", document=" + this.document + ")";
        }
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final class ImporterEventBuilderImpl extends ImporterEvent.ImporterEventBuilder<ImporterEvent, ImporterEvent.ImporterEventBuilderImpl> {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private ImporterEventBuilderImpl() {
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected ImporterEvent.ImporterEventBuilderImpl self() {
            return this;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ImporterEvent build() {
            return new ImporterEvent(this);
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected ImporterEvent(final ImporterEvent.ImporterEventBuilder<?, ?> b) {
        super(b);
        this.parseState = b.parseState;
        this.document = b.document;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static ImporterEvent.ImporterEventBuilder<?, ?> builder() {
        return new ImporterEvent.ImporterEventBuilderImpl();
    }

    /**
     * Gets the document parse state (never <code>null</code>).
     * @return parse state
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ParseState getParseState() {
        return this.parseState;
    }

    /**
     * Gets the document associated with this event, if applicable.
     * @return a document
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Doc getDocument() {
        return this.document;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ImporterEvent)) return false;
        final ImporterEvent other = (ImporterEvent) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        final java.lang.Object this$parseState = this.getParseState();
        final java.lang.Object other$parseState = other.getParseState();
        if (this$parseState == null ? other$parseState != null : !this$parseState.equals(other$parseState)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ImporterEvent;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        final java.lang.Object $parseState = this.getParseState();
        result = result * PRIME + ($parseState == null ? 43 : $parseState.hashCode());
        return result;
    }
}
