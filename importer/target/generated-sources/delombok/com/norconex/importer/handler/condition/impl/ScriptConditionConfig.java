// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2021 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.condition.impl;

import java.nio.charset.Charset;
import com.norconex.commons.lang.io.TextReader;
import com.norconex.commons.lang.map.Properties;
import com.norconex.commons.lang.text.TextMatcher;
import com.norconex.importer.handler.ScriptRunner;

/**
 * <p>
 * A condition formulated using a scripting language.
 * </p>
 * <p>
 * Refer to {@link ScriptRunner} for more information on using a scripting
 * language with Norconex Importer.
 * </p>
 * <h3>How to create a condition with scripting:</h3>
 * <p>
 * The following are variables made available to your script for each
 * document:
 * </p>
 * <ul>
 *   <li><b>reference:</b> Document unique reference as a string.</li>
 *   <li><b>content:</b> Document content, as a string
 *       (of <code>maxReadSize</code> length).</li>
 *   <li><b>metadata:</b> Document metadata as a {@link Properties}
 *       object.</li>
 *   <li><b>parsed:</b> Whether the document was already parsed, as a
 *       boolean.</li>
 *   <li><b>sectionIndex:</b> Content section index (integer) if it had to be
 *       split because it was too large (as per <code>maxReadSize</code>).</li>
 * </ul>
 * <p>
 * The expected <b>return value</b> from your script is a boolean indicating
 * whether the document was matched or not.
 * </p>
 *
 * {@nx.xml.usage
 * <condition class="com.norconex.importer.handler.condition.impl.ScriptCondition"
 *   {@nx.include com.norconex.importer.handler.condition.AbstractStringCondition#attributes}
 *       engineName="(script engine name)">
 *   <script>(your script)</script>
 * </condition>
 * }
 *
 * <h4>Usage examples:</h4>
 *
 * <h5>JavaScript:</h5>
 * {@nx.xml
 * <condition class="ScriptCondition" engineName="JavaScript>
 *   <script><![CDATA[
 *     returnValue = metadata.getString('fruit') == 'apple'
 *             || content.indexOf('Apple') > -1;
 *   ]]></script>
 * </condition>
 * }
 *
 * <h5>Lua:</h5>
 * {@nx.xml
 * <condition class="ScriptCondition" engineName="lua">
 *   <script><![CDATA[
 *     returnValue = metadata:getString('fruit') == 'apple'
 *             or content:find('Apple') ~= nil;
 *   ]]></script>
 * </condition>
 * }
 *
 * <h5>Python:</h5>
 * {@nx.xml
 * <condition class="ScriptCondition" engineName="python">
 *   <script><![CDATA[
 *     returnValue = metadata.getString('fruit') == 'apple' \
 *             or content.__contains__('Apple');
 *   ]]></script>
 * </condition>
 * }
 *
 * <h5>Velocity:</h5>
 * {@nx.xml
 * <condition class="ScriptCondition" engineName="velocity">
 *   <script><![CDATA[
 *     #set($returnValue = $metadata.getString("fruit") == "apple"
 *             || $content.contains("Apple"))
 *   ]]></script>
 * </condition>
 * }
 *
 * @see ScriptRunner
 */
@SuppressWarnings("javadoc")
public class ScriptConditionConfig {
    private String engineName;
    private String script;
    private final TextMatcher fieldMatcher = new TextMatcher();

    /**
     * Gets this filter field matcher.
     * @return field matcher
     */
    public TextMatcher getFieldMatcher() {
        return fieldMatcher;
    }

    /**
     * Sets this condition field matcher.
     * @param fieldMatcher field matcher
     */
    public ScriptConditionConfig setFieldMatcher(TextMatcher fieldMatcher) {
        this.fieldMatcher.copyFrom(fieldMatcher);
        return this;
    }

    /**
     * The presumed source character encoding. Usually ignored and presumed
     * to be UTF-8 if the document has been parsed already.
     */
    private Charset sourceCharset;
    /**
     * The maximum number of characters to read at once, used for filtering.
     * Default is {@link TextReader#DEFAULT_MAX_READ_SIZE}.
     */
    private int maxReadSize = TextReader.DEFAULT_MAX_READ_SIZE;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ScriptConditionConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getEngineName() {
        return this.engineName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getScript() {
        return this.script;
    }

    /**
     * The presumed source character encoding. Usually ignored and presumed
     * to be UTF-8 if the document has been parsed already.
     * @return character encoding of the source to be transformed
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Charset getSourceCharset() {
        return this.sourceCharset;
    }

    /**
     * The maximum number of characters to read at once, used for filtering.
     * Default is {@link TextReader#DEFAULT_MAX_READ_SIZE}.
     * @return maximum read size
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxReadSize() {
        return this.maxReadSize;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ScriptConditionConfig setEngineName(final String engineName) {
        this.engineName = engineName;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ScriptConditionConfig setScript(final String script) {
        this.script = script;
        return this;
    }

    /**
     * The presumed source character encoding. Usually ignored and presumed
     * to be UTF-8 if the document has been parsed already.
     * @param sourceCharset character encoding of the source to be transformed
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ScriptConditionConfig setSourceCharset(final Charset sourceCharset) {
        this.sourceCharset = sourceCharset;
        return this;
    }

    /**
     * The maximum number of characters to read at once, used for filtering.
     * Default is {@link TextReader#DEFAULT_MAX_READ_SIZE}.
     * @param maxReadSize maximum read size
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ScriptConditionConfig setMaxReadSize(final int maxReadSize) {
        this.maxReadSize = maxReadSize;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ScriptConditionConfig)) return false;
        final ScriptConditionConfig other = (ScriptConditionConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getMaxReadSize() != other.getMaxReadSize()) return false;
        final java.lang.Object this$engineName = this.getEngineName();
        final java.lang.Object other$engineName = other.getEngineName();
        if (this$engineName == null ? other$engineName != null : !this$engineName.equals(other$engineName)) return false;
        final java.lang.Object this$script = this.getScript();
        final java.lang.Object other$script = other.getScript();
        if (this$script == null ? other$script != null : !this$script.equals(other$script)) return false;
        final java.lang.Object this$fieldMatcher = this.getFieldMatcher();
        final java.lang.Object other$fieldMatcher = other.getFieldMatcher();
        if (this$fieldMatcher == null ? other$fieldMatcher != null : !this$fieldMatcher.equals(other$fieldMatcher)) return false;
        final java.lang.Object this$sourceCharset = this.getSourceCharset();
        final java.lang.Object other$sourceCharset = other.getSourceCharset();
        if (this$sourceCharset == null ? other$sourceCharset != null : !this$sourceCharset.equals(other$sourceCharset)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ScriptConditionConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getMaxReadSize();
        final java.lang.Object $engineName = this.getEngineName();
        result = result * PRIME + ($engineName == null ? 43 : $engineName.hashCode());
        final java.lang.Object $script = this.getScript();
        result = result * PRIME + ($script == null ? 43 : $script.hashCode());
        final java.lang.Object $fieldMatcher = this.getFieldMatcher();
        result = result * PRIME + ($fieldMatcher == null ? 43 : $fieldMatcher.hashCode());
        final java.lang.Object $sourceCharset = this.getSourceCharset();
        result = result * PRIME + ($sourceCharset == null ? 43 : $sourceCharset.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ScriptConditionConfig(engineName=" + this.getEngineName() + ", script=" + this.getScript() + ", fieldMatcher=" + this.getFieldMatcher() + ", sourceCharset=" + this.getSourceCharset() + ", maxReadSize=" + this.getMaxReadSize() + ")";
    }
}
