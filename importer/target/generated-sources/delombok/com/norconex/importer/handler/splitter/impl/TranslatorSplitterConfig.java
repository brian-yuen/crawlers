// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2015-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.splitter.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import com.norconex.commons.lang.collection.CollectionUtil;
import com.norconex.commons.lang.text.TextMatcher;
import com.norconex.importer.handler.splitter.BaseDocumentSplitterConfig;

/**
 * <p>Translate documents using one of the supported translation API.  The
 * following lists the supported APIs, along with the required authentication
 * properties or settings for each:</p>
 * <ul>
 *   <li><a href="http://blogs.msdn.com/b/translation/p/gettingstarted1.aspx">microsoft</a>
 *     <ul>
 *       <li>clientId</li>
 *       <li>clientSecret</li>
 *     </ul>
 *   </li>
 *   <li><a href="https://cloud.google.com/translate/">google</a>
 *     <ul>
 *       <li>apiKey</li>
 *     </ul>
 *   </li>
 *   <li><a href="http://www.lingo24.com/">lingo24</a>
 *     <ul>
 *       <li>userKey</li>
 *     </ul>
 *   </li>
 *   <li><a href="http://www.statmt.org/moses/">moses</a>
 *     <ul>
 *       <li>smtPath</li>
 *       <li>scriptPath</li>
 *     </ul>
 *   </li>
 *   <li><a href="https://tech.yandex.com/translate/">yandex</a>
 *     <ul>
 *       <li>apiKey</li>
 *     </ul>
 *   </li>
 * </ul>
 *
 * <p>For example, the
 * Microsoft Translation API requires a client ID and a client
 * secret,
 * both obtained on Microsoft Azure Marketplace with your Microsoft account.
 * </p><p>
 * Translated documents will have the original document language stored in
 * a field "document.translatedFrom".
 * </p><p>
 * This class is not a document "splitter" per se, but like regular splitters,
 * the translation
 * will create children documents for each translation performed.  The parent
 * document will always remain the original document, while the children
 * will always be the translations.</p>
 *
 * {@nx.xml.usage
 * <handler class="com.norconex.importer.handler.splitter.impl.TranslatorSplitter"
 *     api="(microsoft|google|lingo24|moses|yandex)">
 *
 *   {@nx.include com.norconex.importer.handler.AbstractImporterHandler#restrictTo}
 *
 *   <ignoreContent>(false|true)</ignoreContent>
 *   <ignoreNonTranslatedFields>(false|true)</ignoreNonTranslatedFields>
 *   <fieldsToTranslate>(coma-separated list of fields)</fieldsToTranslate>
 *   <sourceLanguageField>(field containing language)</sourceLanguageField>
 *   <sourceLanguage>(language when no source language field)</sourceLanguage>
 *   <targetLanguages>(coma-separated list of languages)</targetLanguages>
 *
 *   <!-- Microsoft -->
 *   <clientId>...</clientId>
 *   <clientSecret>...</clientSecret>
 *
 *   <!-- Google -->
 *   <apiKey>...</apiKey>
 *
 *   <!-- Lingo24 -->
 *   <userKey>...</userKey>
 *
 *   <!-- Moses -->
 *   <smtPath>...</smtPath>
 *   <scriptPath>...</scriptPath>
 *
 *   <!-- Yandex -->
 *   <apiKey>...</apiKey>
 *
 * </handler>
 * }
 *
 * {@nx.xml.example
 * <handler class="TranslatorSplitter" api="google">
 *     <sourceLanguageField>langField</sourceLanguageField>
 *     <targetLanguages>fr</targetLanguages>
 *     <apiKey>...MYKEYHERE...</apiKey>
 * </handler>
 * }
 *
 * <p>
 * The above example uses the Google translation API to translate documents into
 * French, taking the source document language from a field called "langField".
 * </p>
 */
@SuppressWarnings("javadoc")
public class TranslatorSplitterConfig extends BaseDocumentSplitterConfig {
    public static final String API_MICROSOFT = "microsoft";
    public static final String API_GOOGLE = "google";
    public static final String API_LINGO24 = "lingo24";
    public static final String API_MOSES = "moses";
    public static final String API_YANDEX = "yandex";
    /**
     * Supported translation service API name.
     * One of: "microsoft", "google", "lingo24", "moses", "yandex".
     */
    private String api;
    /**
     * Optional matcher of fields holding content to translate instead
     * of document body.
     * @param fieldMatcher matcher of fields to translate
     */
    private final TextMatcher fieldMatcher = new TextMatcher();
    /**
     * Whether to ignore fields not translated when creating child documents.
     * Set to <code>true</code> if you just want children documents to contain
     * fields for which there was a translation (and possibly, the translated
     * content).
     */
    private boolean ignoreNonTranslatedFields;
    //MAYBE method: add a field with _fr suffix
    // splitter is for new docs... adding field should be in transformer?
    /**
     * The name of a field containing a value representing the original document
     * language.
     */
    private String sourceLanguageField;
    /**
     * The original document language.
     */
    private String sourceLanguage;
    /**
     * Which languages to translate to.
     * @param targetLanguages languages to translate to
     * @return languages to translate to
     */
    private final List<String> targetLanguages = new ArrayList<>();
    // Microsoft
    /**
     * Microsoft API client id.
     */
    private String clientId;
    /**
     * Microsoft API client secret.
     */
    private String clientSecret;
    // Google and Yandex
    /**
     * Google or Yandex API key.
     */
    private String apiKey;
    // Lingo24
    /**
     * Lingo24 user key.
     */
    private String userKey;
    // Moses
    /**
     * Moses "smtPath".
     */
    private String smtPath;
    /**
     * Moses script path.
     */
    private String scriptPath;

    public TranslatorSplitterConfig setFieldMatcher(TextMatcher fieldMatcher) {
        this.fieldMatcher.copyFrom(fieldMatcher);
        return this;
    }

    public List<String> getTargetLanguages() {
        return Collections.unmodifiableList(targetLanguages);
    }

    public TranslatorSplitterConfig setTargetLanguages(List<String> targetLanguages) {
        CollectionUtil.setAll(this.targetLanguages, targetLanguages);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig() {
    }

    /**
     * Supported translation service API name.
     * One of: "microsoft", "google", "lingo24", "moses", "yandex".
     * @return translation api name
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getApi() {
        return this.api;
    }

    /**
     * Optional matcher of fields holding content to translate instead
     * of document body.
     * @return matcher of fields to translate
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TextMatcher getFieldMatcher() {
        return this.fieldMatcher;
    }

    /**
     * Whether to ignore fields not translated when creating child documents.
     * Set to <code>true</code> if you just want children documents to contain
     * fields for which there was a translation (and possibly, the translated
     * content).
     * @return to ignore non translated fields
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isIgnoreNonTranslatedFields() {
        return this.ignoreNonTranslatedFields;
    }

    /**
     * The name of a field containing a value representing the original document
     * language.
     * @return field holding the document language
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceLanguageField() {
        return this.sourceLanguageField;
    }

    /**
     * The original document language.
     * @return document language
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceLanguage() {
        return this.sourceLanguage;
    }

    /**
     * Microsoft API client id.
     * @return client id
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getClientId() {
        return this.clientId;
    }

    /**
     * Microsoft API client secret.
     * @return client secret
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Google or Yandex API key.
     * @return API key
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getApiKey() {
        return this.apiKey;
    }

    /**
     * Lingo24 user key.
     * @return user key
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getUserKey() {
        return this.userKey;
    }

    /**
     * Moses "smtPath".
     * @return Moses "smtPath"
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSmtPath() {
        return this.smtPath;
    }

    /**
     * Moses script path.
     * @return script path
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getScriptPath() {
        return this.scriptPath;
    }

    /**
     * Supported translation service API name.
     * One of: "microsoft", "google", "lingo24", "moses", "yandex".
     * @param api translation api name
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setApi(final String api) {
        this.api = api;
        return this;
    }

    /**
     * Whether to ignore fields not translated when creating child documents.
     * Set to <code>true</code> if you just want children documents to contain
     * fields for which there was a translation (and possibly, the translated
     * content).
     * @param ignoreNonTranslatedFields <code>true</code> to ignore non
     *      translated fields
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setIgnoreNonTranslatedFields(final boolean ignoreNonTranslatedFields) {
        this.ignoreNonTranslatedFields = ignoreNonTranslatedFields;
        return this;
    }

    /**
     * The name of a field containing a value representing the original document
     * language.
     * @param sourceLanguageField field holding the document language
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setSourceLanguageField(final String sourceLanguageField) {
        this.sourceLanguageField = sourceLanguageField;
        return this;
    }

    /**
     * The original document language.
     * @param sourceLanguage document language
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setSourceLanguage(final String sourceLanguage) {
        this.sourceLanguage = sourceLanguage;
        return this;
    }

    /**
     * Microsoft API client id.
     * @param clientId client id
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setClientId(final String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Microsoft API client secret.
     * @param clientSecret client secret
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setClientSecret(final String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Google or Yandex API key.
     * @param apiKey API key
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setApiKey(final String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Lingo24 user key.
     * @param userKey user key
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setUserKey(final String userKey) {
        this.userKey = userKey;
        return this;
    }

    /**
     * Moses "smtPath".
     * @param smtPath Moses "smtPath"
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setSmtPath(final String smtPath) {
        this.smtPath = smtPath;
        return this;
    }

    /**
     * Moses script path.
     * @param scriptPath script path
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TranslatorSplitterConfig setScriptPath(final String scriptPath) {
        this.scriptPath = scriptPath;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof TranslatorSplitterConfig)) return false;
        final TranslatorSplitterConfig other = (TranslatorSplitterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.isIgnoreNonTranslatedFields() != other.isIgnoreNonTranslatedFields()) return false;
        final java.lang.Object this$api = this.getApi();
        final java.lang.Object other$api = other.getApi();
        if (this$api == null ? other$api != null : !this$api.equals(other$api)) return false;
        final java.lang.Object this$fieldMatcher = this.getFieldMatcher();
        final java.lang.Object other$fieldMatcher = other.getFieldMatcher();
        if (this$fieldMatcher == null ? other$fieldMatcher != null : !this$fieldMatcher.equals(other$fieldMatcher)) return false;
        final java.lang.Object this$sourceLanguageField = this.getSourceLanguageField();
        final java.lang.Object other$sourceLanguageField = other.getSourceLanguageField();
        if (this$sourceLanguageField == null ? other$sourceLanguageField != null : !this$sourceLanguageField.equals(other$sourceLanguageField)) return false;
        final java.lang.Object this$sourceLanguage = this.getSourceLanguage();
        final java.lang.Object other$sourceLanguage = other.getSourceLanguage();
        if (this$sourceLanguage == null ? other$sourceLanguage != null : !this$sourceLanguage.equals(other$sourceLanguage)) return false;
        final java.lang.Object this$targetLanguages = this.getTargetLanguages();
        final java.lang.Object other$targetLanguages = other.getTargetLanguages();
        if (this$targetLanguages == null ? other$targetLanguages != null : !this$targetLanguages.equals(other$targetLanguages)) return false;
        final java.lang.Object this$clientId = this.getClientId();
        final java.lang.Object other$clientId = other.getClientId();
        if (this$clientId == null ? other$clientId != null : !this$clientId.equals(other$clientId)) return false;
        final java.lang.Object this$clientSecret = this.getClientSecret();
        final java.lang.Object other$clientSecret = other.getClientSecret();
        if (this$clientSecret == null ? other$clientSecret != null : !this$clientSecret.equals(other$clientSecret)) return false;
        final java.lang.Object this$apiKey = this.getApiKey();
        final java.lang.Object other$apiKey = other.getApiKey();
        if (this$apiKey == null ? other$apiKey != null : !this$apiKey.equals(other$apiKey)) return false;
        final java.lang.Object this$userKey = this.getUserKey();
        final java.lang.Object other$userKey = other.getUserKey();
        if (this$userKey == null ? other$userKey != null : !this$userKey.equals(other$userKey)) return false;
        final java.lang.Object this$smtPath = this.getSmtPath();
        final java.lang.Object other$smtPath = other.getSmtPath();
        if (this$smtPath == null ? other$smtPath != null : !this$smtPath.equals(other$smtPath)) return false;
        final java.lang.Object this$scriptPath = this.getScriptPath();
        final java.lang.Object other$scriptPath = other.getScriptPath();
        if (this$scriptPath == null ? other$scriptPath != null : !this$scriptPath.equals(other$scriptPath)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof TranslatorSplitterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + (this.isIgnoreNonTranslatedFields() ? 79 : 97);
        final java.lang.Object $api = this.getApi();
        result = result * PRIME + ($api == null ? 43 : $api.hashCode());
        final java.lang.Object $fieldMatcher = this.getFieldMatcher();
        result = result * PRIME + ($fieldMatcher == null ? 43 : $fieldMatcher.hashCode());
        final java.lang.Object $sourceLanguageField = this.getSourceLanguageField();
        result = result * PRIME + ($sourceLanguageField == null ? 43 : $sourceLanguageField.hashCode());
        final java.lang.Object $sourceLanguage = this.getSourceLanguage();
        result = result * PRIME + ($sourceLanguage == null ? 43 : $sourceLanguage.hashCode());
        final java.lang.Object $targetLanguages = this.getTargetLanguages();
        result = result * PRIME + ($targetLanguages == null ? 43 : $targetLanguages.hashCode());
        final java.lang.Object $clientId = this.getClientId();
        result = result * PRIME + ($clientId == null ? 43 : $clientId.hashCode());
        final java.lang.Object $clientSecret = this.getClientSecret();
        result = result * PRIME + ($clientSecret == null ? 43 : $clientSecret.hashCode());
        final java.lang.Object $apiKey = this.getApiKey();
        result = result * PRIME + ($apiKey == null ? 43 : $apiKey.hashCode());
        final java.lang.Object $userKey = this.getUserKey();
        result = result * PRIME + ($userKey == null ? 43 : $userKey.hashCode());
        final java.lang.Object $smtPath = this.getSmtPath();
        result = result * PRIME + ($smtPath == null ? 43 : $smtPath.hashCode());
        final java.lang.Object $scriptPath = this.getScriptPath();
        result = result * PRIME + ($scriptPath == null ? 43 : $scriptPath.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "TranslatorSplitterConfig(super=" + super.toString() + ", api=" + this.getApi() + ", fieldMatcher=" + this.getFieldMatcher() + ", ignoreNonTranslatedFields=" + this.isIgnoreNonTranslatedFields() + ", sourceLanguageField=" + this.getSourceLanguageField() + ", sourceLanguage=" + this.getSourceLanguage() + ", targetLanguages=" + this.getTargetLanguages() + ", clientId=" + this.getClientId() + ", clientSecret=" + this.getClientSecret() + ", apiKey=" + this.getApiKey() + ", userKey=" + this.getUserKey() + ", smtPath=" + this.getSmtPath() + ", scriptPath=" + this.getScriptPath() + ")";
    }
}
