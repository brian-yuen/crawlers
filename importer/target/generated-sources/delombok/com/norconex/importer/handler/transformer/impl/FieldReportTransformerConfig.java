// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2019-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * <p>A utility tagger that reports in a CSV file the fields discovered
 * in a crawl session, captured at the point of your choice in the
 * importing process.
 * If you use this class to report on all fields discovered, make sure you
 * use it as a post-parse handler, before you are limiting which fields
 * you want to keep.
 * </p>
 * <p>
 * The report will list one field per row, along with a few sample values
 * (3 by default).  The samples will be the first ones encountered.
 * </p>
 * <p>
 * This handler does not impact the data being imported at all
 * (it only reads it). It also do not store the "content" as a field.
 * </p>
 * <p>
 * When not specified with {@link #setFile(Path)}, a file called
 * "field-report.csv" will be created in the working directory.
 * </p>
 *
 * <p>Can be used both as a pre-parse or post-parse handler.</p>
 *
 * {@nx.xml.usage
 * <handler class="com.norconex.importer.handler.tagger.impl.FieldReportTagger"
 *     maxSamples="(max number of sample values)"
 *     withHeaders="[false|true]"
 *     withOccurences="[false|true]"
 *     truncateSamplesAt="(number of characters to truncate long samples)"
 *     file="(path to a local file)" >
 *
 *   {@nx.include com.norconex.importer.handler.AbstractImporterHandler#restrictTo}
 *
 * </handler>
 * }
 *
 * {@nx.xml.example
 * <handler class="FieldReportTagger"
 *     maxSamples="1" file="C:\reports\field-report.csv" />
 * }
 * <p>
 * The above example logs all discovered fields into a "field-report.csv" file,
 * along with only 1 example value.
 * </p>
 */
@SuppressWarnings("javadoc")
public class FieldReportTransformerConfig {
    public static final int DEFAULT_MAX_SAMPLES = 3;
    public static final Path DEFAULT_FILE = Paths.get("./field-report.csv");
    private int maxSamples = DEFAULT_MAX_SAMPLES;
    private Path file;
    private boolean withHeaders;
    private boolean withOccurences;
    private int truncateSamplesAt = -1;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FieldReportTransformerConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxSamples() {
        return this.maxSamples;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Path getFile() {
        return this.file;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isWithHeaders() {
        return this.withHeaders;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isWithOccurences() {
        return this.withOccurences;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getTruncateSamplesAt() {
        return this.truncateSamplesAt;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FieldReportTransformerConfig setMaxSamples(final int maxSamples) {
        this.maxSamples = maxSamples;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FieldReportTransformerConfig setFile(final Path file) {
        this.file = file;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FieldReportTransformerConfig setWithHeaders(final boolean withHeaders) {
        this.withHeaders = withHeaders;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FieldReportTransformerConfig setWithOccurences(final boolean withOccurences) {
        this.withOccurences = withOccurences;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FieldReportTransformerConfig setTruncateSamplesAt(final int truncateSamplesAt) {
        this.truncateSamplesAt = truncateSamplesAt;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof FieldReportTransformerConfig)) return false;
        final FieldReportTransformerConfig other = (FieldReportTransformerConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getMaxSamples() != other.getMaxSamples()) return false;
        if (this.isWithHeaders() != other.isWithHeaders()) return false;
        if (this.isWithOccurences() != other.isWithOccurences()) return false;
        if (this.getTruncateSamplesAt() != other.getTruncateSamplesAt()) return false;
        final java.lang.Object this$file = this.getFile();
        final java.lang.Object other$file = other.getFile();
        if (this$file == null ? other$file != null : !this$file.equals(other$file)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof FieldReportTransformerConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getMaxSamples();
        result = result * PRIME + (this.isWithHeaders() ? 79 : 97);
        result = result * PRIME + (this.isWithOccurences() ? 79 : 97);
        result = result * PRIME + this.getTruncateSamplesAt();
        final java.lang.Object $file = this.getFile();
        result = result * PRIME + ($file == null ? 43 : $file.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "FieldReportTransformerConfig(maxSamples=" + this.getMaxSamples() + ", file=" + this.getFile() + ", withHeaders=" + this.isWithHeaders() + ", withOccurences=" + this.isWithOccurences() + ", truncateSamplesAt=" + this.getTruncateSamplesAt() + ")";
    }
}
