// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2015-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import java.nio.charset.Charset;
import com.norconex.commons.lang.io.TextReader;
import com.norconex.commons.lang.map.PropertySetter;
import com.norconex.commons.lang.text.TextMatcher;
import com.norconex.importer.doc.DocMetadata;
import com.norconex.importer.util.chunk.ChunkedTextSupport;

/**
 * <p>Attempts to generate a title from the document content (default) or
 * a specified metadata field. It does not consider the document
 * format/structure nor does it weight some terms more than others.
 * For instance, it would not
 * consider text found in &lt;H1&gt; tags more importantly than other
 * text in HTML documents.</p>
 *
 * <p>If {@link #isDetectHeading()} returns <code>true</code>, this handler
 * will check if the content starts with a stand-alone, single-sentence line
 * (which is assumed to be the actual title).
 * That is, a line of text with only one sentence in it, followed by one or
 * more new line characters. To help
 * eliminate cases where such sentence are inappropriate, you can specify a
 * minimum and maximum number of characters that first line should have
 * with {@link #setDetectHeadingMinLength(int)} and
 * {@link #setDetectHeadingMaxLength(int)} (e.g. to ignore "Page 1" text and
 * the like).</p>
 *
 * <p>Unless a target field name is provided, the default field name
 * where the title will be stored is <code>document.generatedTitle</code>.
 *
 * <h3>Storing values in an existing field</h3>
 * <p>
 * If a target field with the same name already exists for a document,
 * values will be added to the end of the existing value list.
 * It is possible to change this default behavior by supplying a
 * {@link PropertySetter}.
 * </p>
 *
 * <p>If it cannot generate a title, it will fall-back to retrieving the
 * first sentence from the text.</p>
 *
 * <p>The generated title length is limited to 150 characters by default.
 * You can change that limit by using
 * {@link #setTitleMaxLength(int)}. Text larger than the max limit will be
 * truncated and three dots will be added in square brackets ([...]).
 * To remove the limit,
 * use -1 (or constant {@link #UNLIMITED_TITLE_LENGTH}).</p>
 *
 * <p>This class should be used as a post-parsing handler only
 * (or otherwise on unformatted text).</p>
 *
 * <p>The algorithm to detect titles is quite basic.
 * It uses a generic statistics-based approach to weight each sentences
 * up to a certain amount, and simply returns the sentence with the highest
 * attributed weight given a minimum threshold has been met.  You are strongly
 * encouraged to use a more sophisticated summarization engine if you want more
 * accurate titles generated.
 * </p>
 *
 * <h3>Max read size</h3>
 * <p>This tagger will only analyze up to the first
 * 10,000 characters. You can change this maximum
 * with {@link #setMaxReadSize(int)}. Given this class is not
 * optimized for large content analysis, setting a huge maximum number
 * of characters could cause serious performance issues on large
 * large files.</p>
 *
 * {@nx.xml.usage
 * <handler class="com.norconex.importer.handler.tagger.impl.TitleGeneratorTagger"
 *     {@nx.include com.norconex.importer.handler.tagger.AbstractStringTagger#attributes}
 *     fromField="(field of text to use/default uses document content)"
 *     toField="(target field where to store generated title)"
 *     {@nx.include com.norconex.commons.lang.map.PropertySetter#attributes}
 *     titleMaxLength="(max num of chars for generated title)"
 *     detectHeading="[false|true]"
 *     detectHeadingMinLength="(min length a heading title can have)"
 *     detectHeadingMaxLength="(max length a heading title can have)">
 *
 *   {@nx.include com.norconex.importer.handler.AbstractImporterHandler#restrictTo}
 * </handler>
 * }
 *
 * {@nx.xml.example
 * <handler class="TitleGeneratorTagger"
 *     toField="title" titleMaxLength="200" detectHeading="true" />
 * }
 * <p>
 * The above will check if the first line looks like a title and if not,
 * it will store the first sentence, up to 200 characters, in a field called
 * title.
 * </p>
 */
@SuppressWarnings("javadoc")
public class TitleGeneratorTransformerConfig implements ChunkedTextSupport {
    public static final String DEFAULT_TO_FIELD = DocMetadata.GENERATED_TITLE;
    public static final int DEFAULT_TITLE_MAX_LENGTH = 150;
    public static final int UNLIMITED_TITLE_LENGTH = -1;
    public static final int DEFAULT_HEADING_MIN_LENGTH = 10;
    public static final int DEFAULT_HEADING_MAX_LENGTH = 150;
    public static final int DEFAULT_MAX_READ_SIZE = 10000;
    private int maxReadSize = TextReader.DEFAULT_MAX_READ_SIZE;
    private Charset sourceCharset;
    private final TextMatcher fieldMatcher = new TextMatcher();
    //TODO have a max num terms?
    private String fromField;
    private String toField = DEFAULT_TO_FIELD;
    private int titleMaxLength = DEFAULT_TITLE_MAX_LENGTH;
    private boolean detectHeading;
    private int detectHeadingMinLength = DEFAULT_HEADING_MIN_LENGTH;
    private int detectHeadingMaxLength = DEFAULT_HEADING_MAX_LENGTH;
    /**
     * The property setter to use when a value is set.
     */
    private PropertySetter onSet;

    /**
     * Gets source field matcher for fields to use to generate title.
     * @return field matcher
     */
    @Override
    public TextMatcher getFieldMatcher() {
        return fieldMatcher;
    }

    /**
     * Sets source field matcher for fields to use to generate title.
     * @param fieldMatcher field matcher
     */
    public TitleGeneratorTransformerConfig setFieldMatcher(TextMatcher fieldMatcher) {
        this.fieldMatcher.copyFrom(fieldMatcher);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxReadSize() {
        return this.maxReadSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Charset getSourceCharset() {
        return this.sourceCharset;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getFromField() {
        return this.fromField;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getToField() {
        return this.toField;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getTitleMaxLength() {
        return this.titleMaxLength;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isDetectHeading() {
        return this.detectHeading;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getDetectHeadingMinLength() {
        return this.detectHeadingMinLength;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getDetectHeadingMaxLength() {
        return this.detectHeadingMaxLength;
    }

    /**
     * The property setter to use when a value is set.
     * @return property setter
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public PropertySetter getOnSet() {
        return this.onSet;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig setMaxReadSize(final int maxReadSize) {
        this.maxReadSize = maxReadSize;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig setSourceCharset(final Charset sourceCharset) {
        this.sourceCharset = sourceCharset;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig setFromField(final String fromField) {
        this.fromField = fromField;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig setToField(final String toField) {
        this.toField = toField;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig setTitleMaxLength(final int titleMaxLength) {
        this.titleMaxLength = titleMaxLength;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig setDetectHeading(final boolean detectHeading) {
        this.detectHeading = detectHeading;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig setDetectHeadingMinLength(final int detectHeadingMinLength) {
        this.detectHeadingMinLength = detectHeadingMinLength;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig setDetectHeadingMaxLength(final int detectHeadingMaxLength) {
        this.detectHeadingMaxLength = detectHeadingMaxLength;
        return this;
    }

    /**
     * The property setter to use when a value is set.
     * @param onSet property setter
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TitleGeneratorTransformerConfig setOnSet(final PropertySetter onSet) {
        this.onSet = onSet;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof TitleGeneratorTransformerConfig)) return false;
        final TitleGeneratorTransformerConfig other = (TitleGeneratorTransformerConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getMaxReadSize() != other.getMaxReadSize()) return false;
        if (this.getTitleMaxLength() != other.getTitleMaxLength()) return false;
        if (this.isDetectHeading() != other.isDetectHeading()) return false;
        if (this.getDetectHeadingMinLength() != other.getDetectHeadingMinLength()) return false;
        if (this.getDetectHeadingMaxLength() != other.getDetectHeadingMaxLength()) return false;
        final java.lang.Object this$sourceCharset = this.getSourceCharset();
        final java.lang.Object other$sourceCharset = other.getSourceCharset();
        if (this$sourceCharset == null ? other$sourceCharset != null : !this$sourceCharset.equals(other$sourceCharset)) return false;
        final java.lang.Object this$fieldMatcher = this.getFieldMatcher();
        final java.lang.Object other$fieldMatcher = other.getFieldMatcher();
        if (this$fieldMatcher == null ? other$fieldMatcher != null : !this$fieldMatcher.equals(other$fieldMatcher)) return false;
        final java.lang.Object this$fromField = this.getFromField();
        final java.lang.Object other$fromField = other.getFromField();
        if (this$fromField == null ? other$fromField != null : !this$fromField.equals(other$fromField)) return false;
        final java.lang.Object this$toField = this.getToField();
        final java.lang.Object other$toField = other.getToField();
        if (this$toField == null ? other$toField != null : !this$toField.equals(other$toField)) return false;
        final java.lang.Object this$onSet = this.getOnSet();
        final java.lang.Object other$onSet = other.getOnSet();
        if (this$onSet == null ? other$onSet != null : !this$onSet.equals(other$onSet)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof TitleGeneratorTransformerConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getMaxReadSize();
        result = result * PRIME + this.getTitleMaxLength();
        result = result * PRIME + (this.isDetectHeading() ? 79 : 97);
        result = result * PRIME + this.getDetectHeadingMinLength();
        result = result * PRIME + this.getDetectHeadingMaxLength();
        final java.lang.Object $sourceCharset = this.getSourceCharset();
        result = result * PRIME + ($sourceCharset == null ? 43 : $sourceCharset.hashCode());
        final java.lang.Object $fieldMatcher = this.getFieldMatcher();
        result = result * PRIME + ($fieldMatcher == null ? 43 : $fieldMatcher.hashCode());
        final java.lang.Object $fromField = this.getFromField();
        result = result * PRIME + ($fromField == null ? 43 : $fromField.hashCode());
        final java.lang.Object $toField = this.getToField();
        result = result * PRIME + ($toField == null ? 43 : $toField.hashCode());
        final java.lang.Object $onSet = this.getOnSet();
        result = result * PRIME + ($onSet == null ? 43 : $onSet.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "TitleGeneratorTransformerConfig(maxReadSize=" + this.getMaxReadSize() + ", sourceCharset=" + this.getSourceCharset() + ", fieldMatcher=" + this.getFieldMatcher() + ", fromField=" + this.getFromField() + ", toField=" + this.getToField() + ", titleMaxLength=" + this.getTitleMaxLength() + ", detectHeading=" + this.isDetectHeading() + ", detectHeadingMinLength=" + this.getDetectHeadingMinLength() + ", detectHeadingMaxLength=" + this.getDetectHeadingMaxLength() + ", onSet=" + this.getOnSet() + ")";
    }
}
