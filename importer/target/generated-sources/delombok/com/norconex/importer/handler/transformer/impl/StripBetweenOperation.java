// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import com.norconex.commons.lang.text.TextMatcher;

public class StripBetweenOperation {
    private final TextMatcher startMatcher = new TextMatcher();
    private final TextMatcher endMatcher = new TextMatcher();
    private boolean inclusive;

    /**
     * Gets the start delimiter matcher for text to strip.
     * @return start delimiter matcher
     */
    public TextMatcher getStartMatcher() {
        return startMatcher;
    }

    /**
     * Sets the start delimiter matcher for text to strip.
     * @param startMatcher start delimiter matcher
     * @return this instance
     */
    public StripBetweenOperation setStartMatcher(TextMatcher startMatcher) {
        this.startMatcher.copyFrom(startMatcher);
        return this;
    }

    /**
     * Gets the end delimiter matcher for text to strip.
     * @return end delimiter matcher
     */
    public TextMatcher getEndMatcher() {
        return endMatcher;
    }

    /**
     * Sets the end delimiter matcher for text to strip.
     * @param endMatcher end delimiter matcher
     * @return this instance
     */
    public StripBetweenOperation setEndMatcher(TextMatcher endMatcher) {
        this.endMatcher.copyFrom(endMatcher);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public StripBetweenOperation() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isInclusive() {
        return this.inclusive;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public StripBetweenOperation setInclusive(final boolean inclusive) {
        this.inclusive = inclusive;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof StripBetweenOperation)) return false;
        final StripBetweenOperation other = (StripBetweenOperation) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isInclusive() != other.isInclusive()) return false;
        final java.lang.Object this$startMatcher = this.getStartMatcher();
        final java.lang.Object other$startMatcher = other.getStartMatcher();
        if (this$startMatcher == null ? other$startMatcher != null : !this$startMatcher.equals(other$startMatcher)) return false;
        final java.lang.Object this$endMatcher = this.getEndMatcher();
        final java.lang.Object other$endMatcher = other.getEndMatcher();
        if (this$endMatcher == null ? other$endMatcher != null : !this$endMatcher.equals(other$endMatcher)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof StripBetweenOperation;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isInclusive() ? 79 : 97);
        final java.lang.Object $startMatcher = this.getStartMatcher();
        result = result * PRIME + ($startMatcher == null ? 43 : $startMatcher.hashCode());
        final java.lang.Object $endMatcher = this.getEndMatcher();
        result = result * PRIME + ($endMatcher == null ? 43 : $endMatcher.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "StripBetweenOperation(startMatcher=" + this.getStartMatcher() + ", endMatcher=" + this.getEndMatcher() + ", inclusive=" + this.isInclusive() + ")";
    }
}
