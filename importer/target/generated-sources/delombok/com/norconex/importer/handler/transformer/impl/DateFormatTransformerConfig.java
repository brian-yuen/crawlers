// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2014-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import com.norconex.commons.lang.collection.CollectionUtil;
import com.norconex.commons.lang.map.PropertySetter;
import com.norconex.commons.lang.time.ZonedDateTimeParser;

/**
 * <p>Formats a date from any given format to a format of choice, as per the
 * formatting options found on {@link ZonedDateTimeParser} with the addition
 * of the format "EPOCH", which represents the difference, measured in
 * milliseconds, between the date and midnight, January 1, 1970.
 * The default format
 * for <code>fromFormat</code> or <code>toFormat</code> when not specified
 * is EPOCH.</p>
 *
 * <p>When omitting the <code>toField</code>, the value will replace the one
 * in the same field.</p>
 *
 * <h3>Storing values in an existing field</h3>
 * <p>
 * If a target field with the same name already exists for a document,
 * values will be added to the end of the existing value list.
 * It is possible to change this default behavior
 * with {@link #setOnSet(PropertySetter)}.
 * </p>
 *
 * <p>Can be used both as a pre-parse or post-parse handler.</p>
 *
 * <p>It is possible to specify a locale used for parsing and formatting dates.
 * The locale is the ISO two-letter language code, with an optional
 * ISO country code, separated with an underscore (e.g., "fr" for French,
 * "fr_CA" for Canadian French). When no locale is specified, the default is
 * English.</p>
 *
 * <p>
 * Multiple <code>fromFormat</code> values can be specified. Each formats will
 * be tried in the order provided and the first format that succeed in
 * parsing a date will be used.
 * A date will be considered "bad" only if none of the formats could parse the
 * date.
 * </p>
 *
 * {@nx.xml.usage
 * <handler class="com.norconex.importer.handler.tagger.impl.DateFormatTagger"
 *     fromField="(from field)" toField="(to field)"
 *     fromLocale="(locale)"    toLocale="(locale)"
 *     toFormat="(date format)"
 *     keepBadDates="(false|true)"
 *     {@nx.include com.norconex.commons.lang.map.PropertySetter#attributes}>
 *
 *   {@nx.include com.norconex.importer.handler.AbstractImporterHandler#restrictTo}
 *
 *   <!-- multiple "fromFormat" tags allowed (only one needs to match) -->
 *   <fromFormat>(date format)</fromFormat>
 * </handler>
 * }
 *
 * {@nx.xml.example
 *  <handler class="DateFormatTagger"
 *          fromField="Last-Modified"
 *          toField="solr_date"
 *          toFormat="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" >
 *      <fromFormat>EEE, dd MMM yyyy HH:mm:ss zzz</fromFormat>
 *      <fromFormat>EPOCH</fromFormat>
 *  </handler>
 * }
 * <p>
 * The following converts a date that is sometimes obtained from the
 * HTTP header "Last-Modified" and sometimes is an EPOCH date,
 * into an Apache Solr date format:
 * </p>
 */
@SuppressWarnings("javadoc")
public class DateFormatTransformerConfig {
    private String fromField;
    private String toField;
    private final List<String> fromFormats = new ArrayList<>();
    private String toFormat;
    /**
     * The locale used for parsing the source date.
     */
    private Locale fromLocale;
    /**
     * The locale used for formatting the target date.
     */
    private Locale toLocale;
    private boolean keepBadDates;
    /**
     * The property setter to use when a value is set.
     */
    private PropertySetter onSet;

    /**
     * Gets the source date formats to match.
     * @return source date formats
     */
    public List<String> getFromFormats() {
        return Collections.unmodifiableList(fromFormats);
    }

    /**
     * Sets the source date formats to match.
     * @param fromFormats source date formats
     */
    public DateFormatTransformerConfig setFromFormats(List<String> fromFormats) {
        CollectionUtil.setAll(this.fromFormats, fromFormats);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DateFormatTransformerConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getFromField() {
        return this.fromField;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getToField() {
        return this.toField;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getToFormat() {
        return this.toFormat;
    }

    /**
     * The locale used for parsing the source date.
     * @return locale
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Locale getFromLocale() {
        return this.fromLocale;
    }

    /**
     * The locale used for formatting the target date.
     * @return locale
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Locale getToLocale() {
        return this.toLocale;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isKeepBadDates() {
        return this.keepBadDates;
    }

    /**
     * The property setter to use when a value is set.
     * @return property setter
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public PropertySetter getOnSet() {
        return this.onSet;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DateFormatTransformerConfig setFromField(final String fromField) {
        this.fromField = fromField;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DateFormatTransformerConfig setToField(final String toField) {
        this.toField = toField;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DateFormatTransformerConfig setToFormat(final String toFormat) {
        this.toFormat = toFormat;
        return this;
    }

    /**
     * The locale used for parsing the source date.
     * @param fromLocale locale
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DateFormatTransformerConfig setFromLocale(final Locale fromLocale) {
        this.fromLocale = fromLocale;
        return this;
    }

    /**
     * The locale used for formatting the target date.
     * @param toLocale locale
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DateFormatTransformerConfig setToLocale(final Locale toLocale) {
        this.toLocale = toLocale;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DateFormatTransformerConfig setKeepBadDates(final boolean keepBadDates) {
        this.keepBadDates = keepBadDates;
        return this;
    }

    /**
     * The property setter to use when a value is set.
     * @param onSet property setter
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DateFormatTransformerConfig setOnSet(final PropertySetter onSet) {
        this.onSet = onSet;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof DateFormatTransformerConfig)) return false;
        final DateFormatTransformerConfig other = (DateFormatTransformerConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isKeepBadDates() != other.isKeepBadDates()) return false;
        final java.lang.Object this$fromField = this.getFromField();
        final java.lang.Object other$fromField = other.getFromField();
        if (this$fromField == null ? other$fromField != null : !this$fromField.equals(other$fromField)) return false;
        final java.lang.Object this$toField = this.getToField();
        final java.lang.Object other$toField = other.getToField();
        if (this$toField == null ? other$toField != null : !this$toField.equals(other$toField)) return false;
        final java.lang.Object this$fromFormats = this.getFromFormats();
        final java.lang.Object other$fromFormats = other.getFromFormats();
        if (this$fromFormats == null ? other$fromFormats != null : !this$fromFormats.equals(other$fromFormats)) return false;
        final java.lang.Object this$toFormat = this.getToFormat();
        final java.lang.Object other$toFormat = other.getToFormat();
        if (this$toFormat == null ? other$toFormat != null : !this$toFormat.equals(other$toFormat)) return false;
        final java.lang.Object this$fromLocale = this.getFromLocale();
        final java.lang.Object other$fromLocale = other.getFromLocale();
        if (this$fromLocale == null ? other$fromLocale != null : !this$fromLocale.equals(other$fromLocale)) return false;
        final java.lang.Object this$toLocale = this.getToLocale();
        final java.lang.Object other$toLocale = other.getToLocale();
        if (this$toLocale == null ? other$toLocale != null : !this$toLocale.equals(other$toLocale)) return false;
        final java.lang.Object this$onSet = this.getOnSet();
        final java.lang.Object other$onSet = other.getOnSet();
        if (this$onSet == null ? other$onSet != null : !this$onSet.equals(other$onSet)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof DateFormatTransformerConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isKeepBadDates() ? 79 : 97);
        final java.lang.Object $fromField = this.getFromField();
        result = result * PRIME + ($fromField == null ? 43 : $fromField.hashCode());
        final java.lang.Object $toField = this.getToField();
        result = result * PRIME + ($toField == null ? 43 : $toField.hashCode());
        final java.lang.Object $fromFormats = this.getFromFormats();
        result = result * PRIME + ($fromFormats == null ? 43 : $fromFormats.hashCode());
        final java.lang.Object $toFormat = this.getToFormat();
        result = result * PRIME + ($toFormat == null ? 43 : $toFormat.hashCode());
        final java.lang.Object $fromLocale = this.getFromLocale();
        result = result * PRIME + ($fromLocale == null ? 43 : $fromLocale.hashCode());
        final java.lang.Object $toLocale = this.getToLocale();
        result = result * PRIME + ($toLocale == null ? 43 : $toLocale.hashCode());
        final java.lang.Object $onSet = this.getOnSet();
        result = result * PRIME + ($onSet == null ? 43 : $onSet.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "DateFormatTransformerConfig(fromField=" + this.getFromField() + ", toField=" + this.getToField() + ", fromFormats=" + this.getFromFormats() + ", toFormat=" + this.getToFormat() + ", fromLocale=" + this.getFromLocale() + ", toLocale=" + this.getToLocale() + ", keepBadDates=" + this.isKeepBadDates() + ", onSet=" + this.getOnSet() + ")";
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static final class Fields {
        public static final java.lang.String fromField = "fromField";
        public static final java.lang.String toField = "toField";
        public static final java.lang.String fromFormats = "fromFormats";
        public static final java.lang.String toFormat = "toFormat";
        public static final java.lang.String fromLocale = "fromLocale";
        public static final java.lang.String toLocale = "toLocale";
        public static final java.lang.String keepBadDates = "keepBadDates";
        public static final java.lang.String onSet = "onSet";
    }
}
