// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2015-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.parser.impl;

import java.nio.file.Path;
import com.norconex.commons.lang.text.TextMatcher;

/**
 * <p>
 * OCR configuration details. OCR relies the open-source
 * <a href="https://github.com/tesseract-ocr/tesseract">Tesseract OCR</a>
 * product to be already installed on your system.
 * </p>
 * <p>You can configure this parser to use the
 * <b><a href="https://code.google.com/p/tesseract-ocr/">Tesseract</a></b>
 * open-source OCR application to extract text out of images
 * or documents containing embedded images (e.g. PDF).  Supported image
 * formats are TIFF, PNG, JPEG, GIF, and BMP.</p>
 *
 * <p>To enable this feature, you must
 * first download and install a copy of Tesseract appropriate for
 * your platform (supported are Linux, Windows, Mac and other platforms).
 * It will only be activated once you configure the path to its install
 * location.
 * Default language detection is for English. To support additional or
 * different languages,
 * you can provide a list of three-letter ISO-639-2 language codes supported
 * by Tesseract (separated with + sign).
 * These languages must be part of your Tesseract installation.
 * You can <a href="https://code.google.com/p/tesseract-ocr/downloads/list">
 * download additional languages</a> form the Tesseract web site.</p>
 *
 * <p>When enabled, OCR is attempted on all supported image formats.  To
 * limit OCR to a subset of document content types, configure the corresponding
 * content-types (e.g. application/pdf, image/tiff, image/png, etc.).</p>
 *
 * <h3>Tesseract Parameters</h3>
 * <p>
 * Unless disabled, Tesseract is detected and used by default.
 * You can
 * There are several extra parameters one can set to configure
 * Tesseract. You can find a listing
 * <a href="https://cwiki.apache.org/confluence/display/tika/TikaOCR">here</a>.
 * </p>
 *
 * {@nx.xml.usage
 * <ocr diabled="[false|true]">
 *   <tesseractPath>(path to Tesseract OCR software executable)</tesseractPath>
 *   <tessdataPath>(path to Tesseract OCR data)</tessdataPath>
 *   <contentTypes>
 *     <!-- "matcher" is repeatable -->
 *     <matcher {@nx.include com.norconex.commons.lang.text.TextMatcher#matchAttributes}>
 *       (expression matching one or more content types on which to apply OCR)
 *     </matcher>
 *   </contentTypes>
 *
 *   <!-- Tesseract configuration parameters: -->
 *   <applyRotation></applyRotation>
 *   <colorSpace></colorSpace>
 *   <density></density>
 *   <depth></depth>
 *   <enableImagePreprocessing></enableImagePreprocessing>
 *   <filter></filter>
 *   <imageMagickPath></imageMagickPath>
 *   <language></language>
 *   <maxFileSizeToOcr></maxFileSizeToOcr>
 *   <minFileSizeToOcr></minFileSizeToOcr>
 *   <pageSegMode></pageSegMode>
 *   <pageSeparator></pageSeparator>
 *   <preserveInterwordSpacing></preserveInterwordSpacing>
 *   <resize></resize>
 *   <timeoutSeconds></timeoutSeconds>
 * </ocr>
 * }
 *
 * {@nx.xml.example
 * <ocr>
 *   <tesseractPath>/app/ocr/tesseract.exe</tesseractPath>
 *   <contentTypes>
 *      <matcher>application/pdf</matcher>
 *   </contentTypes>
 *   <params>
 *     <param name="language">eng,fra</param>
 *   </params>
 * </ocr>
 * }
 * <p>
 * The above example uses Tesseract to convert English and French images in
 * PDF into text.
 * </p>
 */
@SuppressWarnings("javadoc")
public class OcrConfig {
    //TODO extend Tika TesseractOCRConfig instead?
    // Nahh... it does not have all fields, plus not chaining setters.
    // instead use BeanUtil to clone it? Or use reflection
    // to map it to config? Or do it manually.
    private boolean disabled;
    private final TextMatcher contentTypeMatcher = new TextMatcher();
    // Straight from Tika Tesseract config:
    //     https://cwiki.apache.org/confluence/display/TIKA/TikaOCR
    private Boolean applyRotation;
    private String colorSpace;
    private Integer density;
    private Integer depth;
    private Boolean enableImagePreprocessing;
    private String filter;
    private Path imageMagickPath;
    private String language;
    private Long maxFileSizeToOcr;
    private Long minFileSizeToOcr;
    private String pageSegMode;
    private String pageSeparator;
    private Boolean preserveInterwordSpacing;
    private Integer resize;
    private Boolean skipOcr;
    private Path tessdataPath;
    private Path tesseractPath;
    private Integer timeoutSeconds;

    /**
     * The matcher of content types to apply OCR on.
     * @param contentTypeMatcher content type matcher
     * @return this
     */
    public OcrConfig setContentTypeMatcher(TextMatcher matcher) {
        contentTypeMatcher.copyFrom(matcher);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isDisabled() {
        return this.disabled;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TextMatcher getContentTypeMatcher() {
        return this.contentTypeMatcher;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Boolean getApplyRotation() {
        return this.applyRotation;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getColorSpace() {
        return this.colorSpace;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Integer getDensity() {
        return this.density;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Integer getDepth() {
        return this.depth;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Boolean getEnableImagePreprocessing() {
        return this.enableImagePreprocessing;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getFilter() {
        return this.filter;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Path getImageMagickPath() {
        return this.imageMagickPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getLanguage() {
        return this.language;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Long getMaxFileSizeToOcr() {
        return this.maxFileSizeToOcr;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Long getMinFileSizeToOcr() {
        return this.minFileSizeToOcr;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getPageSegMode() {
        return this.pageSegMode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getPageSeparator() {
        return this.pageSeparator;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Boolean getPreserveInterwordSpacing() {
        return this.preserveInterwordSpacing;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Integer getResize() {
        return this.resize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Boolean getSkipOcr() {
        return this.skipOcr;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Path getTessdataPath() {
        return this.tessdataPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Path getTesseractPath() {
        return this.tesseractPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Integer getTimeoutSeconds() {
        return this.timeoutSeconds;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setDisabled(final boolean disabled) {
        this.disabled = disabled;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setApplyRotation(final Boolean applyRotation) {
        this.applyRotation = applyRotation;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setColorSpace(final String colorSpace) {
        this.colorSpace = colorSpace;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setDensity(final Integer density) {
        this.density = density;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setDepth(final Integer depth) {
        this.depth = depth;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setEnableImagePreprocessing(final Boolean enableImagePreprocessing) {
        this.enableImagePreprocessing = enableImagePreprocessing;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setFilter(final String filter) {
        this.filter = filter;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setImageMagickPath(final Path imageMagickPath) {
        this.imageMagickPath = imageMagickPath;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setLanguage(final String language) {
        this.language = language;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setMaxFileSizeToOcr(final Long maxFileSizeToOcr) {
        this.maxFileSizeToOcr = maxFileSizeToOcr;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setMinFileSizeToOcr(final Long minFileSizeToOcr) {
        this.minFileSizeToOcr = minFileSizeToOcr;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setPageSegMode(final String pageSegMode) {
        this.pageSegMode = pageSegMode;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setPageSeparator(final String pageSeparator) {
        this.pageSeparator = pageSeparator;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setPreserveInterwordSpacing(final Boolean preserveInterwordSpacing) {
        this.preserveInterwordSpacing = preserveInterwordSpacing;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setResize(final Integer resize) {
        this.resize = resize;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setSkipOcr(final Boolean skipOcr) {
        this.skipOcr = skipOcr;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setTessdataPath(final Path tessdataPath) {
        this.tessdataPath = tessdataPath;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setTesseractPath(final Path tesseractPath) {
        this.tesseractPath = tesseractPath;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OcrConfig setTimeoutSeconds(final Integer timeoutSeconds) {
        this.timeoutSeconds = timeoutSeconds;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof OcrConfig)) return false;
        final OcrConfig other = (OcrConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isDisabled() != other.isDisabled()) return false;
        final java.lang.Object this$applyRotation = this.getApplyRotation();
        final java.lang.Object other$applyRotation = other.getApplyRotation();
        if (this$applyRotation == null ? other$applyRotation != null : !this$applyRotation.equals(other$applyRotation)) return false;
        final java.lang.Object this$density = this.getDensity();
        final java.lang.Object other$density = other.getDensity();
        if (this$density == null ? other$density != null : !this$density.equals(other$density)) return false;
        final java.lang.Object this$depth = this.getDepth();
        final java.lang.Object other$depth = other.getDepth();
        if (this$depth == null ? other$depth != null : !this$depth.equals(other$depth)) return false;
        final java.lang.Object this$enableImagePreprocessing = this.getEnableImagePreprocessing();
        final java.lang.Object other$enableImagePreprocessing = other.getEnableImagePreprocessing();
        if (this$enableImagePreprocessing == null ? other$enableImagePreprocessing != null : !this$enableImagePreprocessing.equals(other$enableImagePreprocessing)) return false;
        final java.lang.Object this$maxFileSizeToOcr = this.getMaxFileSizeToOcr();
        final java.lang.Object other$maxFileSizeToOcr = other.getMaxFileSizeToOcr();
        if (this$maxFileSizeToOcr == null ? other$maxFileSizeToOcr != null : !this$maxFileSizeToOcr.equals(other$maxFileSizeToOcr)) return false;
        final java.lang.Object this$minFileSizeToOcr = this.getMinFileSizeToOcr();
        final java.lang.Object other$minFileSizeToOcr = other.getMinFileSizeToOcr();
        if (this$minFileSizeToOcr == null ? other$minFileSizeToOcr != null : !this$minFileSizeToOcr.equals(other$minFileSizeToOcr)) return false;
        final java.lang.Object this$preserveInterwordSpacing = this.getPreserveInterwordSpacing();
        final java.lang.Object other$preserveInterwordSpacing = other.getPreserveInterwordSpacing();
        if (this$preserveInterwordSpacing == null ? other$preserveInterwordSpacing != null : !this$preserveInterwordSpacing.equals(other$preserveInterwordSpacing)) return false;
        final java.lang.Object this$resize = this.getResize();
        final java.lang.Object other$resize = other.getResize();
        if (this$resize == null ? other$resize != null : !this$resize.equals(other$resize)) return false;
        final java.lang.Object this$skipOcr = this.getSkipOcr();
        final java.lang.Object other$skipOcr = other.getSkipOcr();
        if (this$skipOcr == null ? other$skipOcr != null : !this$skipOcr.equals(other$skipOcr)) return false;
        final java.lang.Object this$timeoutSeconds = this.getTimeoutSeconds();
        final java.lang.Object other$timeoutSeconds = other.getTimeoutSeconds();
        if (this$timeoutSeconds == null ? other$timeoutSeconds != null : !this$timeoutSeconds.equals(other$timeoutSeconds)) return false;
        final java.lang.Object this$contentTypeMatcher = this.getContentTypeMatcher();
        final java.lang.Object other$contentTypeMatcher = other.getContentTypeMatcher();
        if (this$contentTypeMatcher == null ? other$contentTypeMatcher != null : !this$contentTypeMatcher.equals(other$contentTypeMatcher)) return false;
        final java.lang.Object this$colorSpace = this.getColorSpace();
        final java.lang.Object other$colorSpace = other.getColorSpace();
        if (this$colorSpace == null ? other$colorSpace != null : !this$colorSpace.equals(other$colorSpace)) return false;
        final java.lang.Object this$filter = this.getFilter();
        final java.lang.Object other$filter = other.getFilter();
        if (this$filter == null ? other$filter != null : !this$filter.equals(other$filter)) return false;
        final java.lang.Object this$imageMagickPath = this.getImageMagickPath();
        final java.lang.Object other$imageMagickPath = other.getImageMagickPath();
        if (this$imageMagickPath == null ? other$imageMagickPath != null : !this$imageMagickPath.equals(other$imageMagickPath)) return false;
        final java.lang.Object this$language = this.getLanguage();
        final java.lang.Object other$language = other.getLanguage();
        if (this$language == null ? other$language != null : !this$language.equals(other$language)) return false;
        final java.lang.Object this$pageSegMode = this.getPageSegMode();
        final java.lang.Object other$pageSegMode = other.getPageSegMode();
        if (this$pageSegMode == null ? other$pageSegMode != null : !this$pageSegMode.equals(other$pageSegMode)) return false;
        final java.lang.Object this$pageSeparator = this.getPageSeparator();
        final java.lang.Object other$pageSeparator = other.getPageSeparator();
        if (this$pageSeparator == null ? other$pageSeparator != null : !this$pageSeparator.equals(other$pageSeparator)) return false;
        final java.lang.Object this$tessdataPath = this.getTessdataPath();
        final java.lang.Object other$tessdataPath = other.getTessdataPath();
        if (this$tessdataPath == null ? other$tessdataPath != null : !this$tessdataPath.equals(other$tessdataPath)) return false;
        final java.lang.Object this$tesseractPath = this.getTesseractPath();
        final java.lang.Object other$tesseractPath = other.getTesseractPath();
        if (this$tesseractPath == null ? other$tesseractPath != null : !this$tesseractPath.equals(other$tesseractPath)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof OcrConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isDisabled() ? 79 : 97);
        final java.lang.Object $applyRotation = this.getApplyRotation();
        result = result * PRIME + ($applyRotation == null ? 43 : $applyRotation.hashCode());
        final java.lang.Object $density = this.getDensity();
        result = result * PRIME + ($density == null ? 43 : $density.hashCode());
        final java.lang.Object $depth = this.getDepth();
        result = result * PRIME + ($depth == null ? 43 : $depth.hashCode());
        final java.lang.Object $enableImagePreprocessing = this.getEnableImagePreprocessing();
        result = result * PRIME + ($enableImagePreprocessing == null ? 43 : $enableImagePreprocessing.hashCode());
        final java.lang.Object $maxFileSizeToOcr = this.getMaxFileSizeToOcr();
        result = result * PRIME + ($maxFileSizeToOcr == null ? 43 : $maxFileSizeToOcr.hashCode());
        final java.lang.Object $minFileSizeToOcr = this.getMinFileSizeToOcr();
        result = result * PRIME + ($minFileSizeToOcr == null ? 43 : $minFileSizeToOcr.hashCode());
        final java.lang.Object $preserveInterwordSpacing = this.getPreserveInterwordSpacing();
        result = result * PRIME + ($preserveInterwordSpacing == null ? 43 : $preserveInterwordSpacing.hashCode());
        final java.lang.Object $resize = this.getResize();
        result = result * PRIME + ($resize == null ? 43 : $resize.hashCode());
        final java.lang.Object $skipOcr = this.getSkipOcr();
        result = result * PRIME + ($skipOcr == null ? 43 : $skipOcr.hashCode());
        final java.lang.Object $timeoutSeconds = this.getTimeoutSeconds();
        result = result * PRIME + ($timeoutSeconds == null ? 43 : $timeoutSeconds.hashCode());
        final java.lang.Object $contentTypeMatcher = this.getContentTypeMatcher();
        result = result * PRIME + ($contentTypeMatcher == null ? 43 : $contentTypeMatcher.hashCode());
        final java.lang.Object $colorSpace = this.getColorSpace();
        result = result * PRIME + ($colorSpace == null ? 43 : $colorSpace.hashCode());
        final java.lang.Object $filter = this.getFilter();
        result = result * PRIME + ($filter == null ? 43 : $filter.hashCode());
        final java.lang.Object $imageMagickPath = this.getImageMagickPath();
        result = result * PRIME + ($imageMagickPath == null ? 43 : $imageMagickPath.hashCode());
        final java.lang.Object $language = this.getLanguage();
        result = result * PRIME + ($language == null ? 43 : $language.hashCode());
        final java.lang.Object $pageSegMode = this.getPageSegMode();
        result = result * PRIME + ($pageSegMode == null ? 43 : $pageSegMode.hashCode());
        final java.lang.Object $pageSeparator = this.getPageSeparator();
        result = result * PRIME + ($pageSeparator == null ? 43 : $pageSeparator.hashCode());
        final java.lang.Object $tessdataPath = this.getTessdataPath();
        result = result * PRIME + ($tessdataPath == null ? 43 : $tessdataPath.hashCode());
        final java.lang.Object $tesseractPath = this.getTesseractPath();
        result = result * PRIME + ($tesseractPath == null ? 43 : $tesseractPath.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "OcrConfig(disabled=" + this.isDisabled() + ", contentTypeMatcher=" + this.getContentTypeMatcher() + ", applyRotation=" + this.getApplyRotation() + ", colorSpace=" + this.getColorSpace() + ", density=" + this.getDensity() + ", depth=" + this.getDepth() + ", enableImagePreprocessing=" + this.getEnableImagePreprocessing() + ", filter=" + this.getFilter() + ", imageMagickPath=" + this.getImageMagickPath() + ", language=" + this.getLanguage() + ", maxFileSizeToOcr=" + this.getMaxFileSizeToOcr() + ", minFileSizeToOcr=" + this.getMinFileSizeToOcr() + ", pageSegMode=" + this.getPageSegMode() + ", pageSeparator=" + this.getPageSeparator() + ", preserveInterwordSpacing=" + this.getPreserveInterwordSpacing() + ", resize=" + this.getResize() + ", skipOcr=" + this.getSkipOcr() + ", tessdataPath=" + this.getTessdataPath() + ", tesseractPath=" + this.getTesseractPath() + ", timeoutSeconds=" + this.getTimeoutSeconds() + ")";
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static final class Fields {
        public static final java.lang.String disabled = "disabled";
        public static final java.lang.String contentTypeMatcher = "contentTypeMatcher";
        public static final java.lang.String applyRotation = "applyRotation";
        public static final java.lang.String colorSpace = "colorSpace";
        public static final java.lang.String density = "density";
        public static final java.lang.String depth = "depth";
        public static final java.lang.String enableImagePreprocessing = "enableImagePreprocessing";
        public static final java.lang.String filter = "filter";
        public static final java.lang.String imageMagickPath = "imageMagickPath";
        public static final java.lang.String language = "language";
        public static final java.lang.String maxFileSizeToOcr = "maxFileSizeToOcr";
        public static final java.lang.String minFileSizeToOcr = "minFileSizeToOcr";
        public static final java.lang.String pageSegMode = "pageSegMode";
        public static final java.lang.String pageSeparator = "pageSeparator";
        public static final java.lang.String preserveInterwordSpacing = "preserveInterwordSpacing";
        public static final java.lang.String resize = "resize";
        public static final java.lang.String skipOcr = "skipOcr";
        public static final java.lang.String tessdataPath = "tessdataPath";
        public static final java.lang.String tesseractPath = "tesseractPath";
        public static final java.lang.String timeoutSeconds = "timeoutSeconds";
    }
//
//
//
//    // below to refactor:
//
//
////    private boolean disabled;
//
//    /**
//     * The Tesseract OCR engine full path to the executable file.
//     * @param path executable path
//     * @return path executable path
//     */
////    private Path tesseractPath;
////    private Path tessdataPath;
//
//    private final List<TextMatcher> contentTypeMatchers = new ArrayList<>();
//
////    private Path imageMagickPath;
//
//    @ToString.Exclude
//    @EqualsAndHashCode.Exclude
//    @NonNull
//    private TesseractOCRConfig tesseractConfig = new TesseractOCRConfig();
//
//    /**
//     * Text matchers restricting which content types to apply OCR.
//     * @return content type matchers
//     */
//    public List<TextMatcher> getContentTypeMatchers() {
//        return Collections.unmodifiableList(contentTypeMatchers);
//    }
//    /**
//     * Text matchers restricting which content types to apply OCR.
//     * @param matchers content type matchers
//     */
//    public void setContentTypeMatchers(List<TextMatcher> matchers) {
//        CollectionUtil.setAll(contentTypeMatchers, matchers);
//    }
//
//    @EqualsAndHashCode.Include
//    @ToString.Include
//    private String tesseractConfigToString() {
//        return new ReflectionToStringBuilder(
//                tesseractConfig,
//                ToStringStyle.NO_CLASS_NAME_STYLE)
//            .setExcludeFieldNames("userConfigured")
//            .toString();
//    }
//
//    @Override
//    public void loadFromXML(XML xml) {
//        setDisabled(xml.getBoolean("@disabled"));
//        setTesseractPath(xml.getPath(Fields.tesseractPath, tesseractPath));
//        setTessdataPath(xml.getPath(Fields.tessdataPath, tessdataPath));
//        setContentTypeMatchers(xml.getXMLList("contentTypes/matcher").stream()
//            .map(x -> {
//                var tm = new TextMatcher();
//                tm.loadFromXML(x);
//                return tm;
//            })
//            .toList());
//        setImageMagickPath(
//                xml.getPath(Fields.imageMagickPath, getImageMagickPath()));
//
//        var t = tesseractConfig;
//        t.setApplyRotation(
//                xml.getBoolean("applyRotation", t.isApplyRotation()));
//        t.setColorspace(xml.getString("colorSpace", t.getColorspace()));
//        t.setDensity(xml.getInteger("density", t.getDensity()));
//        t.setDepth(xml.getInteger("depth", t.getDepth()));
//        t.setEnableImagePreprocessing(xml.getBoolean(
//                "enableImagePreprocessing", t.isEnableImagePreprocessing()));
//        t.setFilter(xml.getString("filter", t.getFilter()));
//        t.setLanguage(xml.getString("language", t.getLanguage()));
//        t.setMaxFileSizeToOcr(
//                xml.getLong("maxFileSizeToOcr", t.getMaxFileSizeToOcr()));
//        t.setMinFileSizeToOcr(
//                xml.getLong("minFileSizeToOcr", t.getMinFileSizeToOcr()));
//        t.setPageSegMode(
//                xml.getString("pageSegMode", t.getPageSegMode()));
//        // TesseractOCRConfig defaults to "" but does not want ""
//        var pageSep = xml.getString("pageSeparator");
//        if (StringUtils.isNotBlank(pageSep)) {
//            t.setPageSeparator(
//                    xml.getString("pageSeparator", t.getPageSeparator()));
//        }
//        t.setPreserveInterwordSpacing(xml.getBoolean(
//                "preserveInterwordSpacing", t.isPreserveInterwordSpacing()));
//        t.setResize(xml.getInteger("resize", t.getResize()));
//        t.setTimeoutSeconds(
//                xml.getInteger("timeoutSeconds", t.getTimeoutSeconds()));
//    }
//
//    @Override
//    public void saveToXML(XML xml) {
//        xml.setAttribute("disabled", disabled);
//        xml.addElement(Fields.tesseractPath, tesseractPath);
//        xml.addElement(Fields.tessdataPath, tessdataPath);
//        xml.addElementList("contentTypes", "matcher", contentTypeMatchers);
//        xml.addElement(Fields.imageMagickPath, imageMagickPath);
//
//        var t = tesseractConfig;
//        xml.addElement("applyRotation", t.isApplyRotation());
//        xml.addElement("colorSpace", t.getColorspace());
//        xml.addElement("density", t.getDensity());
//        xml.addElement("depth", t.getDepth());
//        xml.addElement(
//                "enableImagePreprocessing", t.isEnableImagePreprocessing());
//        xml.addElement("filter", t.getFilter());
//        xml.addElement("language", t.getLanguage());
//        xml.addElement("maxFileSizeToOcr", t.getMaxFileSizeToOcr());
//        xml.addElement("minFileSizeToOcr", t.getMinFileSizeToOcr());
//        xml.addElement("pageSegMode", t.getPageSegMode());
//        xml.addElement("pageSeparator", t.getPageSeparator());
//        xml.addElement(
//                "preserveInterwordSpacing", t.isPreserveInterwordSpacing());
//        xml.addElement("resize", t.getResize());
//        xml.addElement("timeoutSeconds", t.getTimeoutSeconds());
//    }
}
