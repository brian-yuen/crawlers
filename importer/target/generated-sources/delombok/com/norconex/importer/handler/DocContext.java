// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2020-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import com.norconex.commons.lang.event.EventManager;
import com.norconex.commons.lang.io.CachedOutputStream;
import com.norconex.commons.lang.io.CachedStreamFactory;
import com.norconex.commons.lang.map.Properties;
import com.norconex.importer.charset.CharsetUtil;
import com.norconex.importer.doc.Doc;
import com.norconex.importer.doc.DocRecord;
import com.norconex.importer.handler.condition.Condition;
import com.norconex.importer.handler.parser.ParseState;
import com.norconex.importer.util.ReadAdapter;
import com.norconex.importer.util.WriteAdapter;
import lombok.Builder.Default;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;

public class DocContext {
    private final List<Doc> childDocs = new ArrayList<>();
    private CachedOutputStream out;
    @NonNull
    private final Doc doc;
    @NonNull
    private ParseState parseState;
    /**
     * Closest wrapping {@link Condition}, if applicable.
     */
    @SuppressWarnings("javadoc")
    private Condition condition;
    @NonNull
    private final EventManager eventManager;
    private Object rejectedBy;

    public DocRecord docRecord() {
        return doc.getDocRecord();
    }

    public Properties metadata() {
        return doc.getMetadata();
    }

    public String reference() {
        return doc.getReference();
    }

    public CachedStreamFactory streamFactory() {
        return doc.getStreamFactory();
    }

    public boolean isRejected() {
        return rejectedBy != null;
    }

    /**
     * Return the most appropriate charset for the current context. Logic
     * (in order):
     * <ul>
     *  <li>If the document has been parsed already, return UTF-8.</li>
     *  <li>If the provided Charset if not <code>null</code>, return it.</li>
     *  <li>If the document has a Charset on it, return it.</li>
     *  <li>Fallback to UTF-8.</li>
     * </ul>
     * @param charset the charset to use if non-null and the document has not
     *     been parsed yet.
     * @return a character set (never <code>null</code>)
     */
    public Charset resolveCharset(Charset charset) {
        return CharsetUtil.firstNonNullOrUTF8(parseState, charset, docRecord().getCharset(), StandardCharsets.UTF_8);
    }

    /**
     * Flush and dispose any output that has been written to with
     * {@link #output()} and apply it as the input source of the underlying
     * document.
     * @throws IOException
     */
    public synchronized void flush() throws IOException {
        // PROBLEM: when Cached output stream is wrapped in a writer,
        // the writer won't call the write method on it if we are
        // writing an empty string.  That way we can't rely on
        // "isCacheEmpty" to find out if the content was intentionally
        // blanked out.
        if (out != null && !out.isCacheEmpty()) {
            doc.setInputStream(out.getInputStream());
            out.dispose();
            out = null;
        }
    }

    /**
     * Flushes any output and returns an adapter for  the document input..
     * @return document input adapter
     * @throws IOException
     */
    public synchronized ReadAdapter input() throws IOException {
        flush();
        return new ReadAdapter(doc::getInputStream, CharsetUtil.firstNonNullOrUTF8(parseState, docRecord().getCharset()));
    }

    /**
     * Make sure to close the stream when done or explictely flush the stream.
     * @return output adapter
     */
    public synchronized WriteAdapter output() {
        out = streamFactory().newOuputStream();
        return new WriteAdapter(out);
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static ParseState $default$parseState() {
        return ParseState.PRE;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    DocContext(final CachedOutputStream out, @NonNull final Doc doc, @NonNull final ParseState parseState, final Condition condition, @NonNull final EventManager eventManager, final Object rejectedBy) {
        java.util.Objects.requireNonNull(doc, "doc is marked non-null but is null");
        java.util.Objects.requireNonNull(parseState, "parseState is marked non-null but is null");
        java.util.Objects.requireNonNull(eventManager, "eventManager is marked non-null but is null");
        this.out = out;
        this.doc = doc;
        this.parseState = parseState;
        this.condition = condition;
        this.eventManager = eventManager;
        this.rejectedBy = rejectedBy;
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class DocContextBuilder {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private CachedOutputStream out;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Doc doc;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean parseState$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private ParseState parseState$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Condition condition;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private EventManager eventManager;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Object rejectedBy;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        DocContextBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public DocContext.DocContextBuilder out(final CachedOutputStream out) {
            this.out = out;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public DocContext.DocContextBuilder doc(@NonNull final Doc doc) {
            java.util.Objects.requireNonNull(doc, "doc is marked non-null but is null");
            this.doc = doc;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public DocContext.DocContextBuilder parseState(@NonNull final ParseState parseState) {
            java.util.Objects.requireNonNull(parseState, "parseState is marked non-null but is null");
            this.parseState$value = parseState;
            parseState$set = true;
            return this;
        }

        /**
         * Closest wrapping {@link Condition}, if applicable.
         * @param condition a condition
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public DocContext.DocContextBuilder condition(final Condition condition) {
            this.condition = condition;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public DocContext.DocContextBuilder eventManager(@NonNull final EventManager eventManager) {
            java.util.Objects.requireNonNull(eventManager, "eventManager is marked non-null but is null");
            this.eventManager = eventManager;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public DocContext.DocContextBuilder rejectedBy(final Object rejectedBy) {
            this.rejectedBy = rejectedBy;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public DocContext build() {
            ParseState parseState$value = this.parseState$value;
            if (!this.parseState$set) parseState$value = DocContext.$default$parseState();
            return new DocContext(this.out, this.doc, parseState$value, this.condition, this.eventManager, this.rejectedBy);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "DocContext.DocContextBuilder(out=" + this.out + ", doc=" + this.doc + ", parseState$value=" + this.parseState$value + ", condition=" + this.condition + ", eventManager=" + this.eventManager + ", rejectedBy=" + this.rejectedBy + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static DocContext.DocContextBuilder builder() {
        return new DocContext.DocContextBuilder();
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DocContext parseState(@NonNull final ParseState parseState) {
        java.util.Objects.requireNonNull(parseState, "parseState is marked non-null but is null");
        this.parseState = parseState;
        return this;
    }

    /**
     * Closest wrapping {@link Condition}, if applicable.
     * @param condition a condition
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DocContext condition(final Condition condition) {
        this.condition = condition;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DocContext rejectedBy(final Object rejectedBy) {
        this.rejectedBy = rejectedBy;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof DocContext)) return false;
        final DocContext other = (DocContext) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$childDocs = this.childDocs();
        final java.lang.Object other$childDocs = other.childDocs();
        if (this$childDocs == null ? other$childDocs != null : !this$childDocs.equals(other$childDocs)) return false;
        final java.lang.Object this$out = this.out;
        final java.lang.Object other$out = other.out;
        if (this$out == null ? other$out != null : !this$out.equals(other$out)) return false;
        final java.lang.Object this$doc = this.doc();
        final java.lang.Object other$doc = other.doc();
        if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
        final java.lang.Object this$parseState = this.parseState();
        final java.lang.Object other$parseState = other.parseState();
        if (this$parseState == null ? other$parseState != null : !this$parseState.equals(other$parseState)) return false;
        final java.lang.Object this$eventManager = this.eventManager();
        final java.lang.Object other$eventManager = other.eventManager();
        if (this$eventManager == null ? other$eventManager != null : !this$eventManager.equals(other$eventManager)) return false;
        final java.lang.Object this$rejectedBy = this.rejectedBy();
        final java.lang.Object other$rejectedBy = other.rejectedBy();
        if (this$rejectedBy == null ? other$rejectedBy != null : !this$rejectedBy.equals(other$rejectedBy)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof DocContext;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $childDocs = this.childDocs();
        result = result * PRIME + ($childDocs == null ? 43 : $childDocs.hashCode());
        final java.lang.Object $out = this.out;
        result = result * PRIME + ($out == null ? 43 : $out.hashCode());
        final java.lang.Object $doc = this.doc();
        result = result * PRIME + ($doc == null ? 43 : $doc.hashCode());
        final java.lang.Object $parseState = this.parseState();
        result = result * PRIME + ($parseState == null ? 43 : $parseState.hashCode());
        final java.lang.Object $eventManager = this.eventManager();
        result = result * PRIME + ($eventManager == null ? 43 : $eventManager.hashCode());
        final java.lang.Object $rejectedBy = this.rejectedBy();
        result = result * PRIME + ($rejectedBy == null ? 43 : $rejectedBy.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "DocContext(childDocs=" + this.childDocs() + ", out=" + this.out + ", doc=" + this.doc() + ", parseState=" + this.parseState() + ", eventManager=" + this.eventManager() + ", rejectedBy=" + this.rejectedBy() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<Doc> childDocs() {
        return this.childDocs;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ParseState parseState() {
        return this.parseState;
    }

    /**
     * Closest wrapping {@link Condition}, if applicable.
     * @return condition
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Condition condition() {
        return this.condition;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EventManager eventManager() {
        return this.eventManager;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Object rejectedBy() {
        return this.rejectedBy;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    Doc doc() {
        return this.doc;
    }
}
