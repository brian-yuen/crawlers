// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2019-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import static com.norconex.importer.handler.transformer.impl.FieldReportTransformerConfig.DEFAULT_FILE;
import static java.util.Optional.ofNullable;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.lang3.StringUtils;
import com.norconex.commons.lang.config.Configurable;
import com.norconex.commons.lang.map.Properties;
import com.norconex.importer.handler.BaseDocumentHandler;
import com.norconex.importer.handler.DocContext;

/**
 * <p>A utility tagger that reports in a CSV file the fields discovered
 * in a crawl session, captured at the point of your choice in the
 * importing process.
 * If you use this class to report on all fields discovered, make sure you
 * use it as a post-parse handler, before you are limiting which fields
 * you want to keep.
 * </p>
 * <p>
 * The report will list one field per row, along with a few sample values
 * (3 by default).  The samples will be the first ones encountered.
 * </p>
 * <p>
 * This handler does not impact the data being imported at all
 * (it only reads it). It also do not store the "content" as a field.
 * </p>
 * <p>
 * When not specified with {@link #setFile(Path)}, a file called
 * "field-report.csv" will be created in the working directory.
 * </p>
 *
 * <p>Can be used both as a pre-parse or post-parse handler.</p>
 *
 * {@nx.xml.usage
 * <handler class="com.norconex.importer.handler.tagger.impl.FieldReportTagger"
 *     maxSamples="(max number of sample values)"
 *     withHeaders="[false|true]"
 *     withOccurences="[false|true]"
 *     truncateSamplesAt="(number of characters to truncate long samples)"
 *     file="(path to a local file)" >
 *
 *   {@nx.include com.norconex.importer.handler.AbstractImporterHandler#restrictTo}
 *
 * </handler>
 * }
 *
 * {@nx.xml.example
 * <handler class="FieldReportTagger"
 *     maxSamples="1" file="C:\reports\field-report.csv" />
 * }
 * <p>
 * The above example logs all discovered fields into a "field-report.csv" file,
 * along with only 1 example value.
 * </p>
 */
@SuppressWarnings("javadoc")
public class FieldReportTransformer extends BaseDocumentHandler implements Configurable<FieldReportTransformerConfig> {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(FieldReportTransformer.class);
    private final FieldReportTransformerConfig configuration = new FieldReportTransformerConfig();
    private final Map<String, FieldData> fields = MapUtils.lazyMap(new TreeMap<>(), FieldData::new);

    @Override
    public void handle(DocContext docCtx) throws IOException {
        reportFields(docCtx.metadata());
    }

    private synchronized void reportFields(Properties metadata) {
        var dirty = false;
        for (Entry<String, List<String>> en : metadata.entrySet()) {
            if (reportField(en.getKey(), en.getValue())) {
                dirty = true;
            }
        }
        if (dirty) {
            saveReport();
        }
    }

    private boolean reportField(String field, List<String> samples) {
        var dirty = false;
        if (!fields.containsKey(field)) {
            dirty = true;
        }
        var fieldData = fields.get(field);
        if (fieldData.addSamples(samples, configuration.getMaxSamples(), configuration.getTruncateSamplesAt())) {
            dirty = true;
        }
        return dirty;
    }

    private void saveReport() {
        var f = ofNullable(configuration.getFile()).orElse(DEFAULT_FILE);
        try (var printer = new CSVPrinter(new FileWriter(f.toFile()), CSVFormat.DEFAULT)) {
            if (configuration.isWithHeaders()) {
                printer.print("Field Name");
                if (configuration.isWithOccurences()) {
                    printer.print("Occurences");
                }
                for (var i = 1; i <= configuration.getMaxSamples(); i++) {
                    printer.print("Sample Value " + i);
                }
                printer.println();
            }
            for (FieldData fieldData : fields.values()) {
                printer.print(fieldData.name);
                if (configuration.isWithOccurences()) {
                    printer.print(fieldData.occurences);
                }
                for (String value : fieldData.values) {
                    printer.print(value);
                }
                // fill the blanks
                for (var i = 0; i < configuration.getMaxSamples() - fieldData.values.size(); i++) {
                    printer.print("");
                }
                printer.println();
            }
            printer.flush();
        } catch (IOException e) {
            LOG.error("Could not write field report to: " + f, e);
        }
    }


    class FieldData {
        private final String name;
        private final Set<String> values = new HashSet<>();
        private int occurences;

        public FieldData(String name) {
            this.name = name;
        }

        // returns true if something changed
        public boolean addSamples(List<String> samples, int maxSamples, int truncateAt) {
            occurences++;
            if (samples == null) {
                return false;
            }
            var beforeCount = values.size();
            for (String sample : samples) {
                if ((values.size() >= maxSamples) || !StringUtils.isNotBlank(sample)) {
                    break;
                }
                if (truncateAt > -1) {
                    values.add(StringUtils.truncate(sample, truncateAt));
                } else {
                    values.add(sample);
                }
            }
            return configuration.isWithOccurences() || beforeCount != values.size();
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof FieldReportTransformer.FieldData)) return false;
            final FieldReportTransformer.FieldData other = (FieldReportTransformer.FieldData) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.occurences != other.occurences) return false;
            final java.lang.Object this$name = this.name;
            final java.lang.Object other$name = other.name;
            if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
            final java.lang.Object this$values = this.values;
            final java.lang.Object other$values = other.values;
            if (this$values == null ? other$values != null : !this$values.equals(other$values)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof FieldReportTransformer.FieldData;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + this.occurences;
            final java.lang.Object $name = this.name;
            result = result * PRIME + ($name == null ? 43 : $name.hashCode());
            final java.lang.Object $values = this.values;
            result = result * PRIME + ($values == null ? 43 : $values.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "FieldReportTransformer.FieldData(name=" + this.name + ", values=" + this.values + ", occurences=" + this.occurences + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FieldReportTransformer() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FieldReportTransformerConfig getConfiguration() {
        return this.configuration;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Map<String, FieldData> getFields() {
        return this.fields;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof FieldReportTransformer)) return false;
        final FieldReportTransformer other = (FieldReportTransformer) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        final java.lang.Object this$configuration = this.getConfiguration();
        final java.lang.Object other$configuration = other.getConfiguration();
        if (this$configuration == null ? other$configuration != null : !this$configuration.equals(other$configuration)) return false;
        final java.lang.Object this$fields = this.getFields();
        final java.lang.Object other$fields = other.getFields();
        if (this$fields == null ? other$fields != null : !this$fields.equals(other$fields)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof FieldReportTransformer;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        final java.lang.Object $configuration = this.getConfiguration();
        result = result * PRIME + ($configuration == null ? 43 : $configuration.hashCode());
        final java.lang.Object $fields = this.getFields();
        result = result * PRIME + ($fields == null ? 43 : $fields.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "FieldReportTransformer(super=" + super.toString() + ", configuration=" + this.getConfiguration() + ", fields=" + this.getFields() + ")";
    }
}
