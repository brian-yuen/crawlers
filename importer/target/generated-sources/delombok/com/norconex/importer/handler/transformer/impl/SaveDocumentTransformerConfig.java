// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import java.nio.file.Path;
import com.norconex.commons.lang.text.StringUtil;

/**
 * <p>
 * Saves a copy of the document at its current processing state in
 * the specified directory. If no directory is specified, the default is
 * {@value SaveDocumentTransformerConfig#DEFAULT_SAVE_DIR_PATH}.
 * It is recommended to use this tagger as a pre-parse handler if you
 * want to save the original file.
 * </p>
 * <p>
 * Any maximum file path length value below
 * {@value StringUtil#TRUNCATE_HASH_LENGTH} is considered unlimited
 * (the default).
 * </p>
 *
 * {@nx.xml.usage
 * <handler class="com.norconex.importer.handler.tagger.impl.SaveDocumentTagger">
 *
 *   {@nx.include com.norconex.importer.handler.AbstractImporterHandler#restrictTo}
 *
 *   <saveDir>(target directory path where to save documents)</saveDir>
 *   <maxPathLength>
 *     (maximum file path length; defaults to -1, i.e., unlimited)
 *   </maxPathLength>
 *   <dirSplitPattern>
 *     (regular expression matching the separator(s) used to split the document
 *      reference in sub-directories)
 *   </dirSplitPattern>
 *   <escape>[false|true]</escape>
 *   <pathToField>
 *     (optional field name where to store the saved file path)
 *   </pathToField>
 *   <defaultFileName>
 *     (file name to use if a file path already exists as a directory).
 *   </defaultFileName>
 * </handler>
 * }
 *
 * {@nx.xml.example
 * <handler class="SaveDocumentTagger">
 *   <saveDir>/save/files/here/</saveDir>
 *   <pathToField>file.path</pathToField>
 *   <defaultFileName>index.html</defaultFileName>
 * </handler>
 * }
 */
@SuppressWarnings("javadoc")
public class SaveDocumentTransformerConfig {
    public static final String DEFAULT_SAVE_DIR_PATH = "./savedDocuments";
    public static final String DEFAULT_SPLIT_PATTERN = "[\\:/]";
    public static final String DEFAULT_DEFAULT_FILE_NAME = "default.file";
    private Path saveDir = Path.of(DEFAULT_SAVE_DIR_PATH);
    private int maxPathLength = -1; // including saveDir, min -1 or 10
    private String dirSplitPattern = DEFAULT_SPLIT_PATTERN;
    private boolean escape;
    private String pathToField;
    private String defaultFileName = DEFAULT_DEFAULT_FILE_NAME;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SaveDocumentTransformerConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Path getSaveDir() {
        return this.saveDir;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxPathLength() {
        return this.maxPathLength;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDirSplitPattern() {
        return this.dirSplitPattern;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isEscape() {
        return this.escape;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getPathToField() {
        return this.pathToField;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDefaultFileName() {
        return this.defaultFileName;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SaveDocumentTransformerConfig setSaveDir(final Path saveDir) {
        this.saveDir = saveDir;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SaveDocumentTransformerConfig setMaxPathLength(final int maxPathLength) {
        this.maxPathLength = maxPathLength;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SaveDocumentTransformerConfig setDirSplitPattern(final String dirSplitPattern) {
        this.dirSplitPattern = dirSplitPattern;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SaveDocumentTransformerConfig setEscape(final boolean escape) {
        this.escape = escape;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SaveDocumentTransformerConfig setPathToField(final String pathToField) {
        this.pathToField = pathToField;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SaveDocumentTransformerConfig setDefaultFileName(final String defaultFileName) {
        this.defaultFileName = defaultFileName;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof SaveDocumentTransformerConfig)) return false;
        final SaveDocumentTransformerConfig other = (SaveDocumentTransformerConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getMaxPathLength() != other.getMaxPathLength()) return false;
        if (this.isEscape() != other.isEscape()) return false;
        final java.lang.Object this$saveDir = this.getSaveDir();
        final java.lang.Object other$saveDir = other.getSaveDir();
        if (this$saveDir == null ? other$saveDir != null : !this$saveDir.equals(other$saveDir)) return false;
        final java.lang.Object this$dirSplitPattern = this.getDirSplitPattern();
        final java.lang.Object other$dirSplitPattern = other.getDirSplitPattern();
        if (this$dirSplitPattern == null ? other$dirSplitPattern != null : !this$dirSplitPattern.equals(other$dirSplitPattern)) return false;
        final java.lang.Object this$pathToField = this.getPathToField();
        final java.lang.Object other$pathToField = other.getPathToField();
        if (this$pathToField == null ? other$pathToField != null : !this$pathToField.equals(other$pathToField)) return false;
        final java.lang.Object this$defaultFileName = this.getDefaultFileName();
        final java.lang.Object other$defaultFileName = other.getDefaultFileName();
        if (this$defaultFileName == null ? other$defaultFileName != null : !this$defaultFileName.equals(other$defaultFileName)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof SaveDocumentTransformerConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getMaxPathLength();
        result = result * PRIME + (this.isEscape() ? 79 : 97);
        final java.lang.Object $saveDir = this.getSaveDir();
        result = result * PRIME + ($saveDir == null ? 43 : $saveDir.hashCode());
        final java.lang.Object $dirSplitPattern = this.getDirSplitPattern();
        result = result * PRIME + ($dirSplitPattern == null ? 43 : $dirSplitPattern.hashCode());
        final java.lang.Object $pathToField = this.getPathToField();
        result = result * PRIME + ($pathToField == null ? 43 : $pathToField.hashCode());
        final java.lang.Object $defaultFileName = this.getDefaultFileName();
        result = result * PRIME + ($defaultFileName == null ? 43 : $defaultFileName.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "SaveDocumentTransformerConfig(saveDir=" + this.getSaveDir() + ", maxPathLength=" + this.getMaxPathLength() + ", dirSplitPattern=" + this.getDirSplitPattern() + ", escape=" + this.isEscape() + ", pathToField=" + this.getPathToField() + ", defaultFileName=" + this.getDefaultFileName() + ")";
    }
}
