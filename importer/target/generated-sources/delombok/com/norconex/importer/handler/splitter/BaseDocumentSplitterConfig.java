// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.splitter;

@SuppressWarnings("javadoc")
public class BaseDocumentSplitterConfig {
    /**
     * Whether to discard the original document after it was split. Only
     * applies if the document was actually split.
     */
    private boolean discardOriginal;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseDocumentSplitterConfig() {
    }

    /**
     * Whether to discard the original document after it was split. Only
     * applies if the document was actually split.
     * @return <code>true</code> when discarding original document
     *     after effective split, <code>false</code> otherwise.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isDiscardOriginal() {
        return this.discardOriginal;
    }

    /**
     * Whether to discard the original document after it was split. Only
     * applies if the document was actually split.
     * @param discardOriginal <code>true</code> to discard original document
     *     after effective split.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseDocumentSplitterConfig setDiscardOriginal(final boolean discardOriginal) {
        this.discardOriginal = discardOriginal;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof BaseDocumentSplitterConfig)) return false;
        final BaseDocumentSplitterConfig other = (BaseDocumentSplitterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isDiscardOriginal() != other.isDiscardOriginal()) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof BaseDocumentSplitterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isDiscardOriginal() ? 79 : 97);
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "BaseDocumentSplitterConfig(discardOriginal=" + this.isDiscardOriginal() + ")";
    }
}
