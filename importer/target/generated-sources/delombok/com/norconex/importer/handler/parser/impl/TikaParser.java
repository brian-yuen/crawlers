// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2010-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.parser.impl;

import static java.nio.charset.StandardCharsets.UTF_8;
import java.io.IOException;
import java.util.List;
import org.apache.tika.config.TikaConfig;
import org.apache.tika.exception.TikaException;
import org.apache.tika.metadata.HttpHeaders;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.metadata.TikaCoreProperties;
import org.apache.tika.parser.AutoDetectParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.sax.BodyContentHandler;
import org.xml.sax.SAXException;
import com.norconex.commons.lang.EqualsUtil;
import com.norconex.commons.lang.config.Configurable;
import com.norconex.commons.lang.map.Properties;
import com.norconex.importer.handler.BaseDocumentHandler;
import com.norconex.importer.handler.DocContext;
import com.norconex.importer.handler.parser.ParseState;

/**
 * Raw Tika parser that needs to be configured by passing a tika
 * configuration file.
 */
public class TikaParser extends BaseDocumentHandler implements Configurable<TikaParserConfig> {
    private final TikaParserConfig configuration = new TikaParserConfig();
    private Parser parser;

    @Override
    public void init() throws IOException {
        try {
            parser = new AutoDetectParser(new TikaConfig(configuration.getTikaConfigFile()));
        } catch (TikaException | IOException | SAXException e) {
            throw new IOException("Could not initialize TikaParser.", e);
        }
    }

    @Override
    public void handle(DocContext ctx) throws IOException {
        try (
            var input = ctx.input().asInputStream();
            var output = ctx.output().asWriter(UTF_8)) {
            var tikaMetadata = new Metadata();
            tikaMetadata.set(TikaCoreProperties.RESOURCE_NAME_KEY, ctx.reference());
            var context = new ParseContext();
            context.set(Parser.class, parser);
            try {
                parser.parse(input, new BodyContentHandler(output), tikaMetadata, context);
            } catch (IOException | SAXException | TikaException e) {
                throw new IOException("Could not parse file: " + ctx.reference(), e);
            }
            addTikaToImporterMetadata(tikaMetadata, ctx.metadata());
        }
        ctx.parseState(ParseState.POST);
    }

    private void addTikaToImporterMetadata(Metadata tikaMeta, Properties metadata) {
        var names = tikaMeta.names();
        for (String name : names) {
            if (TikaCoreProperties.RESOURCE_NAME_KEY.equals(name)) {
                continue;
            }
            var nxValues = metadata.getStrings(name);
            var tikaValues = tikaMeta.getValues(name);
            for (String tikaValue : tikaValues) {
                if (!containsSameValue(name, nxValues, tikaValue)) {
                    metadata.add(name, tikaValue);
                } else {
                    metadata.set(name, tikaValue);
                }
            }
        }
    }

    private boolean containsSameValue(String name, List<String> nxValues, String tikaValue) {
        if (EqualsUtil.equalsAnyIgnoreCase(name, HttpHeaders.CONTENT_TYPE, HttpHeaders.CONTENT_ENCODING)) {
            var tk = tikaValue.replaceAll("[\\s]", "");
            for (String nxValue : nxValues) {
                if (nxValue.replaceAll("[\\s]", "").equalsIgnoreCase(tk)) {
                    return true;
                }
            }
            return false;
        }
        return nxValues.contains(tikaValue);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof TikaParser)) return false;
        final TikaParser other = (TikaParser) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        final java.lang.Object this$configuration = this.getConfiguration();
        final java.lang.Object other$configuration = other.getConfiguration();
        if (this$configuration == null ? other$configuration != null : !this$configuration.equals(other$configuration)) return false;
        final java.lang.Object this$parser = this.parser;
        final java.lang.Object other$parser = other.parser;
        if (this$parser == null ? other$parser != null : !this$parser.equals(other$parser)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof TikaParser;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        final java.lang.Object $configuration = this.getConfiguration();
        result = result * PRIME + ($configuration == null ? 43 : $configuration.hashCode());
        final java.lang.Object $parser = this.parser;
        result = result * PRIME + ($parser == null ? 43 : $parser.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "TikaParser(super=" + super.toString() + ", configuration=" + this.getConfiguration() + ", parser=" + this.parser + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TikaParserConfig getConfiguration() {
        return this.configuration;
    }
}
