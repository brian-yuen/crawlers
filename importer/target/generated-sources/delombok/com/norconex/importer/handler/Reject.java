// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler;

import org.apache.commons.lang3.StringUtils;
import com.norconex.commons.lang.config.Configurable;
import com.norconex.importer.handler.condition.Condition;
//TODO make it built-into Flow as a way to opt-out of the flow at any time
// MAYBE as an optional value in a then/else block?
/**
 * Special handler that marks a document as being "rejected", with an
 * optional custom message for event logging. If wrapped in a
 * {@link Condition}, information about the condition will also be logged.
 */
public class Reject implements DocumentHandler, Configurable<RejectConfig> {
    private final RejectConfig configuration = new RejectConfig();

    @Override
    public void accept(DocContext ctx) {
        Object by = null;
        if (StringUtils.isNotBlank(configuration.getMessage())) {
            by = configuration.getMessage();
        }
        if (by == null && ctx.condition() != null) {
            by = ctx.condition();
        }
        if (by == null) {
            by = this;
        }
        ctx.rejectedBy(by);
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Reject() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public RejectConfig getConfiguration() {
        return this.configuration;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Reject)) return false;
        final Reject other = (Reject) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$configuration = this.getConfiguration();
        final java.lang.Object other$configuration = other.getConfiguration();
        if (this$configuration == null ? other$configuration != null : !this$configuration.equals(other$configuration)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Reject;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $configuration = this.getConfiguration();
        result = result * PRIME + ($configuration == null ? 43 : $configuration.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "Reject(configuration=" + this.getConfiguration() + ")";
    }
}
