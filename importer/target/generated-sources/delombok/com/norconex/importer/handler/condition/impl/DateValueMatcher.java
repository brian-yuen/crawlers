// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.condition.impl;

import static com.norconex.commons.lang.Operator.EQUALS;
import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;
import static org.apache.commons.lang3.StringUtils.startsWithIgnoreCase;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Optional;
import java.util.function.Predicate;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.norconex.commons.lang.Operator;
import lombok.NonNull;

/**
 * Immutable date-value matcher, supporting both date expressions and
 * standard operators.
 */
public class DateValueMatcher implements Predicate<ZonedDateTime> {
    private final Operator operator;
    @JsonIgnore
    private final DateProvider dateProvider;

    public DateValueMatcher(Operator operator, @NonNull DateProvider dateProvider) {
        java.util.Objects.requireNonNull(dateProvider, "dateProvider is marked non-null but is null");
        this.operator = operator;
        this.dateProvider = dateProvider;
    }

    @JsonCreator
    public DateValueMatcher(@JsonProperty("operator") Operator operator, @JsonProperty("date") String dateTimeExpression, @JsonProperty("zoneId") ZoneId zoneId) {
        this.operator = operator;
        dateProvider = DateProviderFactory.create(dateTimeExpression, zoneId);
    }

    @Override
    public boolean test(ZonedDateTime zdt) {
        if (zdt == null) {
            return false;
        }
        // if the date obtained by the supplier (the date value or logic
        // configured) starts with TODAY, we truncate that date to
        // ensure we are comparing apples to apples. Else, one must ensure
        // the date format matches for proper comparisons.
        var resolvedZdt = zdt;
        if (startsWithIgnoreCase(dateProvider.toString(), "today")) {
            resolvedZdt = resolvedZdt.truncatedTo(ChronoUnit.DAYS);
        }
        var op = defaultIfNull(operator, EQUALS);
        return op.evaluate(resolvedZdt.toInstant(), dateProvider.getDateTime().toInstant());
    }

    @JsonProperty("date")
    String dateProviderAsString() {
        return dateProvider.toString();
    }

    @JsonProperty("zoneId")
    String zoneIdAsString() {
        return Optional.ofNullable(dateProvider.getZoneId()).map(ZoneId::toString).orElse(null);
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Operator getOperator() {
        return this.operator;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DateProvider getDateProvider() {
        return this.dateProvider;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof DateValueMatcher)) return false;
        final DateValueMatcher other = (DateValueMatcher) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$operator = this.getOperator();
        final java.lang.Object other$operator = other.getOperator();
        if (this$operator == null ? other$operator != null : !this$operator.equals(other$operator)) return false;
        final java.lang.Object this$dateProvider = this.getDateProvider();
        final java.lang.Object other$dateProvider = other.getDateProvider();
        if (this$dateProvider == null ? other$dateProvider != null : !this$dateProvider.equals(other$dateProvider)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof DateValueMatcher;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $operator = this.getOperator();
        result = result * PRIME + ($operator == null ? 43 : $operator.hashCode());
        final java.lang.Object $dateProvider = this.getDateProvider();
        result = result * PRIME + ($dateProvider == null ? 43 : $dateProvider.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "DateValueMatcher(operator=" + this.getOperator() + ", dateProvider=" + this.getDateProvider() + ")";
    }
}
