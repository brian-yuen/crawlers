// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2021-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.condition.impl;

import java.io.IOException;
import org.apache.commons.lang3.mutable.MutableBoolean;
import com.norconex.commons.lang.config.Configurable;
import com.norconex.commons.lang.map.PropertyMatcher;
import com.norconex.commons.lang.text.TextMatcher;
import com.norconex.importer.handler.DocContext;
import com.norconex.importer.handler.condition.BaseCondition;
import com.norconex.importer.util.chunk.ChunkedTextReader;

/**
 * <p>
 * A condition based on a text pattern matching a document content
 * (default), or matching specific field(s).
 * When used on very large content, it is possible the pattern matching will
 * be done in chunks, sometimes not achieving expected results.  Consider
 * creating your own condition from {@link AbstractCharStreamCondition}
 * if this is a concern.
 * </p>
 *
 * {@nx.xml.usage
 * <condition class="com.norconex.importer.handler.condition.impl.TextCondition"
 *     {@nx.include com.norconex.importer.handler.condition.AbstractStringCondition#attributes}>
 *
 *   <fieldMatcher {@nx.include com.norconex.commons.lang.text.TextMatcher#matchAttributes}>
 *     (Optional expression of field to match. Omit to use document content.)
 *   </fieldMatcher>
 *   <valueMatcher {@nx.include com.norconex.commons.lang.text.TextMatcher#matchAttributes}>
 *     (expression of value to match)
 *   </valueMatcher>
 *
 * </condition>
 * }
 *
 * {@nx.xml.example
 *  <condition class="TextCondition">
 *    <valueMatcher>apple</valueMatcher>
 *  </condition>
 * }
 */
@SuppressWarnings("javadoc")
public class TextCondition extends BaseCondition implements Configurable<TextConditionConfig> {
    private final TextConditionConfig configuration = new TextConditionConfig();

    public TextCondition() {
    }

    public TextCondition(TextMatcher valueMatcher) {
        configuration.setValueMatcher(valueMatcher);
    }

    public TextCondition(TextMatcher fieldMatcher, TextMatcher valueMatcher) {
        configuration.setValueMatcher(valueMatcher).setFieldMatcher(fieldMatcher);
    }

    @Override
    public boolean evaluate(DocContext docCtx) throws IOException {
        var matches = new MutableBoolean();
        ChunkedTextReader.builder().charset(configuration.getSourceCharset()).fieldMatcher(configuration.getFieldMatcher()).maxChunkSize(configuration.getMaxReadSize()).build().read(docCtx, chunk -> {
            if (matches.isFalse() && textMatches(docCtx, chunk.getText())) {
                matches.setTrue();
            }
            return true;
        });
        return matches.booleanValue();
    }

    private boolean textMatches(DocContext docCtx, String input) {
        // content
        if (configuration.getFieldMatcher().getPattern() == null) {
            return configuration.getValueMatcher().matches(input);
        }
        // field(s)
        return new PropertyMatcher(configuration.getFieldMatcher(), configuration.getValueMatcher()).matches(docCtx.metadata());
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TextConditionConfig getConfiguration() {
        return this.configuration;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof TextCondition)) return false;
        final TextCondition other = (TextCondition) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        final java.lang.Object this$configuration = this.getConfiguration();
        final java.lang.Object other$configuration = other.getConfiguration();
        if (this$configuration == null ? other$configuration != null : !this$configuration.equals(other$configuration)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof TextCondition;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        final java.lang.Object $configuration = this.getConfiguration();
        result = result * PRIME + ($configuration == null ? 43 : $configuration.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "TextCondition(super=" + super.toString() + ", configuration=" + this.getConfiguration() + ")";
    }
}
