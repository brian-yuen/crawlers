// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2010-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import com.norconex.commons.lang.bean.module.JsonXmlCollection;
import com.norconex.commons.lang.collection.CollectionUtil;
import com.norconex.commons.lang.io.TextReader;

/**
 * <p>Replaces every occurrences of the given replacements
 * (document content only).</p>
 *
 * <p>This class can be used as a pre-parsing (text content-types only)
 * or post-parsing handlers.</p>
 *
 * {@nx.xml.usage
 * <handler class="com.norconex.importer.handler.transformer.impl.ReplaceTransformer"
 *     {@nx.include com.norconex.importer.handler.transformer.AbstractStringTransformer#attributes}>
 *
 *   {@nx.include com.norconex.importer.handler.AbstractImporterHandler#restrictTo}
 *
 *   <!-- multiple replace tags allowed -->
 *   <replace>
 *     <valueMatcher {@nx.include com.norconex.commons.lang.text.TextMatcher#attributes}>
 *       (one or more source values to replace)
 *     </valueMatcher>
 *     <toValue>(replacement value)</toValue>
 *   </replace>
 *
 *  </handler>
 * }
 *
 * {@nx.xml.example
 * <handler class="ReplaceTransformer">
 *   <replace>
 *     <valueMatcher replaceAll="true">junk food</valueMatcher>
 *     <toValue>healthy food</toValue>
 *   </replace>
 * </handler>
 * }
 * <p>
 * The above example reduces all occurrences of "junk food" with "healthy food".
 * </p>
 */
@SuppressWarnings("javadoc")
public class ReplaceTransformerConfig {
    private int maxReadSize = TextReader.DEFAULT_MAX_READ_SIZE;
    private Charset sourceCharset;
    @JsonXmlCollection(entryName = "op")
    private final List<ReplaceOperation> operations = new ArrayList<>();

    public List<ReplaceOperation> getOperations() {
        return Collections.unmodifiableList(operations);
    }

    public ReplaceTransformerConfig setOperations(List<ReplaceOperation> operations) {
        CollectionUtil.setAll(this.operations, operations);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ReplaceTransformerConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxReadSize() {
        return this.maxReadSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Charset getSourceCharset() {
        return this.sourceCharset;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ReplaceTransformerConfig setMaxReadSize(final int maxReadSize) {
        this.maxReadSize = maxReadSize;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ReplaceTransformerConfig setSourceCharset(final Charset sourceCharset) {
        this.sourceCharset = sourceCharset;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ReplaceTransformerConfig)) return false;
        final ReplaceTransformerConfig other = (ReplaceTransformerConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getMaxReadSize() != other.getMaxReadSize()) return false;
        final java.lang.Object this$sourceCharset = this.getSourceCharset();
        final java.lang.Object other$sourceCharset = other.getSourceCharset();
        if (this$sourceCharset == null ? other$sourceCharset != null : !this$sourceCharset.equals(other$sourceCharset)) return false;
        final java.lang.Object this$operations = this.getOperations();
        final java.lang.Object other$operations = other.getOperations();
        if (this$operations == null ? other$operations != null : !this$operations.equals(other$operations)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ReplaceTransformerConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getMaxReadSize();
        final java.lang.Object $sourceCharset = this.getSourceCharset();
        result = result * PRIME + ($sourceCharset == null ? 43 : $sourceCharset.hashCode());
        final java.lang.Object $operations = this.getOperations();
        result = result * PRIME + ($operations == null ? 43 : $operations.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ReplaceTransformerConfig(maxReadSize=" + this.getMaxReadSize() + ", sourceCharset=" + this.getSourceCharset() + ", operations=" + this.getOperations() + ")";
    }
}
