// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import com.norconex.commons.lang.map.PropertySetter;
import com.norconex.commons.lang.text.TextMatcher;

@SuppressWarnings("javadoc")
public class TextBetweenOperation {
    private final TextMatcher fieldMatcher = new TextMatcher();
    private final TextMatcher startMatcher = new TextMatcher();
    private final TextMatcher endMatcher = new TextMatcher();
    /**
     * The target field for extracted text.
     */
    private String toField;
    private boolean inclusive;
    /**
     * The property setter to use when a value is set.
     */
    private PropertySetter onSet;

    /**
     * Gets field matcher for fields on which to extract values.
     * @return field matcher
     */
    public TextMatcher getFieldMatcher() {
        return fieldMatcher;
    }

    /**
     * Sets field matcher for fields on which to extract values.
     * @param fieldMatcher field matcher
     */
    public TextBetweenOperation setFieldMatcher(TextMatcher fieldMatcher) {
        this.fieldMatcher.copyFrom(fieldMatcher);
        return this;
    }

    /**
     * Gets the start delimiter matcher for text to extract.
     * @return start delimiter matcher
     */
    public TextMatcher getStartMatcher() {
        return startMatcher;
    }

    /**
     * Sets the start delimiter matcher for text to extract.
     * @param startMatcher start delimiter matcher
     */
    public TextBetweenOperation setStartMatcher(TextMatcher startMatcher) {
        this.startMatcher.copyFrom(startMatcher);
        return this;
    }

    /**
     * Gets the end delimiter matcher for text to extract.
     * @return end delimiter matcher
     */
    public TextMatcher getEndMatcher() {
        return endMatcher;
    }

    /**
     * Sets the end delimiter matcher for text to extract.
     * @param endMatcher end delimiter matcher
     */
    public TextBetweenOperation setEndMatcher(TextMatcher endMatcher) {
        this.endMatcher.copyFrom(endMatcher);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TextBetweenOperation() {
    }

    /**
     * The target field for extracted text.
     * @return target field
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getToField() {
        return this.toField;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isInclusive() {
        return this.inclusive;
    }

    /**
     * The property setter to use when a value is set.
     * @return property setter
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public PropertySetter getOnSet() {
        return this.onSet;
    }

    /**
     * The target field for extracted text.
     * @param toField target field
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TextBetweenOperation setToField(final String toField) {
        this.toField = toField;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TextBetweenOperation setInclusive(final boolean inclusive) {
        this.inclusive = inclusive;
        return this;
    }

    /**
     * The property setter to use when a value is set.
     * @param onSet property setter
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TextBetweenOperation setOnSet(final PropertySetter onSet) {
        this.onSet = onSet;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof TextBetweenOperation)) return false;
        final TextBetweenOperation other = (TextBetweenOperation) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isInclusive() != other.isInclusive()) return false;
        final java.lang.Object this$fieldMatcher = this.getFieldMatcher();
        final java.lang.Object other$fieldMatcher = other.getFieldMatcher();
        if (this$fieldMatcher == null ? other$fieldMatcher != null : !this$fieldMatcher.equals(other$fieldMatcher)) return false;
        final java.lang.Object this$startMatcher = this.getStartMatcher();
        final java.lang.Object other$startMatcher = other.getStartMatcher();
        if (this$startMatcher == null ? other$startMatcher != null : !this$startMatcher.equals(other$startMatcher)) return false;
        final java.lang.Object this$endMatcher = this.getEndMatcher();
        final java.lang.Object other$endMatcher = other.getEndMatcher();
        if (this$endMatcher == null ? other$endMatcher != null : !this$endMatcher.equals(other$endMatcher)) return false;
        final java.lang.Object this$toField = this.getToField();
        final java.lang.Object other$toField = other.getToField();
        if (this$toField == null ? other$toField != null : !this$toField.equals(other$toField)) return false;
        final java.lang.Object this$onSet = this.getOnSet();
        final java.lang.Object other$onSet = other.getOnSet();
        if (this$onSet == null ? other$onSet != null : !this$onSet.equals(other$onSet)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof TextBetweenOperation;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isInclusive() ? 79 : 97);
        final java.lang.Object $fieldMatcher = this.getFieldMatcher();
        result = result * PRIME + ($fieldMatcher == null ? 43 : $fieldMatcher.hashCode());
        final java.lang.Object $startMatcher = this.getStartMatcher();
        result = result * PRIME + ($startMatcher == null ? 43 : $startMatcher.hashCode());
        final java.lang.Object $endMatcher = this.getEndMatcher();
        result = result * PRIME + ($endMatcher == null ? 43 : $endMatcher.hashCode());
        final java.lang.Object $toField = this.getToField();
        result = result * PRIME + ($toField == null ? 43 : $toField.hashCode());
        final java.lang.Object $onSet = this.getOnSet();
        result = result * PRIME + ($onSet == null ? 43 : $onSet.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "TextBetweenOperation(fieldMatcher=" + this.getFieldMatcher() + ", startMatcher=" + this.getStartMatcher() + ", endMatcher=" + this.getEndMatcher() + ", toField=" + this.getToField() + ", inclusive=" + this.isInclusive() + ", onSet=" + this.getOnSet() + ")";
    }
}
