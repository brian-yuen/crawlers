// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2016-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.parser.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import com.norconex.commons.lang.collection.CollectionUtil;
import com.norconex.commons.lang.text.TextMatcher;
import com.norconex.importer.response.ImporterResponse;

/**
 * {@nx.block #doc
 * <p>
 * For documents containing embedded documents (e.g. zip files), the default
 * behavior of this treat them as a single document, merging all
 * embedded documents content and metadata into the parent document.
 * You can tell this parser to "split" embedded
 * documents to have them treated as if they were individual documents.  When
 * split, each embedded documents will go through the entire import cycle,
 * going through your handlers and even this parser again
 * (just like any regular document would).
 * </p>
 * <p>
 * You can also decide to skip the parsing of embedded documents. Either
 * by the content type of the parent document, or the content types of the
 * embedded documents.
 * </p>
 * <p>
 * When embedded are being parsed, the resulting
 * {@link ImporterResponse} will contain nested documents, which in turn,
 * might contain some (tree-like structure).
 * </p>
 * }
 *
 * {@nx.xml.usage
 * <embedded>
 *     <splitEmbeddedOf>
 *       <!-- "matcher" is repeatable -->
 *       <matcher>
 *         (content type matcher of files to split, having their
 *          embedded documents extracted and treated as individual
 *          documents instead)
 *       </matcher>
 *     </splitEmbeddedOf>
 *     <skipEmmbbededOf>
 *       <matcher>
 *         (content type matcher of files you do not want to have their
 *          embedded files parsed)
 *       </matcher>
 *     </skipEmmbbededOf>
 *     <skipEmmbbeded>
 *       <matcher>
 *         (content type matcher of embedded files you do not want parsed)
 *       </matcher>
 *     </skipEmmbbeded>
 * </embedded>
 * }
 *
 * {@nx.xml.example
 * <embedded>
 *   <splitEmbeddedOf>
 *     <matcher>application/zip</matcher>
 *   </splitEmbeddedOf>
 * </embedded>
 * }
 *
 * <p>
 * The above example will treat all documents contained with a Zip file
 * as individual documents, each to be processed separately.
 * </p>
 */
@SuppressWarnings("javadoc")
public class EmbeddedConfig implements Serializable {
    //{
    //TODO add a "discardRootContainer" property (when split)?
    private static final long serialVersionUID = 1L;
    private final List<TextMatcher> splitContentTypes = new ArrayList<>();
    private final List<TextMatcher> skipEmbeddedOfContentTypes = new ArrayList<>();
    private final List<TextMatcher> skipEmbeddedContentTypes = new ArrayList<>();
    /**
     * Maximum detph of embeded documents to extract. Zero is the
     * root document (original container).
     */
    private int maxEmbeddedDepth = -1;

    /**
     * Gets the content types of container files to split and treat their
     * embedded files as separate documents. Default does not split
     * any type (all embedded documents are merged).
     * @return list of content type matcher
     */
    public List<TextMatcher> getSplitContentTypes() {
        return Collections.unmodifiableList(splitContentTypes);
    }

    /**
     * Gets the content types of container files to split and treat their
     * embedded files as separate documents. Default does not split
     * any type (all embedded documents are merged).
     * @param splitContentTypes list of content type matcher
     * @return this instance
     */
    public EmbeddedConfig setSplitContentTypes(List<TextMatcher> splitContentTypes) {
        CollectionUtil.setAll(this.splitContentTypes, splitContentTypes);
        return this;
    }

    /**
     * Gets the content type matchers of container files you do not want to
     * have their embedded files parsed. Embedded files of matching containers
     * will effectively be skipped/ignored.
     * Default parses embedded files of all container file content types.
     * @return list of content type matcher
     */
    public List<TextMatcher> getSkipEmbeddedOfContentTypes() {
        return Collections.unmodifiableList(skipEmbeddedOfContentTypes);
    }

    /**
     * Gets the content type matchers of container files you do not want to
     * have their embedded files parsed. Embedded files of matching containers
     * will effectively be skipped/ignored.
     * Default parses embedded files of all container file content types.
     * @param skipEmbeddedOfContentTypes list of content type matcher
     * @return this instance
     */
    public EmbeddedConfig setSkipEmbeddedOfContentTypes(List<TextMatcher> skipEmbeddedOfContentTypes) {
        CollectionUtil.setAll(this.skipEmbeddedOfContentTypes, skipEmbeddedOfContentTypes);
        return this;
    }

    /**
     * Gets the content types of container files to split and treat their
     * embedded files as separate documents. Default does not split
     * any type (all embedded documents are merged).
     * @return list of content type matcher
     */
    public List<TextMatcher> getSkipEmbeddedContentTypes() {
        return Collections.unmodifiableList(skipEmbeddedContentTypes);
    }

    /**
     * Gets the content types of container files to split and treat their
     * embedded files as separate documents. Default does not split
     * any type (all embedded documents are merged).
     * @param skipEmbeddedContentTypes list of content type matcher
     * @return this instance
     */
    public EmbeddedConfig setSkipEmbeddedContentTypes(List<TextMatcher> skipEmbeddedContentTypes) {
        CollectionUtil.setAll(this.skipEmbeddedContentTypes, skipEmbeddedContentTypes);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EmbeddedConfig() {
    }

    /**
     * Maximum detph of embeded documents to extract. Zero is the
     * root document (original container).
     * @return maximum depth of embedded docs to extract
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxEmbeddedDepth() {
        return this.maxEmbeddedDepth;
    }

    /**
     * Maximum detph of embeded documents to extract. Zero is the
     * root document (original container).
     * @param maxEmbeddedDepth max depth or -1 (default) for unlimited.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EmbeddedConfig setMaxEmbeddedDepth(final int maxEmbeddedDepth) {
        this.maxEmbeddedDepth = maxEmbeddedDepth;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EmbeddedConfig)) return false;
        final EmbeddedConfig other = (EmbeddedConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getMaxEmbeddedDepth() != other.getMaxEmbeddedDepth()) return false;
        final java.lang.Object this$splitContentTypes = this.getSplitContentTypes();
        final java.lang.Object other$splitContentTypes = other.getSplitContentTypes();
        if (this$splitContentTypes == null ? other$splitContentTypes != null : !this$splitContentTypes.equals(other$splitContentTypes)) return false;
        final java.lang.Object this$skipEmbeddedOfContentTypes = this.getSkipEmbeddedOfContentTypes();
        final java.lang.Object other$skipEmbeddedOfContentTypes = other.getSkipEmbeddedOfContentTypes();
        if (this$skipEmbeddedOfContentTypes == null ? other$skipEmbeddedOfContentTypes != null : !this$skipEmbeddedOfContentTypes.equals(other$skipEmbeddedOfContentTypes)) return false;
        final java.lang.Object this$skipEmbeddedContentTypes = this.getSkipEmbeddedContentTypes();
        final java.lang.Object other$skipEmbeddedContentTypes = other.getSkipEmbeddedContentTypes();
        if (this$skipEmbeddedContentTypes == null ? other$skipEmbeddedContentTypes != null : !this$skipEmbeddedContentTypes.equals(other$skipEmbeddedContentTypes)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EmbeddedConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getMaxEmbeddedDepth();
        final java.lang.Object $splitContentTypes = this.getSplitContentTypes();
        result = result * PRIME + ($splitContentTypes == null ? 43 : $splitContentTypes.hashCode());
        final java.lang.Object $skipEmbeddedOfContentTypes = this.getSkipEmbeddedOfContentTypes();
        result = result * PRIME + ($skipEmbeddedOfContentTypes == null ? 43 : $skipEmbeddedOfContentTypes.hashCode());
        final java.lang.Object $skipEmbeddedContentTypes = this.getSkipEmbeddedContentTypes();
        result = result * PRIME + ($skipEmbeddedContentTypes == null ? 43 : $skipEmbeddedContentTypes.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "EmbeddedConfig(splitContentTypes=" + this.getSplitContentTypes() + ", skipEmbeddedOfContentTypes=" + this.getSkipEmbeddedOfContentTypes() + ", skipEmbeddedContentTypes=" + this.getSkipEmbeddedContentTypes() + ", maxEmbeddedDepth=" + this.getMaxEmbeddedDepth() + ")";
    }
}
