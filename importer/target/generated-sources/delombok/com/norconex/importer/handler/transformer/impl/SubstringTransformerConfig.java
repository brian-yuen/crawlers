// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2017-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import java.nio.charset.Charset;
import com.norconex.commons.lang.text.TextMatcher;

/**
 * <p>Keep a substring of the content matching a begin and end character
 * indexes.
 * Useful when you have to
 * truncate long content, or when you know precisely where is located
 * the text to extract in some files.
 * </p>
 * <p>
 * The "begin" value is inclusive, while the "end" value
 * is exclusive.  Both are optional.  When not specified (or a negative value),
 * the index
 * is assumed to be the beginning and end of the content, respectively.
 * </p>
 * <p>
 * This class can be used as a pre-parsing (text content-types only)
 * or post-parsing handlers.</p>
 *
 * {@nx.xml.usage
 * <handler class="com.norconex.importer.handler.transformer.impl.SubstringTransformer"
 *     {@nx.include com.norconex.importer.handler.transformer.AbstractCharStreamTransformer#attributes}
 *     begin="(number)" end="(number)">
 *
 *   {@nx.include com.norconex.importer.handler.AbstractImporterHandler#restrictTo}
 * </handler>
 * }
 *
 * {@nx.xml.example
 * <handler class="SubstringTransformer" end="10000"/>
 * }
 * <p>
 * The above example truncates long text to be 10,000 characters maximum.
 * </p>
 */
@SuppressWarnings("javadoc")
public class SubstringTransformerConfig {
    private Charset sourceCharset;
    private final TextMatcher fieldMatcher = new TextMatcher();
    /**
     * The beginning index (inclusive).
     * A negative value is treated the same as zero.
     */
    private long begin = 0;
    /**
     * The end index (exclusive).
     * A negative value is treated as the content end.
     */
    private long end = -1;

    /**
     * Gets source field matcher for fields to transform.
     * @return field matcher
     */
    public TextMatcher getFieldMatcher() {
        return fieldMatcher;
    }

    /**
     * Sets source field matcher for fields to transform.
     * @param fieldMatcher field matcher
     */
    public SubstringTransformerConfig setFieldMatcher(TextMatcher fieldMatcher) {
        this.fieldMatcher.copyFrom(fieldMatcher);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SubstringTransformerConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Charset getSourceCharset() {
        return this.sourceCharset;
    }

    /**
     * The beginning index (inclusive).
     * A negative value is treated the same as zero.
     * @return beginning index
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getBegin() {
        return this.begin;
    }

    /**
     * The end index (exclusive).
     * A negative value is treated as the content end.
     * @return the end index
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getEnd() {
        return this.end;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SubstringTransformerConfig setSourceCharset(final Charset sourceCharset) {
        this.sourceCharset = sourceCharset;
        return this;
    }

    /**
     * The beginning index (inclusive).
     * A negative value is treated the same as zero.
     * @param beginIndex beginning index
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SubstringTransformerConfig setBegin(final long begin) {
        this.begin = begin;
        return this;
    }

    /**
     * The end index (exclusive).
     * A negative value is treated as the content end.
     * @param endIndex end index
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SubstringTransformerConfig setEnd(final long end) {
        this.end = end;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof SubstringTransformerConfig)) return false;
        final SubstringTransformerConfig other = (SubstringTransformerConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getBegin() != other.getBegin()) return false;
        if (this.getEnd() != other.getEnd()) return false;
        final java.lang.Object this$sourceCharset = this.getSourceCharset();
        final java.lang.Object other$sourceCharset = other.getSourceCharset();
        if (this$sourceCharset == null ? other$sourceCharset != null : !this$sourceCharset.equals(other$sourceCharset)) return false;
        final java.lang.Object this$fieldMatcher = this.getFieldMatcher();
        final java.lang.Object other$fieldMatcher = other.getFieldMatcher();
        if (this$fieldMatcher == null ? other$fieldMatcher != null : !this$fieldMatcher.equals(other$fieldMatcher)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof SubstringTransformerConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $begin = this.getBegin();
        result = result * PRIME + (int) ($begin >>> 32 ^ $begin);
        final long $end = this.getEnd();
        result = result * PRIME + (int) ($end >>> 32 ^ $end);
        final java.lang.Object $sourceCharset = this.getSourceCharset();
        result = result * PRIME + ($sourceCharset == null ? 43 : $sourceCharset.hashCode());
        final java.lang.Object $fieldMatcher = this.getFieldMatcher();
        result = result * PRIME + ($fieldMatcher == null ? 43 : $fieldMatcher.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "SubstringTransformerConfig(sourceCharset=" + this.getSourceCharset() + ", fieldMatcher=" + this.getFieldMatcher() + ", begin=" + this.getBegin() + ", end=" + this.getEnd() + ")";
    }
}
