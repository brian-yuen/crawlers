// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import com.norconex.commons.lang.map.PropertySetter;
import com.norconex.commons.lang.text.TextMatcher;

public class ReplaceOperation {
    private final TextMatcher fieldMatcher = new TextMatcher();
    private final TextMatcher valueMatcher = new TextMatcher();
    private String toField;
    private String toValue;
    private PropertySetter onSet;
    private boolean discardUnchanged;

    public String getToValue() {
        return toValue;
    }

    public ReplaceOperation setToValue(String toValue) {
        this.toValue = toValue;
        return this;
    }

    /**
     * Gets value matcher.
     * @return value matcher
     */
    public TextMatcher getValueMatcher() {
        return valueMatcher;
    }

    /**
     * Sets value matcher.
     * @param valueMatcher value matcher
     * @return this instance
     */
    public ReplaceOperation setValueMatcher(TextMatcher valueMatcher) {
        this.valueMatcher.copyFrom(valueMatcher);
        return this;
    }

    /**
     * Gets field matcher.
     * @return field matcher
     */
    public TextMatcher getFieldMatcher() {
        return fieldMatcher;
    }

    /**
     * Sets field matcher.
     * @param fieldMatcher field matcher
     * @return this instance
     */
    public ReplaceOperation setFieldMatcher(TextMatcher fieldMatcher) {
        this.fieldMatcher.copyFrom(fieldMatcher);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ReplaceOperation() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getToField() {
        return this.toField;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public PropertySetter getOnSet() {
        return this.onSet;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isDiscardUnchanged() {
        return this.discardUnchanged;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ReplaceOperation setToField(final String toField) {
        this.toField = toField;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ReplaceOperation setOnSet(final PropertySetter onSet) {
        this.onSet = onSet;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ReplaceOperation setDiscardUnchanged(final boolean discardUnchanged) {
        this.discardUnchanged = discardUnchanged;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ReplaceOperation)) return false;
        final ReplaceOperation other = (ReplaceOperation) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isDiscardUnchanged() != other.isDiscardUnchanged()) return false;
        final java.lang.Object this$fieldMatcher = this.getFieldMatcher();
        final java.lang.Object other$fieldMatcher = other.getFieldMatcher();
        if (this$fieldMatcher == null ? other$fieldMatcher != null : !this$fieldMatcher.equals(other$fieldMatcher)) return false;
        final java.lang.Object this$valueMatcher = this.getValueMatcher();
        final java.lang.Object other$valueMatcher = other.getValueMatcher();
        if (this$valueMatcher == null ? other$valueMatcher != null : !this$valueMatcher.equals(other$valueMatcher)) return false;
        final java.lang.Object this$toField = this.getToField();
        final java.lang.Object other$toField = other.getToField();
        if (this$toField == null ? other$toField != null : !this$toField.equals(other$toField)) return false;
        final java.lang.Object this$toValue = this.getToValue();
        final java.lang.Object other$toValue = other.getToValue();
        if (this$toValue == null ? other$toValue != null : !this$toValue.equals(other$toValue)) return false;
        final java.lang.Object this$onSet = this.getOnSet();
        final java.lang.Object other$onSet = other.getOnSet();
        if (this$onSet == null ? other$onSet != null : !this$onSet.equals(other$onSet)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ReplaceOperation;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isDiscardUnchanged() ? 79 : 97);
        final java.lang.Object $fieldMatcher = this.getFieldMatcher();
        result = result * PRIME + ($fieldMatcher == null ? 43 : $fieldMatcher.hashCode());
        final java.lang.Object $valueMatcher = this.getValueMatcher();
        result = result * PRIME + ($valueMatcher == null ? 43 : $valueMatcher.hashCode());
        final java.lang.Object $toField = this.getToField();
        result = result * PRIME + ($toField == null ? 43 : $toField.hashCode());
        final java.lang.Object $toValue = this.getToValue();
        result = result * PRIME + ($toValue == null ? 43 : $toValue.hashCode());
        final java.lang.Object $onSet = this.getOnSet();
        result = result * PRIME + ($onSet == null ? 43 : $onSet.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ReplaceOperation(fieldMatcher=" + this.getFieldMatcher() + ", valueMatcher=" + this.getValueMatcher() + ", toField=" + this.getToField() + ", toValue=" + this.getToValue() + ", onSet=" + this.getOnSet() + ", discardUnchanged=" + this.isDiscardUnchanged() + ")";
    }
}
