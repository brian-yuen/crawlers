// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.norconex.commons.lang.map.PropertySetter;
import lombok.NonNull;

public class Constant {
    private final String name;
    private final List<String> values;
    private final PropertySetter onSet;

    private Constant(String name, List<String> values, PropertySetter onSet) {
        this.name = name;
        this.values = values;
        this.onSet = onSet;
    }

    public static Constant of(@NonNull String name, @NonNull String value) {
        java.util.Objects.requireNonNull(name, "name is marked non-null but is null");
        java.util.Objects.requireNonNull(value, "value is marked non-null but is null");
        return of(name, List.of(value), null);
    }

    public static Constant of(@NonNull String name, @NonNull List<String> values) {
        java.util.Objects.requireNonNull(name, "name is marked non-null but is null");
        java.util.Objects.requireNonNull(values, "values is marked non-null but is null");
        return of(name, values, null);
    }

    @JsonCreator
    public static Constant of(@JsonProperty("name") @NonNull String name, @JsonProperty("values") @NonNull List<String> values, @JsonProperty("onSet") PropertySetter onSet) {
        java.util.Objects.requireNonNull(name, "name is marked non-null but is null");
        java.util.Objects.requireNonNull(values, "values is marked non-null but is null");
        return new Constant(name, values, onSet);
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<String> getValues() {
        return this.values;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public PropertySetter getOnSet() {
        return this.onSet;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Constant)) return false;
        final Constant other = (Constant) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$values = this.getValues();
        final java.lang.Object other$values = other.getValues();
        if (this$values == null ? other$values != null : !this$values.equals(other$values)) return false;
        final java.lang.Object this$onSet = this.getOnSet();
        final java.lang.Object other$onSet = other.getOnSet();
        if (this$onSet == null ? other$onSet != null : !this$onSet.equals(other$onSet)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Constant;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $values = this.getValues();
        result = result * PRIME + ($values == null ? 43 : $values.hashCode());
        final java.lang.Object $onSet = this.getOnSet();
        result = result * PRIME + ($onSet == null ? 43 : $onSet.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "Constant(name=" + this.getName() + ", values=" + this.getValues() + ", onSet=" + this.getOnSet() + ")";
    }
}
