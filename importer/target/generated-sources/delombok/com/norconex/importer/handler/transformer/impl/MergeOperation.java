// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.handler.transformer.impl;

import com.norconex.commons.lang.text.TextMatcher;

public class MergeOperation {
    private final TextMatcher fieldMatcher = new TextMatcher();
    private boolean deleteFromFields;
    private String toField;
    private boolean singleValue;
    private String singleValueSeparator;

    /**
     * Gets field matcher.
     * @return field matcher
     */
    public TextMatcher getFieldMatcher() {
        return fieldMatcher;
    }

    /**
     * Sets field matcher.
     * @param fieldMatcher field matcher
     */
    public MergeOperation setFieldMatcher(TextMatcher fieldMatcher) {
        this.fieldMatcher.copyFrom(fieldMatcher);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MergeOperation() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isDeleteFromFields() {
        return this.deleteFromFields;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getToField() {
        return this.toField;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isSingleValue() {
        return this.singleValue;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSingleValueSeparator() {
        return this.singleValueSeparator;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MergeOperation setDeleteFromFields(final boolean deleteFromFields) {
        this.deleteFromFields = deleteFromFields;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MergeOperation setToField(final String toField) {
        this.toField = toField;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MergeOperation setSingleValue(final boolean singleValue) {
        this.singleValue = singleValue;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MergeOperation setSingleValueSeparator(final String singleValueSeparator) {
        this.singleValueSeparator = singleValueSeparator;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof MergeOperation)) return false;
        final MergeOperation other = (MergeOperation) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isDeleteFromFields() != other.isDeleteFromFields()) return false;
        if (this.isSingleValue() != other.isSingleValue()) return false;
        final java.lang.Object this$fieldMatcher = this.getFieldMatcher();
        final java.lang.Object other$fieldMatcher = other.getFieldMatcher();
        if (this$fieldMatcher == null ? other$fieldMatcher != null : !this$fieldMatcher.equals(other$fieldMatcher)) return false;
        final java.lang.Object this$toField = this.getToField();
        final java.lang.Object other$toField = other.getToField();
        if (this$toField == null ? other$toField != null : !this$toField.equals(other$toField)) return false;
        final java.lang.Object this$singleValueSeparator = this.getSingleValueSeparator();
        final java.lang.Object other$singleValueSeparator = other.getSingleValueSeparator();
        if (this$singleValueSeparator == null ? other$singleValueSeparator != null : !this$singleValueSeparator.equals(other$singleValueSeparator)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof MergeOperation;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isDeleteFromFields() ? 79 : 97);
        result = result * PRIME + (this.isSingleValue() ? 79 : 97);
        final java.lang.Object $fieldMatcher = this.getFieldMatcher();
        result = result * PRIME + ($fieldMatcher == null ? 43 : $fieldMatcher.hashCode());
        final java.lang.Object $toField = this.getToField();
        result = result * PRIME + ($toField == null ? 43 : $toField.hashCode());
        final java.lang.Object $singleValueSeparator = this.getSingleValueSeparator();
        result = result * PRIME + ($singleValueSeparator == null ? 43 : $singleValueSeparator.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "MergeOperation(fieldMatcher=" + this.getFieldMatcher() + ", deleteFromFields=" + this.isDeleteFromFields() + ", toField=" + this.getToField() + ", singleValue=" + this.isSingleValue() + ", singleValueSeparator=" + this.getSingleValueSeparator() + ")";
    }
}
