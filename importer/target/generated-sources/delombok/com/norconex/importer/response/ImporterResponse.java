// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2014-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.response;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import com.norconex.commons.lang.collection.CollectionUtil;
import com.norconex.importer.ImporterException;
import com.norconex.importer.doc.Doc;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
//@Builder
public class ImporterResponse {
    //TODO have part of it immutable... response could be modified to
    // add children.. so maybe there are no risk to be able to change it all?
    public enum Status {
        SUCCESS, REJECTED, ERROR;
    }

    public static final ImporterResponse[] EMPTY_RESPONSES = {};
    private Status status;
//    private final DocumentFilter filter;
    private Object rejectCause; // e.g., Condition, or handler.
    private ImporterException exception;
    private String description;
    private String reference;
    private Doc doc;
//    @Singular
    @NonNull
    private final List<ImporterResponse> nestedResponses = new ArrayList<>();
    private ImporterResponse parentResponse;

//    public ImporterResponse(String reference, ImporterStatus status) {
//        this.reference = reference;
//        this.status = status;
//        doc = null;
//    }
//    public ImporterResponse(Doc doc) {
//        reference = doc.getReference();
//        this.doc = doc;
//        status = new ImporterStatus();
//    }
//
//    public Doc getDocument() {
//        return doc;
//    }
    public boolean isSuccess() {
        return status != null && status == Status.SUCCESS;
    }

    public boolean isRejected() {
        return status == Status.REJECTED;
    }

    public boolean isError() {
        return status == Status.ERROR;
    }

//
//    public ImporterResponse getParentResponse() {
//        return parentResponse;
//    }
//
//    public void addNestedResponse(ImporterResponse response) {
//        response.setParentResponse(this);
//        nestedResponses.add(response);
//    }
//    public void removeNestedResponse(String reference) {
//        ImporterResponse response = null;
//        for (ImporterResponse nestedResponse : nestedResponses) {
//            if (nestedResponse.getReference().equals(reference)) {
//                response = nestedResponse;
//            }
//        }
//        if (response == null) {
//            return;
//        }
//        nestedResponses.remove(response);
//        response.setParentResponse(null);
//    }
//
//    public ImporterResponse[] getNestedResponses() {
//        return nestedResponses.toArray(EMPTY_RESPONSES);
//    }
//    private void setParentResponse(ImporterResponse parentResponse) {
//        this.parentResponse = parentResponse;
//    }
    public List<ImporterResponse> getNestedResponses() {
        return Collections.unmodifiableList(nestedResponses);
    }

//    public static ImporterResponseBuilder builderFrom(
//            ImporterResponse from) {
//        return new ImporterResponseBuilder()
//                .description(from.getDescription())
//                .exception(from.getException())
//                .nestedResponses(from.getNestedResponses())
//                .doc(from.getDoc())
//                .reference(from.getReference())
//                .rejectCause(from.getRejectCause())
//                .parentResponse(from.getParentResponse())
//                .status(from.status)
//                ;
//    }
    public ImporterResponse setNestedResponses(List<ImporterResponse> nestedResponses) {
        CollectionUtil.setAll(this.nestedResponses, nestedResponses);
        this.nestedResponses.forEach(nr -> nr.parentResponse = ImporterResponse.this);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterResponse() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Status getStatus() {
        return this.status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Object getRejectCause() {
        return this.rejectCause;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterException getException() {
        return this.exception;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDescription() {
        return this.description;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getReference() {
        return this.reference;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Doc getDoc() {
        return this.doc;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterResponse getParentResponse() {
        return this.parentResponse;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterResponse setStatus(final Status status) {
        this.status = status;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterResponse setRejectCause(final Object rejectCause) {
        this.rejectCause = rejectCause;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterResponse setException(final ImporterException exception) {
        this.exception = exception;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterResponse setDescription(final String description) {
        this.description = description;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterResponse setReference(final String reference) {
        this.reference = reference;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterResponse setDoc(final Doc doc) {
        this.doc = doc;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ImporterResponse)) return false;
        final ImporterResponse other = (ImporterResponse) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$status = this.getStatus();
        final java.lang.Object other$status = other.getStatus();
        if (this$status == null ? other$status != null : !this$status.equals(other$status)) return false;
        final java.lang.Object this$rejectCause = this.getRejectCause();
        final java.lang.Object other$rejectCause = other.getRejectCause();
        if (this$rejectCause == null ? other$rejectCause != null : !this$rejectCause.equals(other$rejectCause)) return false;
        final java.lang.Object this$exception = this.getException();
        final java.lang.Object other$exception = other.getException();
        if (this$exception == null ? other$exception != null : !this$exception.equals(other$exception)) return false;
        final java.lang.Object this$description = this.getDescription();
        final java.lang.Object other$description = other.getDescription();
        if (this$description == null ? other$description != null : !this$description.equals(other$description)) return false;
        final java.lang.Object this$reference = this.getReference();
        final java.lang.Object other$reference = other.getReference();
        if (this$reference == null ? other$reference != null : !this$reference.equals(other$reference)) return false;
        final java.lang.Object this$doc = this.getDoc();
        final java.lang.Object other$doc = other.getDoc();
        if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
        final java.lang.Object this$nestedResponses = this.getNestedResponses();
        final java.lang.Object other$nestedResponses = other.getNestedResponses();
        if (this$nestedResponses == null ? other$nestedResponses != null : !this$nestedResponses.equals(other$nestedResponses)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ImporterResponse;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $status = this.getStatus();
        result = result * PRIME + ($status == null ? 43 : $status.hashCode());
        final java.lang.Object $rejectCause = this.getRejectCause();
        result = result * PRIME + ($rejectCause == null ? 43 : $rejectCause.hashCode());
        final java.lang.Object $exception = this.getException();
        result = result * PRIME + ($exception == null ? 43 : $exception.hashCode());
        final java.lang.Object $description = this.getDescription();
        result = result * PRIME + ($description == null ? 43 : $description.hashCode());
        final java.lang.Object $reference = this.getReference();
        result = result * PRIME + ($reference == null ? 43 : $reference.hashCode());
        final java.lang.Object $doc = this.getDoc();
        result = result * PRIME + ($doc == null ? 43 : $doc.hashCode());
        final java.lang.Object $nestedResponses = this.getNestedResponses();
        result = result * PRIME + ($nestedResponses == null ? 43 : $nestedResponses.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ImporterResponse(status=" + this.getStatus() + ", rejectCause=" + this.getRejectCause() + ", exception=" + this.getException() + ", description=" + this.getDescription() + ", reference=" + this.getReference() + ", doc=" + this.getDoc() + ", nestedResponses=" + this.getNestedResponses() + ")";
    }
}
