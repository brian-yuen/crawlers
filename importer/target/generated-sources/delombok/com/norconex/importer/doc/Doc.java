// Generated by delombok at Fri Mar 08 16:25:39 MST 2024
/* Copyright 2014-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer.doc;

import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.io.IOUtils;
import com.norconex.commons.lang.io.CachedInputStream;
import com.norconex.commons.lang.io.CachedStreamFactory;
import com.norconex.commons.lang.map.Properties;
import com.norconex.importer.ImporterRuntimeException;
import lombok.NonNull;

/**
 * A document being imported.
 */
public class Doc {
    //MAYBE: still allow String reference in constructor and create?
    //MAYBE: add parent reference info here?
    private final DocRecord docRecord;
    private final Properties metadata;
    private CachedInputStream content;

    public Doc(String reference, CachedInputStream content) {
        this(reference, content, null);
    }

    public Doc(@NonNull String reference, CachedInputStream content, Properties metadata) {
        this(new DocRecord(reference), content, metadata);
        java.util.Objects.requireNonNull(reference, "reference is marked non-null but is null");
    }

    /**
     * Creates a blank importer document using the supplied input stream
     * to handle content.
     * The document reference automatically gets added to the metadata.
     * @param docRecord document details
     * @param content content input stream
     */
    public Doc(DocRecord docRecord, CachedInputStream content) {
        this(docRecord, content, null);
    }

    /**
     * Creates a blank importer document using the supplied input stream
     * to handle content.
     * @param docRecord document details
     * @param content content input stream
     * @param metadata importer document metadata
     */
    public Doc(@NonNull DocRecord docRecord, @NonNull CachedInputStream content, Properties metadata) {
        java.util.Objects.requireNonNull(docRecord, "docRecord is marked non-null but is null");
        java.util.Objects.requireNonNull(content, "content is marked non-null but is null");
        this.docRecord = docRecord;
        this.content = content;
        if (metadata == null) {
            this.metadata = new Properties();
        } else {
            this.metadata = metadata;
        }
    }

    //MAYBE: implement "closeable" instead?
    /**
     * Disposes of any resources associated with this document (like
     * disk or memory cache).
     * @throws IOException could not dispose of document resources
     */
    public synchronized void dispose() throws IOException {
        content.dispose();
    }

    public CachedInputStream getInputStream() {
        content.rewind();
        return content;
    }

    public void setInputStream(@NonNull InputStream inputStream) {
        java.util.Objects.requireNonNull(inputStream, "inputStream is marked non-null but is null");
        if (content == inputStream) {
            return;
        }
        try {
            content.dispose();
            if (inputStream instanceof CachedInputStream cis) {
                content = cis;
            } else {
                try (var os = content.getStreamFactory().newOuputStream()) {
                    IOUtils.copy(inputStream, os);
                    content = os.getInputStream();
                }
            }
        } catch (IOException e) {
            throw new ImporterRuntimeException("Could set content input stream.", e);
        }
    }

    public CachedStreamFactory getStreamFactory() {
        return content.getStreamFactory();
    }

    public DocRecord getDocRecord() {
        return docRecord;
    }

    public Properties getMetadata() {
        return metadata;
    }

    /**
     * Gets the document reference. Same as
     * invoking <code>getDocInfo().getReference()</code>.
     * @return reference
     * @see #getDocRecord()
     */
    public String getReference() {
        return docRecord.getReference();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Doc)) return false;
        final Doc other = (Doc) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$docRecord = this.getDocRecord();
        final java.lang.Object other$docRecord = other.getDocRecord();
        if (this$docRecord == null ? other$docRecord != null : !this$docRecord.equals(other$docRecord)) return false;
        final java.lang.Object this$metadata = this.getMetadata();
        final java.lang.Object other$metadata = other.getMetadata();
        if (this$metadata == null ? other$metadata != null : !this$metadata.equals(other$metadata)) return false;
        final java.lang.Object this$content = this.content;
        final java.lang.Object other$content = other.content;
        if (this$content == null ? other$content != null : !this$content.equals(other$content)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Doc;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $docRecord = this.getDocRecord();
        result = result * PRIME + ($docRecord == null ? 43 : $docRecord.hashCode());
        final java.lang.Object $metadata = this.getMetadata();
        result = result * PRIME + ($metadata == null ? 43 : $metadata.hashCode());
        final java.lang.Object $content = this.content;
        result = result * PRIME + ($content == null ? 43 : $content.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "Doc(docRecord=" + this.getDocRecord() + ")";
    }
}
