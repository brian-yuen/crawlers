// Generated by delombok at Fri Mar 08 16:25:40 MST 2024
/* Copyright 2020-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.importer;

import java.io.InputStream;
import java.nio.charset.Charset;
import java.nio.file.Path;
import com.norconex.commons.lang.file.ContentType;
import com.norconex.commons.lang.map.Properties;

/**
 * An Importer request, unique for each document to be imported.
 * A <code>null</code> is accepted for the file or input stream. This can
 * sometimes be useful when dealing with meta data only.
 * A <code>null</code> reference can also be provided, in which case the
 * file name will be used as the reference when a file is provided, or an
 * empty string when dealing with an input stream.  It is recommended
 * to pass a reference that represents your document when possible (at least
 * just the filename, including appropriate extension).
 */
public class ImporterRequest {
    private final InputStream inputStream;
    private final Path file;
    private ContentType contentType;
    private Charset charset;
    private Properties metadata;
    private String reference;

    public ImporterRequest(InputStream inputStream) {
        this.inputStream = inputStream;
        file = null;
    }

    public ImporterRequest(Path file) {
        inputStream = null;
        this.file = file;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public InputStream getInputStream() {
        return this.inputStream;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Path getFile() {
        return this.file;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ContentType getContentType() {
        return this.contentType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Charset getCharset() {
        return this.charset;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Properties getMetadata() {
        return this.metadata;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getReference() {
        return this.reference;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterRequest setContentType(final ContentType contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterRequest setCharset(final Charset charset) {
        this.charset = charset;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterRequest setMetadata(final Properties metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterRequest setReference(final String reference) {
        this.reference = reference;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ImporterRequest)) return false;
        final ImporterRequest other = (ImporterRequest) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$inputStream = this.getInputStream();
        final java.lang.Object other$inputStream = other.getInputStream();
        if (this$inputStream == null ? other$inputStream != null : !this$inputStream.equals(other$inputStream)) return false;
        final java.lang.Object this$file = this.getFile();
        final java.lang.Object other$file = other.getFile();
        if (this$file == null ? other$file != null : !this$file.equals(other$file)) return false;
        final java.lang.Object this$contentType = this.getContentType();
        final java.lang.Object other$contentType = other.getContentType();
        if (this$contentType == null ? other$contentType != null : !this$contentType.equals(other$contentType)) return false;
        final java.lang.Object this$charset = this.getCharset();
        final java.lang.Object other$charset = other.getCharset();
        if (this$charset == null ? other$charset != null : !this$charset.equals(other$charset)) return false;
        final java.lang.Object this$metadata = this.getMetadata();
        final java.lang.Object other$metadata = other.getMetadata();
        if (this$metadata == null ? other$metadata != null : !this$metadata.equals(other$metadata)) return false;
        final java.lang.Object this$reference = this.getReference();
        final java.lang.Object other$reference = other.getReference();
        if (this$reference == null ? other$reference != null : !this$reference.equals(other$reference)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ImporterRequest;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $inputStream = this.getInputStream();
        result = result * PRIME + ($inputStream == null ? 43 : $inputStream.hashCode());
        final java.lang.Object $file = this.getFile();
        result = result * PRIME + ($file == null ? 43 : $file.hashCode());
        final java.lang.Object $contentType = this.getContentType();
        result = result * PRIME + ($contentType == null ? 43 : $contentType.hashCode());
        final java.lang.Object $charset = this.getCharset();
        result = result * PRIME + ($charset == null ? 43 : $charset.hashCode());
        final java.lang.Object $metadata = this.getMetadata();
        result = result * PRIME + ($metadata == null ? 43 : $metadata.hashCode());
        final java.lang.Object $reference = this.getReference();
        result = result * PRIME + ($reference == null ? 43 : $reference.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ImporterRequest(inputStream=" + this.getInputStream() + ", file=" + this.getFile() + ", contentType=" + this.getContentType() + ", charset=" + this.getCharset() + ", metadata=" + this.getMetadata() + ", reference=" + this.getReference() + ")";
    }
}
