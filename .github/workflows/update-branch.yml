# This workflow will run whenever the main branch is updated. It will try to merge main into
# each sub-branch in a sandbox environment and see if there is any conflicts, then email the committers of the branch
# about the result. The conflict details will be attached in the email if test-merge failed.

name: Check Branch Sync

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  test-merge:
    runs-on: ubuntu-latest

    steps:
     
      - name: Install Git
        run: sudo apt-get install git -y
      
      - name: setup mail service
        run: sudo apt install mailutils -y

      # Clone the branch, setup user information, and checkout main branch for later files checking  
      - name: Fetch all branches and setup user information
        run: |
          git clone https://github.com/brian-yuen/crawlers.git /home/runner/work/crawlers/crawlers
          cd /home/runner/work/crawlers/crawlers            
          git config user.name "GitHub Action"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git checkout main

      # check if core files are being modified
      - name: Get modified files           
        id: modified-files        
        uses: tj-actions/changed-files@v42.0.5
        with:
          files_ignore: |     
            # ignore the yml files and header files in the github folder       
            # .github/workflows/copyright-headers/*.txt
            # .github/workflows/*.yml
            # .github/*.yml
            **/.github/**
            **/assembly/**
            **/**.txt
            **/**.md
            .gitignore

      # start testing main branch into each sub-branches, only run if core files are modified
      - name: Test merge main into branches
        if: steps.modified-files.outputs.any_changed == 'true'
        run: |          
          for branch in $(git branch -r | grep -v 'origin/main' | cut -d '/' -f 2-); do
            if [[ $branch != *"snyk"* && $branch != *"dependabot"* && $branch != *".x-branch"* && $branch != *"bugfix/unknown-properties"* ]]; then
              echo ""
              echo "Branch is: $branch"
              echo ""
                                        
              git checkout -b temp-merge-$branch origin/$branch

              # Extract the branch name from the format xxxx/branch-name
              branch_name=$(echo "$branch" | cut -d '/' -f 2-)

              # Get the last commit author of all the committers on the branch, only committers who has a valid norconex or gmail email will be emailed. 
              COMMIT_AUTHORS=$(git log remotes/origin/$branch --format='%ae' | sort -u | grep 'gmail\|norconex')
                                         
              # start merging the main branch into sub-branch
              if git merge --no-commit --no-ff origin/main; then
                
                # notify branch committers merge succeeded
                echo "Merging main into $branch succeeded"
                                
                for author in $COMMIT_AUTHORS; do
                  echo "Commit author: $author"   
                  # email committers changes in main can be merged into his/her branch without conflicts
                  # echo "There are updates to the main branch, and test merge to your branch succeeded. Please update your branch. Thanks" | mail -s "Test Merge succeeded - Branch: $branch_name" $author                                 
                done
                
                
                # remove this cmd when ready to send to each committers
                echo "There are updates to the main branch, and test merge to your branch succeeded. Please update your branch. Thanks" | mail -s "Test Merge succeeded - Branch: $branch_name" brian.yuen@norconex.com
                # You can add further testing steps here if needed
                git merge --abort

              else
                # notify branch committers merge failed
                echo "Merging main into $branch failed"

                # Save the result of the merge command to a file
                touch failed-report-$branch_name.diff

                git diff > failed-report-$branch_name.diff
                more failed-report-$branch_name.diff
                
                for author in $COMMIT_AUTHORS; do
                  echo "Commit author: $author"                  
                  # email committers that changes in main has conflicts with his/her branch, and attached the details for review.
                  # echo "There are updates to the main branch, but test merge failed, attached is the details of the conflicts. Please resolve the conflicts and keep your branch up to date. Thanks" | mail -s "Test Merge FAILED - Branch: $branch_name" -A failed-report-$branch_name.diff $author
                done

                # remove this cmd when ready to send to each committers
                echo "There are updates to the main branch, but test merge failed, attached is the details of the conflicts. Please resolve the conflicts and keep your branch up to date. Thanks" | mail -s "Test Merge FAILED - Branch: $branch_name" -A failed-report-$branch_name.diff brian.yuen@norconex.com
                git merge --abort
              fi
               
            fi

          done

# on:
#   push:
#     branches:
#       - main 

# jobs:
#   Update-Fork:
#     runs-on: ubuntu-latest
#     steps:
#       - name: checking out code
#         uses: actions/checkout@v4
#         with:
#           ref: main
#           token: ${{ secrets.GITHUB_TOKEN }}
#           lfs: true
#           submodules: true
#           clean: false
#           fetch-depth: 0

#       - name: Extract commit data
#         uses: rlespinasse/git-commit-data-action@v1

#       - name: Check for synced branches action
#         id: check
#         uses: MadLadSquad/check-for-synced-branches-action@v1.0.0.3
#         with:
#           upstream-url: "https://github.com/brian-yuen/crawlers"
#           first-branch: test-branch-tbd
#           second-branch: main

#       - name: Issue
#         run: |
#           echo "behind: ${{steps.check.outputs.behind}}"
#           echo "ahead: ${{steps.check.outputs.ahead}}"
        

# on:
#   push:
#     branches:
#       - main

# jobs:
#   createPullRequest:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           ref: remove-me-branch

#       - name: Make changes to pull request
#         run: date +%s > report.txt

#       - name: Create Pull Request
#         id: cpr
#         uses: peter-evans/create-pull-request@v6
#         with:
#           token: ${{ secrets.PAT }}
#           commit-message: Update report
#           committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
#           author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
#           signoff: false
#           branch: main
#           delete-branch: false
#           title: '[Example] Update report'
#           body: |
#             Update report
#               - Updated with *today's* date
#               - Auto-generated by [create-pull-request][1]
  
#               [1]: https://github.com/peter-evans/create-pull-request
#           labels: autoupdate              
#           assignees: brian-yuen
#           reviewers: brian-yuen       
#           draft: false

# jobs:
#   check-sync:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Install Git
#         run: sudo apt-get install git -y

#       - name: Fetch all branches
#         run: git fetch --all

#       - name: Check branch sync
#         run: |
#           for branch in $(git branch -r --format '%(refname:short)'); do
#             if [[ $branch != *"snyk"* && $branch != *"dependabot"* && $branch != "origin/2.x-branch" && $branch != "origin/3.x-branch" && $branch != "origin/bugfix/unknown-properties" ]]; then
#               git checkout $branch     
#               echo ""
#               echo "working on $branch"
#               echo ""                     
#               if [[ $(git merge-base HEAD origin/main) == $(git rev-parse HEAD) ]]; then
#                 echo "Branch $branch is up to date with main branch"
#                 # Send email to branch owner
#                 # Replace 'send-email-command' with actual command to send email
#                 # Replace 'branch-owner-email' with actual email of branch owner
#                 #send-email-command "Your branch $branch can merge with the main branch, please go ahead and do so." branch-owner-email
#               else
#                 echo "Branch $branch has conflicts with the main branch"
#                 # Send email to branch owner
#                 # Replace 'send-email-command' with actual command to send email
#                 # Replace 'branch-owner-email' with actual email of branch owner
#                 #send-email-command "Your branch $branch has conflicts with the main branch, please resolve the conflict and then sync with the main branch." branch-owner-email
#               fi
#             fi
#           done



# name: Update Branch

# on:
#   push:
#     branches: [main]
    
# permissions: 
#   contents: write

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Setup Git User
#         run: |
#           git config user.name "GitHub Action"
#           git config user.email "brian.yuen@norconex.com"

#       - name: Update Branch
#         run: |
#           git checkout main
#           git fetch origin
#           git checkout update-test
#           git pull
#           git merge origin/main
#           git push origin update-test