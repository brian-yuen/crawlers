// Generated by delombok at Fri Mar 08 16:23:46 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.apachekafka;

import com.norconex.committer.core.batch.BaseBatchCommitterConfig;

/**
 * <p>
 * Commits documents to Kafka via it's Producer API
 * </p>
 *
 * <h3>createTopic</h3>
 * <p>
 * Whether to create the topic in Apache Kafka.
 * It will be created only if it is not already present. Defaults to false.
 * </p>
 *
 * <h3>XML configuration usage:</h3>
 * committer class="com.norconex.committer.apachekafka.KafkaCommitter&gt;
 *      <bootstrapServers>
 *          (A list of host/port pairs in the form host1:port1,host2:port2,...
 *          to use for establishing a connection to the Kafka cluster)
 *      </bootstrapServers>
 *      <topicName>my-topic</topicName>
 *      <createTopic>
 *          [true|false](Whether to create topic in Apache Kafka)
 *      </createTopic>
 *      <numOfPartitions>
 *          (Number of partitions, if createTopic is set to <code>true</code>)
 *      </numOfPartitions>
 *      <replicationFactor>
 *          (Replication Factor, if createTopic is set to <code>true</code>)
 *      </replicationFactor>
 *
 *      {@nx.include com.norconex.committer.core.batch.AbstractBatchCommitter#options}
 *  </committer>
 *
 *
 * {@nx.xml.example
 * <committer class="com.norconex.committer.apachekafka.KafkaCommitter">
 *   <bootstrapServers>http://some_host:1234</bootstrapServers>
 *   <topicName>my-topic</topicName>
 * </committer>
 * }
 * <p>
 * The above example uses the minimum required settings. It does not attempt
 * to create the topic. As such, topic must already exist in Apache Kafka.
 * </p>
 *
 * @author Harinder Hanjan
 */
@SuppressWarnings("javadoc")
public class ApacheKafkaCommitterConfig extends BaseBatchCommitterConfig {
    /**
     * The topic name to which documents will be sent
     */
    private String topicName;
    /**
     * The Apache Kafka broker list
     */
    private String bootstrapServers;
    /**
     * Whether to create the topic in Apache Kafka
     * It will be created only if it is not already present.
     */
    private boolean createTopic;
    /**
     * The number of partitions for the new topic.
     * Required if {@see #createTopic} is set to <code>true</code>
     */
    private int partitions;
    /**
     * Gets the replication factor for the new topic.
     * Required if {@see #createTopic} is set to <code>true</code>
     */
    private short replicationFactor;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ApacheKafkaCommitterConfig() {
    }

    /**
     * The topic name to which documents will be sent
     * @return name of the topic
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTopicName() {
        return this.topicName;
    }

    /**
     * The Apache Kafka broker list
     * @return the list of Kafka brokers
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getBootstrapServers() {
        return this.bootstrapServers;
    }

    /**
     * Whether to create the topic in Apache Kafka
     * It will be created only if it is not already present.
     * @return  <code>true</code> if topic should be created
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isCreateTopic() {
        return this.createTopic;
    }

    /**
     * The number of partitions for the new topic.
     * Required if {@see #createTopic} is set to <code>true</code>
     * @return number of partitions
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getPartitions() {
        return this.partitions;
    }

    /**
     * Gets the replication factor for the new topic.
     * Required if {@see #createTopic} is set to <code>true</code>
     * @return replication factor
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public short getReplicationFactor() {
        return this.replicationFactor;
    }

    /**
     * The topic name to which documents will be sent
     * @param   topicName   name of the topic
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ApacheKafkaCommitterConfig setTopicName(final String topicName) {
        this.topicName = topicName;
        return this;
    }

    /**
     * The Apache Kafka broker list
     * @param   servers a CSV list of Kafka brokers of format
     *                  host1:port1,host2:port2,...
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ApacheKafkaCommitterConfig setBootstrapServers(final String bootstrapServers) {
        this.bootstrapServers = bootstrapServers;
        return this;
    }

    /**
     * Whether to create the topic in Apache Kafka
     * It will be created only if it is not already present.
     * @param   createTopic whether topic should be created
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ApacheKafkaCommitterConfig setCreateTopic(final boolean createTopic) {
        this.createTopic = createTopic;
        return this;
    }

    /**
     * The number of partitions for the new topic.
     * Required if {@see #createTopic} is set to <code>true</code>
     * @param   numOfPartitions   number of partitions
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ApacheKafkaCommitterConfig setPartitions(final int partitions) {
        this.partitions = partitions;
        return this;
    }

    /**
     * Gets the replication factor for the new topic.
     * Required if {@see #createTopic} is set to <code>true</code>
     * @param replicationFactor replication factor
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ApacheKafkaCommitterConfig setReplicationFactor(final short replicationFactor) {
        this.replicationFactor = replicationFactor;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ApacheKafkaCommitterConfig)) return false;
        final ApacheKafkaCommitterConfig other = (ApacheKafkaCommitterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.isCreateTopic() != other.isCreateTopic()) return false;
        if (this.getPartitions() != other.getPartitions()) return false;
        if (this.getReplicationFactor() != other.getReplicationFactor()) return false;
        final java.lang.Object this$topicName = this.getTopicName();
        final java.lang.Object other$topicName = other.getTopicName();
        if (this$topicName == null ? other$topicName != null : !this$topicName.equals(other$topicName)) return false;
        final java.lang.Object this$bootstrapServers = this.getBootstrapServers();
        final java.lang.Object other$bootstrapServers = other.getBootstrapServers();
        if (this$bootstrapServers == null ? other$bootstrapServers != null : !this$bootstrapServers.equals(other$bootstrapServers)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ApacheKafkaCommitterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + (this.isCreateTopic() ? 79 : 97);
        result = result * PRIME + this.getPartitions();
        result = result * PRIME + this.getReplicationFactor();
        final java.lang.Object $topicName = this.getTopicName();
        result = result * PRIME + ($topicName == null ? 43 : $topicName.hashCode());
        final java.lang.Object $bootstrapServers = this.getBootstrapServers();
        result = result * PRIME + ($bootstrapServers == null ? 43 : $bootstrapServers.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ApacheKafkaCommitterConfig(super=" + super.toString() + ", topicName=" + this.getTopicName() + ", bootstrapServers=" + this.getBootstrapServers() + ", createTopic=" + this.isCreateTopic() + ", partitions=" + this.getPartitions() + ", replicationFactor=" + this.getReplicationFactor() + ")";
    }
}
