// Generated by delombok at Fri Mar 08 16:23:38 MST 2024
/* Copyright 2016-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.amazoncloudsearch;

import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.norconex.committer.core.batch.BaseBatchCommitterConfig;
import com.norconex.commons.lang.net.ProxySettings;
import com.norconex.commons.lang.time.DurationParser;

/**
 * <p>
 * Commits documents to Amazon CloudSearch.
 * </p>
 * <h3>Authentication:</h3>
 * <p>
 * An access key and security key are required to connect to and interact with
 * CloudSearch. For enhanced security, it is best to use one of the methods
 * described in {@link DefaultAWSCredentialsProviderChain} for setting them
 * (environment variables, system properties, profile file, etc).
 * Do not explicitly set "accessKey" and "secretKey" on this class if you
 * want to rely on safer methods.
 * </p>
 * <h3>CloudSearch ID limitations:</h3>
 * <p>
 * As of this writing, CloudSearch has a 128 characters length limitation
 * on its "id" field. In addition, certain characters are not allowed.
 * By default, an error will result from trying to submit
 * documents with an invalid ID. You can get around this by
 * setting {@link #setFixBadIds(boolean)} to <code>true</code>.  It will
 * truncate references that are too long and append a hash code to it
 * to keep uniqueness.  It will also convert invalid
 * characters to underscore.  This approach is not 100%
 * collision-free (uniqueness), but it should safely cover the vast
 * majority of cases.
 * </p>
 *
 * {@nx.include com.norconex.commons.lang.security.Credentials#doc}
 *
 * {@nx.include com.norconex.committer.core.AbstractCommitter#restrictTo}
 *
 * {@nx.include com.norconex.committer.core.AbstractCommitter#fieldMappings}
 *
 * {@nx.xml.usage
 * <committer class="com.norconex.committer.cloudsearch.CloudSearchCommitter">
 *
 *   <!-- Mandatory: -->
 *   <serviceEndpoint>(CloudSearch service endpoint)</serviceEndpoint>
 *
 *   <!-- Mandatory if not configured elsewhere: -->
 *   <accessKey>
 *     (Optional CloudSearch access key. Will be taken from environment
 *      when blank.)
 *   </accessKey>
 *   <secretKey>
 *     (Optional CloudSearch secret key. Will be taken from environment
 *      when blank.)
 *   </secretKey>
 *
 *   <!-- Optional settings: -->
 *   <fixBadIds>
 *     [false|true](Forces references to fit into a CloudSearch id field.)
 *   </fixBadIds>
 *   <signingRegion>(CloudSearch signing region)</signingRegion>
 *   <proxySettings>
 *     {@nx.include com.norconex.commons.lang.net.ProxySettings@nx.xml.usage}
 *   </proxySettings>
 *
 *   <sourceIdField>
 *     (Optional document field name containing the value that will be stored
 *     in CloudSearch "id" field. Default is the document reference.)
 *   </sourceIdField>
 *   <targetContentField>
 *     (Optional CloudSearch field name to store the document
 *     content/body. Default is "content".)
 *   </targetContentField>
 *
 *   {@nx.include com.norconex.committer.core.batch.AbstractBatchCommitter#options}
 * </committer>
 * }
 *
 * <p>
 * XML configuration entries expecting millisecond durations
 * can be provided in human-readable format (English only), as per
 * {@link DurationParser} (e.g., "5 minutes and 30 seconds" or "5m30s").
 * </p>
 *
 * {@nx.xml.example
 * <committer class="com.norconex.committer.cloudsearch.CloudSearchCommitter">
 *   <serviceEndpoint>search-example-xyz.some-region.cloudsearch.amazonaws.com</serviceEndpoint>
 * </committer>
 * }
 *
 * <p>
 * The above example uses the minimum required settings (relying on environment
 * variables for AWS keys).
 * </p>
 *
 * @author Pascal Essiembre
 */
@SuppressWarnings("javadoc")
public class AmazonCloudSearchCommitterConfig extends BaseBatchCommitterConfig {
    /**
     * Default CloudSearch content field
     */
    public static final String DEFAULT_COULDSEARCH_CONTENT_FIELD = "content";
    /**
     * The AWS service endpoint.
     */
    private String serviceEndpoint;
    /**
     * The the AWS signing region.
     */
    private String signingRegion;
    /**
     * The CloudSearch access key. If <code>null</code>, the access key
     * will be obtained from the environment, as detailed in
     * {@link DefaultAWSCredentialsProviderChain}.
     */
    private String accessKey;
    /**
     * The CloudSearch secret key. If <code>null</code>, the secret key
     * will be obtained from the environment, as detailed in
     * {@link DefaultAWSCredentialsProviderChain}.
     */
    private String secretKey;
    /**
     * Whether to fix IDs that are too long for CloudSearch
     * ID limitation (128 characters max). If <code>true</code>,
     * long IDs will be truncated and a hash code representing the
     * truncated part will be appended.
     */
    private boolean fixBadIds;
    private final ProxySettings proxySettings = new ProxySettings();
    /**
     * The document field name containing the value to be stored
     * in CloudSearch "id" field. Default is not a field, but rather
     * the document reference.
     * A <code>null</code> value indicate to use the
     * document reference instead of a field (default).
     */
    private String sourceIdField;
    /**
     * The name of the CloudSearch field where content will be stored.
     * Default is "content".
     * Specifying a <code>null</code> value will disable storing the content.
     */
    private String targetContentField = DEFAULT_COULDSEARCH_CONTENT_FIELD;

    public ProxySettings getProxySettings() {
        return proxySettings;
    }

    public AmazonCloudSearchCommitterConfig setProxySettings(ProxySettings proxy) {
        proxySettings.copyFrom(proxy);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AmazonCloudSearchCommitterConfig() {
    }

    /**
     * The AWS service endpoint.
     * @return AWS service endpoint
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * The the AWS signing region.
     * @return the AWS signing region
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSigningRegion() {
        return this.signingRegion;
    }

    /**
     * The CloudSearch access key. If <code>null</code>, the access key
     * will be obtained from the environment, as detailed in
     * {@link DefaultAWSCredentialsProviderChain}.
     * @return the access key
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getAccessKey() {
        return this.accessKey;
    }

    /**
     * The CloudSearch secret key. If <code>null</code>, the secret key
     * will be obtained from the environment, as detailed in
     * {@link DefaultAWSCredentialsProviderChain}.
     * @return the secret key
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSecretKey() {
        return this.secretKey;
    }

    /**
     * Whether to fix IDs that are too long for CloudSearch
     * ID limitation (128 characters max). If <code>true</code>,
     * long IDs will be truncated and a hash code representing the
     * truncated part will be appended.
     * @return <code>true</code> to fix IDs that are too long
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isFixBadIds() {
        return this.fixBadIds;
    }

    /**
     * The document field name containing the value to be stored
     * in CloudSearch "id" field. Default is not a field, but rather
     * the document reference.
     * A <code>null</code> value indicate to use the
     * document reference instead of a field (default).
     * @return name of field containing id value
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceIdField() {
        return this.sourceIdField;
    }

    /**
     * The name of the CloudSearch field where content will be stored.
     * Default is "content".
     * Specifying a <code>null</code> value will disable storing the content.
     * @return field name
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTargetContentField() {
        return this.targetContentField;
    }

    /**
     * The AWS service endpoint.
     * @param serviceEndpoint AWS service endpoint
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AmazonCloudSearchCommitterConfig setServiceEndpoint(final String serviceEndpoint) {
        this.serviceEndpoint = serviceEndpoint;
        return this;
    }

    /**
     * The the AWS signing region.
     * @param signingRegion the AWS signing region
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AmazonCloudSearchCommitterConfig setSigningRegion(final String signingRegion) {
        this.signingRegion = signingRegion;
        return this;
    }

    /**
     * The CloudSearch access key. If <code>null</code>, the access key
     * will be obtained from the environment, as detailed in
     * {@link DefaultAWSCredentialsProviderChain}.
     * @param accessKey the access key
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AmazonCloudSearchCommitterConfig setAccessKey(final String accessKey) {
        this.accessKey = accessKey;
        return this;
    }

    /**
     * The CloudSearch secret key. If <code>null</code>, the secret key
     * will be obtained from the environment, as detailed in
     * {@link DefaultAWSCredentialsProviderChain}.
     * @param secretKey the secret key
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AmazonCloudSearchCommitterConfig setSecretKey(final String secretKey) {
        this.secretKey = secretKey;
        return this;
    }

    /**
     * Whether to fix IDs that are too long for CloudSearch
     * ID limitation (128 characters max). If <code>true</code>,
     * long IDs will be truncated and a hash code representing the
     * truncated part will be appended.
     * @param fixBadIds <code>true</code> to fix IDs that are too long
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AmazonCloudSearchCommitterConfig setFixBadIds(final boolean fixBadIds) {
        this.fixBadIds = fixBadIds;
        return this;
    }

    /**
     * The document field name containing the value to be stored
     * in CloudSearch "id" field. Default is not a field, but rather
     * the document reference.
     * A <code>null</code> value indicate to use the
     * document reference instead of a field (default).
     * @param sourceIdField name of field containing id value,
     *        or <code>null</code>
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AmazonCloudSearchCommitterConfig setSourceIdField(final String sourceIdField) {
        this.sourceIdField = sourceIdField;
        return this;
    }

    /**
     * The name of the CloudSearch field where content will be stored.
     * Default is "content".
     * Specifying a <code>null</code> value will disable storing the content.
     * @param targetContentField field name
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AmazonCloudSearchCommitterConfig setTargetContentField(final String targetContentField) {
        this.targetContentField = targetContentField;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof AmazonCloudSearchCommitterConfig)) return false;
        final AmazonCloudSearchCommitterConfig other = (AmazonCloudSearchCommitterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.isFixBadIds() != other.isFixBadIds()) return false;
        final java.lang.Object this$serviceEndpoint = this.getServiceEndpoint();
        final java.lang.Object other$serviceEndpoint = other.getServiceEndpoint();
        if (this$serviceEndpoint == null ? other$serviceEndpoint != null : !this$serviceEndpoint.equals(other$serviceEndpoint)) return false;
        final java.lang.Object this$signingRegion = this.getSigningRegion();
        final java.lang.Object other$signingRegion = other.getSigningRegion();
        if (this$signingRegion == null ? other$signingRegion != null : !this$signingRegion.equals(other$signingRegion)) return false;
        final java.lang.Object this$accessKey = this.getAccessKey();
        final java.lang.Object other$accessKey = other.getAccessKey();
        if (this$accessKey == null ? other$accessKey != null : !this$accessKey.equals(other$accessKey)) return false;
        final java.lang.Object this$secretKey = this.getSecretKey();
        final java.lang.Object other$secretKey = other.getSecretKey();
        if (this$secretKey == null ? other$secretKey != null : !this$secretKey.equals(other$secretKey)) return false;
        final java.lang.Object this$proxySettings = this.getProxySettings();
        final java.lang.Object other$proxySettings = other.getProxySettings();
        if (this$proxySettings == null ? other$proxySettings != null : !this$proxySettings.equals(other$proxySettings)) return false;
        final java.lang.Object this$sourceIdField = this.getSourceIdField();
        final java.lang.Object other$sourceIdField = other.getSourceIdField();
        if (this$sourceIdField == null ? other$sourceIdField != null : !this$sourceIdField.equals(other$sourceIdField)) return false;
        final java.lang.Object this$targetContentField = this.getTargetContentField();
        final java.lang.Object other$targetContentField = other.getTargetContentField();
        if (this$targetContentField == null ? other$targetContentField != null : !this$targetContentField.equals(other$targetContentField)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof AmazonCloudSearchCommitterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + (this.isFixBadIds() ? 79 : 97);
        final java.lang.Object $serviceEndpoint = this.getServiceEndpoint();
        result = result * PRIME + ($serviceEndpoint == null ? 43 : $serviceEndpoint.hashCode());
        final java.lang.Object $signingRegion = this.getSigningRegion();
        result = result * PRIME + ($signingRegion == null ? 43 : $signingRegion.hashCode());
        final java.lang.Object $accessKey = this.getAccessKey();
        result = result * PRIME + ($accessKey == null ? 43 : $accessKey.hashCode());
        final java.lang.Object $secretKey = this.getSecretKey();
        result = result * PRIME + ($secretKey == null ? 43 : $secretKey.hashCode());
        final java.lang.Object $proxySettings = this.getProxySettings();
        result = result * PRIME + ($proxySettings == null ? 43 : $proxySettings.hashCode());
        final java.lang.Object $sourceIdField = this.getSourceIdField();
        result = result * PRIME + ($sourceIdField == null ? 43 : $sourceIdField.hashCode());
        final java.lang.Object $targetContentField = this.getTargetContentField();
        result = result * PRIME + ($targetContentField == null ? 43 : $targetContentField.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "AmazonCloudSearchCommitterConfig(super=" + super.toString() + ", serviceEndpoint=" + this.getServiceEndpoint() + ", signingRegion=" + this.getSigningRegion() + ", accessKey=" + this.getAccessKey() + ", secretKey=" + this.getSecretKey() + ", fixBadIds=" + this.isFixBadIds() + ", proxySettings=" + this.getProxySettings() + ", sourceIdField=" + this.getSourceIdField() + ", targetContentField=" + this.getTargetContentField() + ")";
    }
}
