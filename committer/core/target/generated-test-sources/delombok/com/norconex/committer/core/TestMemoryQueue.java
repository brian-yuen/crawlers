// Generated by delombok at Fri Mar 08 16:23:53 MST 2024
/* Copyright 2022-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.core;

import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.norconex.committer.core.batch.BatchConsumer;
import com.norconex.committer.core.batch.queue.CommitterQueue;
import com.norconex.committer.core.batch.queue.CommitterQueueException;

public class TestMemoryQueue implements CommitterQueue {
    @JsonIgnore
    private final List<CommitterRequest> requests = new ArrayList<>();
    @JsonIgnore
    private BatchConsumer batchConsumer;

    @Override
    public void init(CommitterContext committerContext, BatchConsumer batchConsumer) throws CommitterQueueException {
        this.batchConsumer = batchConsumer;
    }

    @Override
    public void queue(CommitterRequest request) throws CommitterQueueException {
        requests.add(request);
    }

    @Override
    public void clean() throws CommitterQueueException {
        requests.clear();
    }

    @Override
    public void close() throws CommitterQueueException {
        try {
            batchConsumer.consume(requests.iterator());
        } catch (CommitterException e) {
            throw new CommitterQueueException(e);
        }
    }

    public List<CommitterRequest> getAllRequests() {
        return requests;
    }

    public List<UpsertRequest> getUpsertRequests() {
        return requests.stream().filter(UpsertRequest.class::isInstance).map(UpsertRequest.class::cast).toList();
    }

    public List<DeleteRequest> getDeleteRequests() {
        return requests.stream().filter(DeleteRequest.class::isInstance).map(DeleteRequest.class::cast).toList();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "TestMemoryQueue(requests=" + this.requests + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof TestMemoryQueue)) return false;
        final TestMemoryQueue other = (TestMemoryQueue) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$requests = this.requests;
        final java.lang.Object other$requests = other.requests;
        if (this$requests == null ? other$requests != null : !this$requests.equals(other$requests)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof TestMemoryQueue;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $requests = this.requests;
        result = result * PRIME + ($requests == null ? 43 : $requests.hashCode());
        return result;
    }
}
