// Generated by delombok at Fri Mar 08 16:23:50 MST 2024
/* Copyright 2020-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.core.fs;

import java.nio.file.Path;
import com.norconex.committer.core.BaseCommitterConfig;

/**
 * <p>
 * Base class for committers writing to the local file system.
 * </p>
 *
 * <h3>XML configuration usage:</h3>
 * <p>
 * The following are configuration options inherited by subclasses:
 * </p>
 * {@nx.xml #options
 *   <directory>(path where to save the files)</directory>
 *   <docsPerFile>(max number of docs per file)</docsPerFile>
 *   <compress>[false|true]</compress>
 *   <splitUpsertDelete>[false|true]</splitUpsertDelete>
 *   <fileNamePrefix>(optional prefix to created file names)</fileNamePrefix>
 *   <fileNameSuffix>(optional suffix to created file names)</fileNameSuffix>
 *   {@nx.include com.norconex.committer.core.AbstractCommitter@nx.xml.usage}
 * }
 */
@SuppressWarnings("javadoc")
public class BaseFSCommitterConfig extends BaseCommitterConfig {
    /**
     * The directory where files are committed.
     */
    private Path directory;
    private int docsPerFile;
    private boolean compress;
    private boolean splitUpsertDelete;
    /**
     * The file name prefix (default is <code>null</code>).
     */
    private String fileNamePrefix;
    /**
     * The file name suffix (default is <code>null</code>).
     */
    private String fileNameSuffix;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseFSCommitterConfig() {
    }

    /**
     * The directory where files are committed.
     * @return a directory
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Path getDirectory() {
        return this.directory;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getDocsPerFile() {
        return this.docsPerFile;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isCompress() {
        return this.compress;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isSplitUpsertDelete() {
        return this.splitUpsertDelete;
    }

    /**
     * The file name prefix (default is <code>null</code>).
     * @return file name prefix
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getFileNamePrefix() {
        return this.fileNamePrefix;
    }

    /**
     * The file name suffix (default is <code>null</code>).
     * @return file name suffix
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getFileNameSuffix() {
        return this.fileNameSuffix;
    }

    /**
     * The directory where files are committed.
     * @param directory a directory
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseFSCommitterConfig setDirectory(final Path directory) {
        this.directory = directory;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseFSCommitterConfig setDocsPerFile(final int docsPerFile) {
        this.docsPerFile = docsPerFile;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseFSCommitterConfig setCompress(final boolean compress) {
        this.compress = compress;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseFSCommitterConfig setSplitUpsertDelete(final boolean splitUpsertDelete) {
        this.splitUpsertDelete = splitUpsertDelete;
        return this;
    }

    /**
     * The file name prefix (default is <code>null</code>).
     * @param fileNamePrefix file name prefix
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseFSCommitterConfig setFileNamePrefix(final String fileNamePrefix) {
        this.fileNamePrefix = fileNamePrefix;
        return this;
    }

    /**
     * The file name suffix (default is <code>null</code>).
     * @param fileNameSuffix file name suffix
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseFSCommitterConfig setFileNameSuffix(final String fileNameSuffix) {
        this.fileNameSuffix = fileNameSuffix;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof BaseFSCommitterConfig)) return false;
        final BaseFSCommitterConfig other = (BaseFSCommitterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.getDocsPerFile() != other.getDocsPerFile()) return false;
        if (this.isCompress() != other.isCompress()) return false;
        if (this.isSplitUpsertDelete() != other.isSplitUpsertDelete()) return false;
        final java.lang.Object this$directory = this.getDirectory();
        final java.lang.Object other$directory = other.getDirectory();
        if (this$directory == null ? other$directory != null : !this$directory.equals(other$directory)) return false;
        final java.lang.Object this$fileNamePrefix = this.getFileNamePrefix();
        final java.lang.Object other$fileNamePrefix = other.getFileNamePrefix();
        if (this$fileNamePrefix == null ? other$fileNamePrefix != null : !this$fileNamePrefix.equals(other$fileNamePrefix)) return false;
        final java.lang.Object this$fileNameSuffix = this.getFileNameSuffix();
        final java.lang.Object other$fileNameSuffix = other.getFileNameSuffix();
        if (this$fileNameSuffix == null ? other$fileNameSuffix != null : !this$fileNameSuffix.equals(other$fileNameSuffix)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof BaseFSCommitterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + this.getDocsPerFile();
        result = result * PRIME + (this.isCompress() ? 79 : 97);
        result = result * PRIME + (this.isSplitUpsertDelete() ? 79 : 97);
        final java.lang.Object $directory = this.getDirectory();
        result = result * PRIME + ($directory == null ? 43 : $directory.hashCode());
        final java.lang.Object $fileNamePrefix = this.getFileNamePrefix();
        result = result * PRIME + ($fileNamePrefix == null ? 43 : $fileNamePrefix.hashCode());
        final java.lang.Object $fileNameSuffix = this.getFileNameSuffix();
        result = result * PRIME + ($fileNameSuffix == null ? 43 : $fileNameSuffix.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "BaseFSCommitterConfig(super=" + super.toString() + ", directory=" + this.getDirectory() + ", docsPerFile=" + this.getDocsPerFile() + ", compress=" + this.isCompress() + ", splitUpsertDelete=" + this.isSplitUpsertDelete() + ", fileNamePrefix=" + this.getFileNamePrefix() + ", fileNameSuffix=" + this.getFileNameSuffix() + ")";
    }
}
