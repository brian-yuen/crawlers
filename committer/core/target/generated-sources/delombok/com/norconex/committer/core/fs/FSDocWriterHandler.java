// Generated by delombok at Fri Mar 08 16:23:51 MST 2024
/* Copyright 2022-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.core.fs;

import static com.norconex.commons.lang.file.FileUtil.toSafeFileName;
import static org.apache.commons.lang3.StringUtils.stripToEmpty;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.zip.GZIPOutputStream;

/**
 * Writes documents to filesystem.
 * Not part of public API.
 */
class FSDocWriterHandler<T> implements AutoCloseable {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(FSDocWriterHandler.class);
    private final String fileBaseName;
    private int writeCount;
    // start file numbering at 1
    private int fileNumber = 1;
    private File file;
    private T docWriter;
    private Writer writer = null;
    private final AbstractFSCommitter<T, ? extends BaseFSCommitterConfig> committer;

    FSDocWriterHandler(AbstractFSCommitter<T, ? extends BaseFSCommitterConfig> committer, String fileBaseName) {
        this.committer = committer;
        this.fileBaseName = fileBaseName;
    }

    synchronized T withDocWriter() throws IOException {
        var docPerFile = committer.getConfiguration().getDocsPerFile();
        var docPerFileReached = docPerFile > 0 && writeCount == docPerFile;
        if (docPerFileReached) {
            close();
        }
        // invocation count is zero or max reached, we need a new file.
        if (writeCount == 0) {
            file = new File(committer.getResolvedDirectory().toFile(), buildFileName());
            LOG.info("Creating file: {}", file);
            if (committer.getConfiguration().isCompress()) {
                writer = new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(file), true));
            } else {
                writer = new FileWriter(file);
            }
            docWriter = committer.createDocWriter(writer);
            fileNumber++;
        }
        writeCount++;
        return docWriter;
    }

    private String buildFileName() {
        var fileName = stripToEmpty(toSafeFileName(committer.getConfiguration().getFileNamePrefix())) + fileBaseName + stripToEmpty(toSafeFileName(committer.getConfiguration().getFileNameSuffix())) + "_" + fileNumber + "." + committer.getFileExtension();
        if (committer.getConfiguration().isCompress()) {
            fileName += ".gz";
        }
        return fileName;
    }

    @Override
    public synchronized void close() throws IOException {
        writeCount = 0;
        try {
            if (writer != null) {
                committer.closeDocWriter(docWriter);
            }
        } finally {
            if (writer != null) {
                writer.close();
            }
        }
        file = null;
        writer = null;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof FSDocWriterHandler)) return false;
        final FSDocWriterHandler<?> other = (FSDocWriterHandler<?>) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.writeCount != other.writeCount) return false;
        if (this.fileNumber != other.fileNumber) return false;
        final java.lang.Object this$fileBaseName = this.fileBaseName;
        final java.lang.Object other$fileBaseName = other.fileBaseName;
        if (this$fileBaseName == null ? other$fileBaseName != null : !this$fileBaseName.equals(other$fileBaseName)) return false;
        final java.lang.Object this$file = this.file;
        final java.lang.Object other$file = other.file;
        if (this$file == null ? other$file != null : !this$file.equals(other$file)) return false;
        final java.lang.Object this$docWriter = this.docWriter;
        final java.lang.Object other$docWriter = other.docWriter;
        if (this$docWriter == null ? other$docWriter != null : !this$docWriter.equals(other$docWriter)) return false;
        final java.lang.Object this$writer = this.writer;
        final java.lang.Object other$writer = other.writer;
        if (this$writer == null ? other$writer != null : !this$writer.equals(other$writer)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof FSDocWriterHandler;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.writeCount;
        result = result * PRIME + this.fileNumber;
        final java.lang.Object $fileBaseName = this.fileBaseName;
        result = result * PRIME + ($fileBaseName == null ? 43 : $fileBaseName.hashCode());
        final java.lang.Object $file = this.file;
        result = result * PRIME + ($file == null ? 43 : $file.hashCode());
        final java.lang.Object $docWriter = this.docWriter;
        result = result * PRIME + ($docWriter == null ? 43 : $docWriter.hashCode());
        final java.lang.Object $writer = this.writer;
        result = result * PRIME + ($writer == null ? 43 : $writer.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "FSDocWriterHandler(fileBaseName=" + this.fileBaseName + ", writeCount=" + this.writeCount + ", fileNumber=" + this.fileNumber + ", file=" + this.file + ", docWriter=" + this.docWriter + ", writer=" + this.writer + ")";
    }
}
