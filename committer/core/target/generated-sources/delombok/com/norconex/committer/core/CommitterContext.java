// Generated by delombok at Fri Mar 08 16:23:50 MST 2024
/* Copyright 2020-2022 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.core;

import java.io.File;
import java.nio.file.Path;
import org.apache.commons.io.FileUtils;
import com.norconex.commons.lang.TimeIdGenerator;
import com.norconex.commons.lang.event.EventManager;
import com.norconex.commons.lang.io.CachedStreamFactory;

/**
 * Holds objects defined outside a committer but useful or required for the
 * committer execution.
 */
public final class CommitterContext {
    private EventManager eventManager;
    private Path workDir;
    private CachedStreamFactory streamFactory;

    private CommitterContext() {
    }

    public EventManager getEventManager() {
        return eventManager;
    }

    /**
     * Gets a unique working directory for a committer (if one is needed).
     * @return working directory (never <code>null</code>)
     */
    public Path getWorkDir() {
        return workDir;
    }

    public CachedStreamFactory getStreamFactory() {
        return streamFactory;
    }

    public CommitterContext withEventManager(EventManager eventManager) {
        return CommitterContext.builder().setEventManager(eventManager).setWorkDir(workDir).setStreamFactory(streamFactory).build();
    }

    public CommitterContext withWorkdir(Path workDir) {
        return CommitterContext.builder().setEventManager(eventManager).setWorkDir(workDir).setStreamFactory(streamFactory).build();
    }

    public CommitterContext withStreamFactory(CachedStreamFactory streamFactory) {
        return CommitterContext.builder().setEventManager(eventManager).setWorkDir(workDir).setStreamFactory(streamFactory).build();
    }

    public static Builder builder() {
        return new Builder();
    }


    public static class Builder {
        private final CommitterContext ctx = new CommitterContext();

        private Builder() {
        }

        public Builder setWorkDir(Path workDir) {
            ctx.workDir = workDir;
            return this;
        }

        public Builder setEventManager(EventManager eventManager) {
            ctx.eventManager = eventManager;
            return this;
        }

        public Builder setStreamFactory(CachedStreamFactory streamFactory) {
            ctx.streamFactory = streamFactory;
            return this;
        }

        public CommitterContext build() {
            if (ctx.workDir == null) {
                ctx.workDir = new File(FileUtils.getTempDirectory(), "committer-" + TimeIdGenerator.next()).toPath();
            }
            if (ctx.eventManager == null) {
                ctx.eventManager = new EventManager();
            }
            if (ctx.streamFactory == null) {
                ctx.streamFactory = new CachedStreamFactory();
            }
            return ctx;
        }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "CommitterContext(eventManager=" + this.eventManager + ", workDir=" + this.workDir + ", streamFactory=" + this.streamFactory + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof CommitterContext)) return false;
        final CommitterContext other = (CommitterContext) o;
        final java.lang.Object this$eventManager = this.eventManager;
        final java.lang.Object other$eventManager = other.eventManager;
        if (this$eventManager == null ? other$eventManager != null : !this$eventManager.equals(other$eventManager)) return false;
        final java.lang.Object this$workDir = this.workDir;
        final java.lang.Object other$workDir = other.workDir;
        if (this$workDir == null ? other$workDir != null : !this$workDir.equals(other$workDir)) return false;
        final java.lang.Object this$streamFactory = this.streamFactory;
        final java.lang.Object other$streamFactory = other.streamFactory;
        if (this$streamFactory == null ? other$streamFactory != null : !this$streamFactory.equals(other$streamFactory)) return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $eventManager = this.eventManager;
        result = result * PRIME + ($eventManager == null ? 43 : $eventManager.hashCode());
        final java.lang.Object $workDir = this.workDir;
        result = result * PRIME + ($workDir == null ? 43 : $workDir.hashCode());
        final java.lang.Object $streamFactory = this.streamFactory;
        result = result * PRIME + ($streamFactory == null ? 43 : $streamFactory.hashCode());
        return result;
    }
}
