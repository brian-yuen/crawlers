// Generated by delombok at Fri Mar 08 16:23:50 MST 2024
/* Copyright 2020-2022 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.core;

import org.apache.commons.lang3.builder.ToStringExclude;
import com.norconex.commons.lang.map.Properties;
import lombok.NonNull;

/**
 * A committer deletion request. Metadata associated with a deletion
 * request is typically minimal in comparison with an addition or update.
 * It is even possible for it to be empty.
 */
public class DeleteRequest implements CommitterRequest {
    private final String reference;
    @ToStringExclude
    private final Properties metadata = new Properties();

    public DeleteRequest(@NonNull String reference, Properties metadata) {
        java.util.Objects.requireNonNull(reference, "reference is marked non-null but is null");
        this.reference = reference;
        this.metadata.putAll(metadata);
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getReference() {
        return this.reference;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Properties getMetadata() {
        return this.metadata;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof DeleteRequest)) return false;
        final DeleteRequest other = (DeleteRequest) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$reference = this.getReference();
        final java.lang.Object other$reference = other.getReference();
        if (this$reference == null ? other$reference != null : !this$reference.equals(other$reference)) return false;
        final java.lang.Object this$metadata = this.getMetadata();
        final java.lang.Object other$metadata = other.getMetadata();
        if (this$metadata == null ? other$metadata != null : !this$metadata.equals(other$metadata)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof DeleteRequest;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $reference = this.getReference();
        result = result * PRIME + ($reference == null ? 43 : $reference.hashCode());
        final java.lang.Object $metadata = this.getMetadata();
        result = result * PRIME + ($metadata == null ? 43 : $metadata.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "DeleteRequest(reference=" + this.getReference() + ", metadata=" + this.getMetadata() + ")";
    }
}
