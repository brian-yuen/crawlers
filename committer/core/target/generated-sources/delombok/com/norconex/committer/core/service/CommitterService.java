// Generated by delombok at Fri Mar 08 16:23:51 MST 2024
/* Copyright 2020-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.core.service;

import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_CLEAN_BEGIN;
import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_CLEAN_END;
import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_CLOSE_BEGIN;
import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_CLOSE_END;
import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_DELETE_BEGIN;
import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_DELETE_END;
import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_INIT_BEGIN;
import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_INIT_END;
import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_UPSERT_BEGIN;
import static com.norconex.committer.core.service.CommitterServiceEvent.COMMITTER_SERVICE_UPSERT_END;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.StringUtils;
import com.norconex.committer.core.Committer;
import com.norconex.committer.core.CommitterContext;
import com.norconex.committer.core.CommitterException;
import com.norconex.committer.core.DeleteRequest;
import com.norconex.committer.core.UpsertRequest;
import com.norconex.commons.lang.event.EventManager;
import lombok.Builder.Default;
import lombok.NonNull;

/**
 * Wrapper around multiple Committers so they can all be handled as one
 * and facilitating integration with various clients.
 * @param <T> type of committed objects
 */
public class CommitterService<T> {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(CommitterService.class);
    private List<Committer> committers;
    private EventManager eventManager;
    @NonNull
    private final Function<T, UpsertRequest> upsertRequestBuilder;
    @NonNull
    private final Function<T, DeleteRequest> deleteRequestBuilder;

    public boolean isOperative() {
        return !committers.isEmpty();
    }

    public void init(CommitterContext baseContext) throws CommitterServiceException {
        fire(COMMITTER_SERVICE_INIT_BEGIN, committers, null);
        Set<String> uniqueDirNames = new HashSet<>();
        executeAll("init", c -> {
            var dirName = ClassUtils.getShortClassName(c.getClass());
            if (StringUtils.isBlank(dirName)) {
                dirName = "UnnamedCommitter";
            }
            var cnt = 1;
            while (uniqueDirNames.contains(dirName)) {
                cnt++;
                dirName = dirName.replaceFirst("^(.*)_\\d+$", "$1") + "_" + cnt;
            }
            uniqueDirNames.add(dirName);
            var ctx = baseContext.withWorkdir(baseContext.getWorkDir().resolve(dirName));
            c.init(ctx);
        });
        fire(COMMITTER_SERVICE_INIT_END, committers, null);
    }

    /**
     * Updates or inserts an object using all accepting committers.
     * @param object the object to upsert
     * @return committers having accepted and upserted the object
     * @throws CommitterServiceException wrapper around operation failure
     *     one or more of the registered committers (wraps last exception
     *     captured)
     */
    public List<Committer> upsert(T object) throws CommitterServiceException {
        fire(COMMITTER_SERVICE_UPSERT_BEGIN, committers, object);
        List<Committer> actuals = new ArrayList<>();
        if (!committers.isEmpty()) {
            executeAll("upsert", c -> {
                var req = upsertRequestBuilder.apply(object);
                if (c.accept(req)) {
                    actuals.add(c);
                    c.upsert(req);
                }
            });
        }
        fire(COMMITTER_SERVICE_UPSERT_END, actuals, object);
        return actuals;
    }

    /**
     * Deletes an object using all accepting committers.
     * @param object the object to delete
     * @return committers having accepted and deleted the object
     * @throws CommitterServiceException wrapper around operation failure
     *     one or more of the registered committers (wraps last exception
     *     captured)
     */
    public List<Committer> delete(T object) throws CommitterServiceException {
        fire(COMMITTER_SERVICE_DELETE_BEGIN, committers, object);
        List<Committer> actuals = new ArrayList<>();
        if (!committers.isEmpty()) {
            executeAll("delete", c -> {
                var req = deleteRequestBuilder.apply(object);
                if (c.accept(req)) {
                    actuals.add(c);
                    c.delete(req);
                }
            });
        }
        // no doc content rewind necessary
        fire(COMMITTER_SERVICE_DELETE_END, actuals, object);
        return actuals;
    }

    /**
     * Closes all registered committers.
     * @throws CommitterServiceException wrapper around operation failure
     *     one or more of the registered committers (wraps last exception
     *     captured)
     */
    public void close() throws CommitterServiceException {
        fire(COMMITTER_SERVICE_CLOSE_BEGIN, committers, null);
        executeAll("close", Committer::close);
        fire(COMMITTER_SERVICE_CLOSE_END, committers, null);
    }

    /**
     * Cleans all registered committers.
     * @throws CommitterServiceException wrapper around operation failure
     *     one or more of the registered committers (wraps last exception
     *     captured)
     */
    public void clean() throws CommitterServiceException {
        fire(COMMITTER_SERVICE_CLEAN_BEGIN, committers, null);
        executeAll("clean", Committer::clean);
        fire(COMMITTER_SERVICE_CLEAN_END, committers, null);
    }

    private void executeAll(String operation, CommitterConsumer consumer) throws CommitterServiceException {
        List<String> failures = new ArrayList<>();
        CommitterException exception = null;
        for (Committer committer : committers) {
            try {
                consumer.accept(committer);
            } catch (CommitterException e) {
                LOG.error("Could not execute \"{}\" on committer: {}", operation, committer, e);
                failures.add(committer.getClass().getSimpleName());
                exception = e;
            }
        }
        if (!failures.isEmpty()) {
            throw new CommitterServiceException("Could not execute \"" + operation + "\" on " + failures.size() + " committer(s): \"" + StringUtils.join(failures, ", ") + "\". Cause is the last exception captured. " + "Check the logs for more details.", exception);
        }
    }

    private void fire(String eventName, List<Committer> targets, T object) {
        var msg = "Committers: " + (targets.isEmpty() ? "none" : targets.stream().map(c -> c.getClass().getSimpleName()).collect(Collectors.joining(",")));
        getEventManager().fire(CommitterServiceEvent.builder().name(eventName).source(this).subject(object).committers(targets).message(msg).build());
    }

    @Override
    public String toString() {
        return CommitterService.class.getSimpleName() + '[' + committers.stream().map(c -> c.getClass().getSimpleName()).collect(Collectors.joining(",")) + ']';
    }


    @FunctionalInterface
    private interface CommitterConsumer {
        void accept(Committer c) throws CommitterException;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static <T> List<Committer> $default$committers() {
        return Collections.emptyList();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static <T> EventManager $default$eventManager() {
        return new EventManager();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    CommitterService(final List<Committer> committers, final EventManager eventManager, @NonNull final Function<T, UpsertRequest> upsertRequestBuilder, @NonNull final Function<T, DeleteRequest> deleteRequestBuilder) {
        java.util.Objects.requireNonNull(upsertRequestBuilder, "upsertRequestBuilder is marked non-null but is null");
        java.util.Objects.requireNonNull(deleteRequestBuilder, "deleteRequestBuilder is marked non-null but is null");
        this.committers = committers;
        this.eventManager = eventManager;
        this.upsertRequestBuilder = upsertRequestBuilder;
        this.deleteRequestBuilder = deleteRequestBuilder;
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class CommitterServiceBuilder<T> {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean committers$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private List<Committer> committers$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean eventManager$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private EventManager eventManager$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Function<T, UpsertRequest> upsertRequestBuilder;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Function<T, DeleteRequest> deleteRequestBuilder;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        CommitterServiceBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public CommitterService.CommitterServiceBuilder<T> committers(final List<Committer> committers) {
            this.committers$value = committers;
            committers$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public CommitterService.CommitterServiceBuilder<T> eventManager(final EventManager eventManager) {
            this.eventManager$value = eventManager;
            eventManager$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public CommitterService.CommitterServiceBuilder<T> upsertRequestBuilder(@NonNull final Function<T, UpsertRequest> upsertRequestBuilder) {
            java.util.Objects.requireNonNull(upsertRequestBuilder, "upsertRequestBuilder is marked non-null but is null");
            this.upsertRequestBuilder = upsertRequestBuilder;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public CommitterService.CommitterServiceBuilder<T> deleteRequestBuilder(@NonNull final Function<T, DeleteRequest> deleteRequestBuilder) {
            java.util.Objects.requireNonNull(deleteRequestBuilder, "deleteRequestBuilder is marked non-null but is null");
            this.deleteRequestBuilder = deleteRequestBuilder;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public CommitterService<T> build() {
            List<Committer> committers$value = this.committers$value;
            if (!this.committers$set) committers$value = CommitterService.<T>$default$committers();
            EventManager eventManager$value = this.eventManager$value;
            if (!this.eventManager$set) eventManager$value = CommitterService.<T>$default$eventManager();
            return new CommitterService<T>(committers$value, eventManager$value, this.upsertRequestBuilder, this.deleteRequestBuilder);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "CommitterService.CommitterServiceBuilder(committers$value=" + this.committers$value + ", eventManager$value=" + this.eventManager$value + ", upsertRequestBuilder=" + this.upsertRequestBuilder + ", deleteRequestBuilder=" + this.deleteRequestBuilder + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static <T> CommitterService.CommitterServiceBuilder<T> builder() {
        return new CommitterService.CommitterServiceBuilder<T>();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof CommitterService)) return false;
        final CommitterService<?> other = (CommitterService<?>) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$committers = this.getCommitters();
        final java.lang.Object other$committers = other.getCommitters();
        if (this$committers == null ? other$committers != null : !this$committers.equals(other$committers)) return false;
        final java.lang.Object this$eventManager = this.getEventManager();
        final java.lang.Object other$eventManager = other.getEventManager();
        if (this$eventManager == null ? other$eventManager != null : !this$eventManager.equals(other$eventManager)) return false;
        final java.lang.Object this$upsertRequestBuilder = this.getUpsertRequestBuilder();
        final java.lang.Object other$upsertRequestBuilder = other.getUpsertRequestBuilder();
        if (this$upsertRequestBuilder == null ? other$upsertRequestBuilder != null : !this$upsertRequestBuilder.equals(other$upsertRequestBuilder)) return false;
        final java.lang.Object this$deleteRequestBuilder = this.getDeleteRequestBuilder();
        final java.lang.Object other$deleteRequestBuilder = other.getDeleteRequestBuilder();
        if (this$deleteRequestBuilder == null ? other$deleteRequestBuilder != null : !this$deleteRequestBuilder.equals(other$deleteRequestBuilder)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof CommitterService;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $committers = this.getCommitters();
        result = result * PRIME + ($committers == null ? 43 : $committers.hashCode());
        final java.lang.Object $eventManager = this.getEventManager();
        result = result * PRIME + ($eventManager == null ? 43 : $eventManager.hashCode());
        final java.lang.Object $upsertRequestBuilder = this.getUpsertRequestBuilder();
        result = result * PRIME + ($upsertRequestBuilder == null ? 43 : $upsertRequestBuilder.hashCode());
        final java.lang.Object $deleteRequestBuilder = this.getDeleteRequestBuilder();
        result = result * PRIME + ($deleteRequestBuilder == null ? 43 : $deleteRequestBuilder.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<Committer> getCommitters() {
        return this.committers;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EventManager getEventManager() {
        return this.eventManager;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Function<T, UpsertRequest> getUpsertRequestBuilder() {
        return this.upsertRequestBuilder;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Function<T, DeleteRequest> getDeleteRequestBuilder() {
        return this.deleteRequestBuilder;
    }
}
