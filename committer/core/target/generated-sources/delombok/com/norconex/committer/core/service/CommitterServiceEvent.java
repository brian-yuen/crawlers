// Generated by delombok at Fri Mar 08 16:23:51 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.core.service;

import java.util.List;
import java.util.stream.Collectors;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import com.norconex.committer.core.Committer;
import com.norconex.commons.lang.event.Event;

/**
 * Default committer events.
 */
public class CommitterServiceEvent extends Event {
    private static final long serialVersionUID = 1L;
    public static final String COMMITTER_SERVICE_INIT_BEGIN = "COMMITTER_SERVICE_INIT_BEGIN";
    public static final String COMMITTER_SERVICE_INIT_END = "COMMITTER_SERVICE_INIT_END";
    public static final String COMMITTER_SERVICE_UPSERT_BEGIN = "COMMITTER_SERVICE_UPSERT_BEGIN";
    public static final String COMMITTER_SERVICE_UPSERT_END = "COMMITTER_SERVICE_UPSERT_END";
    public static final String COMMITTER_SERVICE_DELETE_BEGIN = "COMMITTER_SERVICE_DELETE_BEGIN";
    public static final String COMMITTER_SERVICE_DELETE_END = "COMMITTER_SERVICE_DELETE_END";
    public static final String COMMITTER_SERVICE_CLEAN_BEGIN = "COMMITTER_SERVICE_CLEAN_BEGIN";
    public static final String COMMITTER_SERVICE_CLEAN_END = "COMMITTER_SERVICE_CLEAN_END";
    public static final String COMMITTER_SERVICE_CLOSE_BEGIN = "COMMITTER_SERVICE_CLOSE_BEGIN";
    public static final String COMMITTER_SERVICE_CLOSE_END = "COMMITTER_SERVICE_CLOSE_END";
    private final transient Object subject;
    private final transient List<Committer> committers;

    @Override
    public String toString() {
        // Cannot use ReflectionToStringBuilder here to prevent
        // "An illegal reflective access operation has occurred"
        return 
//                .appendSuper(super.toString())
        new ToStringBuilder(this, ToStringStyle.NO_CLASS_NAME_STYLE).append("committers", '[' + committers.stream().map(c -> c.getClass().getSimpleName()).collect(Collectors.joining(",")) + ']').append("subject", subject).build();
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static abstract class CommitterServiceEventBuilder<C extends CommitterServiceEvent, B extends CommitterServiceEvent.CommitterServiceEventBuilder<C, B>> extends Event.EventBuilder<C, B> {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Object subject;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private List<Committer> committers;

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B subject(final Object subject) {
            this.subject = subject;
            return self();
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B committers(final List<Committer> committers) {
            this.committers = committers;
            return self();
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected abstract B self();

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public abstract C build();

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "CommitterServiceEvent.CommitterServiceEventBuilder(super=" + super.toString() + ", subject=" + this.subject + ", committers=" + this.committers + ")";
        }
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final class CommitterServiceEventBuilderImpl extends CommitterServiceEvent.CommitterServiceEventBuilder<CommitterServiceEvent, CommitterServiceEvent.CommitterServiceEventBuilderImpl> {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private CommitterServiceEventBuilderImpl() {
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected CommitterServiceEvent.CommitterServiceEventBuilderImpl self() {
            return this;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public CommitterServiceEvent build() {
            return new CommitterServiceEvent(this);
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected CommitterServiceEvent(final CommitterServiceEvent.CommitterServiceEventBuilder<?, ?> b) {
        super(b);
        this.subject = b.subject;
        this.committers = b.committers;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static CommitterServiceEvent.CommitterServiceEventBuilder<?, ?> builder() {
        return new CommitterServiceEvent.CommitterServiceEventBuilderImpl();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Object getSubject() {
        return this.subject;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<Committer> getCommitters() {
        return this.committers;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof CommitterServiceEvent)) return false;
        final CommitterServiceEvent other = (CommitterServiceEvent) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof CommitterServiceEvent;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int result = super.hashCode();
        return result;
    }
}
