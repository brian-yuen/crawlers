// Generated by delombok at Fri Mar 08 16:23:50 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.core.batch.queue.impl;

import com.norconex.committer.core.batch.queue.impl.FSQueue.SplitBatch;

@SuppressWarnings("javadoc")
public class FSQueueConfig {
    public static final int DEFAULT_BATCH_SIZE = 20;
    public static final int DEFAULT_MAX_PER_FOLDER = 500;
    /**
     * The number of documents to be queued in a batch on disk before
     * consuming that batch.
     */
    private int batchSize = DEFAULT_BATCH_SIZE;
    /**
     * The maximum number of files to be queued on disk in a given folders.
     * A batch size can sometimes be too big for some file systems to handle
     * efficiently.  Having this number lower than the batch size allows
     * to have large batches without having too many files in a single
     * directory.
     */
    private int maxPerFolder = DEFAULT_MAX_PER_FOLDER;
    /**
     * Whether to attempt committing any file leftovers in the committer
     * queue from a previous session when the committer is initialized.
     * Leftovers are typically associated with an abnormal termination.
     */
    private boolean commitLeftoversOnInit = false;
    /**
     * Configuration only applicable when a commit fails.
     * @param onCommitFailure commit failure configuration
     */
    private final OnCommitFailure onCommitFailure = new OnCommitFailure();


    public static class OnCommitFailure {
        /**
         * Whether and how to split batches when re-attempting them.
         * See class documentation for details.
         * @param splitBatch split batch strategy
         * @return split batch strategy
         */
        private SplitBatch splitBatch = SplitBatch.OFF;
        /**
         * Maximum retries upon commit failures. Default is 0 (does not retry).
         * @param maxRetries maximum number of retries
         * @return maximum number of retries
         */
        private int maxRetries;
        /**
         * Delay in milliseconds between retries. Default is 0 (does not wait).
         * @param retryDelay delay between retries
         * @return delay between retries
         */
        private long retryDelay;
        /**
         * Whether to ignore non-critical errors in an attempt to keep going.
         * See class documentation for more details.
         * @param ignoreErrors <code>true</code> to ignore errors
         * @return <code>true</code> if ignoring errors
         */
        private boolean ignoreErrors;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public OnCommitFailure() {
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SplitBatch getSplitBatch() {
            return this.splitBatch;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getMaxRetries() {
            return this.maxRetries;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public long getRetryDelay() {
            return this.retryDelay;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean isIgnoreErrors() {
            return this.ignoreErrors;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public FSQueueConfig.OnCommitFailure setSplitBatch(final SplitBatch splitBatch) {
            this.splitBatch = splitBatch;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public FSQueueConfig.OnCommitFailure setMaxRetries(final int maxRetries) {
            this.maxRetries = maxRetries;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public FSQueueConfig.OnCommitFailure setRetryDelay(final long retryDelay) {
            this.retryDelay = retryDelay;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public FSQueueConfig.OnCommitFailure setIgnoreErrors(final boolean ignoreErrors) {
            this.ignoreErrors = ignoreErrors;
            return this;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof FSQueueConfig.OnCommitFailure)) return false;
            final FSQueueConfig.OnCommitFailure other = (FSQueueConfig.OnCommitFailure) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getMaxRetries() != other.getMaxRetries()) return false;
            if (this.getRetryDelay() != other.getRetryDelay()) return false;
            if (this.isIgnoreErrors() != other.isIgnoreErrors()) return false;
            final java.lang.Object this$splitBatch = this.getSplitBatch();
            final java.lang.Object other$splitBatch = other.getSplitBatch();
            if (this$splitBatch == null ? other$splitBatch != null : !this$splitBatch.equals(other$splitBatch)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof FSQueueConfig.OnCommitFailure;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + this.getMaxRetries();
            final long $retryDelay = this.getRetryDelay();
            result = result * PRIME + (int) ($retryDelay >>> 32 ^ $retryDelay);
            result = result * PRIME + (this.isIgnoreErrors() ? 79 : 97);
            final java.lang.Object $splitBatch = this.getSplitBatch();
            result = result * PRIME + ($splitBatch == null ? 43 : $splitBatch.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "FSQueueConfig.OnCommitFailure(splitBatch=" + this.getSplitBatch() + ", maxRetries=" + this.getMaxRetries() + ", retryDelay=" + this.getRetryDelay() + ", ignoreErrors=" + this.isIgnoreErrors() + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FSQueueConfig() {
    }

    /**
     * The number of documents to be queued in a batch on disk before
     * consuming that batch.
     * @return batch size
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getBatchSize() {
        return this.batchSize;
    }

    /**
     * The maximum number of files to be queued on disk in a given folders.
     * A batch size can sometimes be too big for some file systems to handle
     * efficiently.  Having this number lower than the batch size allows
     * to have large batches without having too many files in a single
     * directory.
     * @return maximum number of files queued per directory
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxPerFolder() {
        return this.maxPerFolder;
    }

    /**
     * Whether to attempt committing any file leftovers in the committer
     * queue from a previous session when the committer is initialized.
     * Leftovers are typically associated with an abnormal termination.
     * @return <code>true</code> if committing leftovers
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isCommitLeftoversOnInit() {
        return this.commitLeftoversOnInit;
    }

    /**
     * Configuration only applicable when a commit fails.
     * @return commit failure configuration
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OnCommitFailure getOnCommitFailure() {
        return this.onCommitFailure;
    }

    /**
     * The number of documents to be queued in a batch on disk before
     * consuming that batch.
     * @param batchSize the batch size
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FSQueueConfig setBatchSize(final int batchSize) {
        this.batchSize = batchSize;
        return this;
    }

    /**
     * The maximum number of files to be queued on disk in a given folders.
     * A batch size can sometimes be too big for some file systems to handle
     * efficiently.  Having this number lower than the batch size allows
     * to have large batches without having too many files in a single
     * directory.
     * @param maxPerFolder number of files queued per directory
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FSQueueConfig setMaxPerFolder(final int maxPerFolder) {
        this.maxPerFolder = maxPerFolder;
        return this;
    }

    /**
     * Whether to attempt committing any file leftovers in the committer
     * queue from a previous session when the committer is initialized.
     * Leftovers are typically associated with an abnormal termination.
     * @param commitLeftoversOnInit <code>true</code> to commit leftovers
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public FSQueueConfig setCommitLeftoversOnInit(final boolean commitLeftoversOnInit) {
        this.commitLeftoversOnInit = commitLeftoversOnInit;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof FSQueueConfig)) return false;
        final FSQueueConfig other = (FSQueueConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getBatchSize() != other.getBatchSize()) return false;
        if (this.getMaxPerFolder() != other.getMaxPerFolder()) return false;
        if (this.isCommitLeftoversOnInit() != other.isCommitLeftoversOnInit()) return false;
        final java.lang.Object this$onCommitFailure = this.getOnCommitFailure();
        final java.lang.Object other$onCommitFailure = other.getOnCommitFailure();
        if (this$onCommitFailure == null ? other$onCommitFailure != null : !this$onCommitFailure.equals(other$onCommitFailure)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof FSQueueConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getBatchSize();
        result = result * PRIME + this.getMaxPerFolder();
        result = result * PRIME + (this.isCommitLeftoversOnInit() ? 79 : 97);
        final java.lang.Object $onCommitFailure = this.getOnCommitFailure();
        result = result * PRIME + ($onCommitFailure == null ? 43 : $onCommitFailure.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "FSQueueConfig(batchSize=" + this.getBatchSize() + ", maxPerFolder=" + this.getMaxPerFolder() + ", commitLeftoversOnInit=" + this.isCommitLeftoversOnInit() + ", onCommitFailure=" + this.getOnCommitFailure() + ")";
    }
}
