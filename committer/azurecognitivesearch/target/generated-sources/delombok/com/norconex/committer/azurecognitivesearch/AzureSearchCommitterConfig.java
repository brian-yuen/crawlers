// Generated by delombok at Fri Mar 08 16:24:02 MST 2024
/* Copyright 2021-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.azurecognitivesearch;

import java.io.Serializable;
import com.norconex.committer.core.batch.BaseBatchCommitterConfig;
import com.norconex.commons.lang.net.ProxySettings;
import lombok.NonNull;

/**
 * <p>
 * Azure Search Committer configuration.
 * </p>
 * @author Pascal Essiembre
 */
@SuppressWarnings("javadoc")
public class AzureSearchCommitterConfig extends BaseBatchCommitterConfig implements Serializable {
    private static final long serialVersionUID = 1L;
    /**
     * Default Azure Search API version
     */
    public static final String DEFAULT_API_VERSION = "2020-06-30";
    /**
     * Default Azure Search document key field
     */
    public static final String DEFAULT_AZURE_KEY_FIELD = "id";
    /**
     * Default Azure Search content field
     */
    public static final String DEFAULT_AZURE_CONTENT_FIELD = "content";
    /**
     * Gets the Azure Search endpoint
     * (https://[service name].search.windows.net).
     */
    private String endpoint;
    /**
     * The Azure API version. Default is {@link #DEFAULT_API_VERSION}.
     */
    private String apiVersion = DEFAULT_API_VERSION;
    /**
     * The Azure API admin key.
     */
    private String apiKey;
    /**
     * The index name.
     */
    private String indexName;
    /**
     * Whether to disable document reference encoding. By default, references
     * are encoded using a URL-safe Base64 encoding.  When <code>true</code>,
     * document references will be sent as is if they pass validation.
     */
    private boolean disableDocKeyEncoding;
    /**
     * Whether to ignore validation errors.  By default, an exception is
     * thrown if a document contains a field that Azure Search will reject.
     * When <code>true</code> the validation errors are logged
     * instead and the faulty field or document is not committed.
     */
    private boolean ignoreValidationErrors;
    /**
     * Whether to ignore response errors.  By default, an exception is
     * thrown if the Azure Search response contains an error.
     * When <code>true</code> the errors are logged instead.
     */
    private boolean ignoreResponseErrors;
    /**
     * The fields which values should always be treated as array.
     * Expects a comma-separated-value list or regular expression, based
     * on the returned value of {@link #isArrayFieldsRegex()}.
     * @see #setArrayFieldsRegex(boolean)
     * @see #isArrayFieldsRegex()
     */
    private String arrayFields;
    /**
     * Whether the list of fields to be always treated as array
     * is represented as regular expression.
     * @see #setArrayFields(String)
     * @see #getArrayFields()
     */
    private boolean arrayFieldsRegex;
    /**
     * Whether to use integrated Windows Authentication (if applicable).
     */
    private boolean useWindowsAuth;
    private final ProxySettings proxySettings = new ProxySettings();
    /**
     * The document field name containing the value to be stored
     * in Azure Search document key field. Default is not a field
     * (<code>null</code>), but rather
     * the document reference.
     */
    private String sourceKeyField;
    /**
     * The name of Azure Search key field where to store a
     * document unique identifier (sourceKeyField).  Default is "id".
     */
    private String targetKeyField = DEFAULT_AZURE_KEY_FIELD;
    /**
     * The name of the Azure Search field where content will be stored.
     * Default is "content".
     * Specifying a <code>null</code> value will disable storing the content.
     */
    private String targetContentField = DEFAULT_AZURE_CONTENT_FIELD;

    /**
     * Gets the proxy settings.
     * @return proxy settings (never <code>null</code>).
     */
    public ProxySettings getProxySettings() {
        return proxySettings;
    }

    /**
     * Sets the proxy settings.
     * @param proxySettings proxy settings
     */
    public AzureSearchCommitterConfig setProxySettings(@NonNull ProxySettings proxySettings) {
        java.util.Objects.requireNonNull(proxySettings, "proxySettings is marked non-null but is null");
        this.proxySettings.copyFrom(proxySettings);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig() {
    }

    /**
     * Gets the Azure Search endpoint
     * (https://[service name].search.windows.net).
     * @return Azure Search endpoint
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The Azure API version. Default is {@link #DEFAULT_API_VERSION}.
     * @return the Azure API version
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The Azure API admin key.
     * @return Azure API admin key
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getApiKey() {
        return this.apiKey;
    }

    /**
     * The index name.
     * @return index name
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Whether to disable document reference encoding. By default, references
     * are encoded using a URL-safe Base64 encoding.  When <code>true</code>,
     * document references will be sent as is if they pass validation.
     * @return <code>true</code> if disabling reference encoding
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isDisableDocKeyEncoding() {
        return this.disableDocKeyEncoding;
    }

    /**
     * Whether to ignore validation errors.  By default, an exception is
     * thrown if a document contains a field that Azure Search will reject.
     * When <code>true</code> the validation errors are logged
     * instead and the faulty field or document is not committed.
     * @return <code>true</code> when ignoring validation errors
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isIgnoreValidationErrors() {
        return this.ignoreValidationErrors;
    }

    /**
     * Whether to ignore response errors.  By default, an exception is
     * thrown if the Azure Search response contains an error.
     * When <code>true</code> the errors are logged instead.
     * @return <code>true</code> when ignoring response errors
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isIgnoreResponseErrors() {
        return this.ignoreResponseErrors;
    }

    /**
     * The fields which values should always be treated as array.
     * Expects a comma-separated-value list or regular expression, based
     * on the returned value of {@link #isArrayFieldsRegex()}.
     * @return list of fields or regular expression matching fields
     * @see #setArrayFieldsRegex(boolean)
     * @see #isArrayFieldsRegex()
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getArrayFields() {
        return this.arrayFields;
    }

    /**
     * Whether the list of fields to be always treated as array
     * is represented as regular expression.
     * @return <code>true</code> if regular expression
     * @see #setArrayFields(String)
     * @see #getArrayFields()
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isArrayFieldsRegex() {
        return this.arrayFieldsRegex;
    }

    /**
     * Whether to use integrated Windows Authentication (if applicable).
     * @return <code>true</code> if using Windows Authentication
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isUseWindowsAuth() {
        return this.useWindowsAuth;
    }

    /**
     * The document field name containing the value to be stored
     * in Azure Search document key field. Default is not a field
     * (<code>null</code>), but rather
     * the document reference.
     * @return name of field containing id value
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceKeyField() {
        return this.sourceKeyField;
    }

    /**
     * The name of Azure Search key field where to store a
     * document unique identifier (sourceKeyField).  Default is "id".
     * @return name of Solr ID field
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTargetKeyField() {
        return this.targetKeyField;
    }

    /**
     * The name of the Azure Search field where content will be stored.
     * Default is "content".
     * Specifying a <code>null</code> value will disable storing the content.
     * @return field name
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTargetContentField() {
        return this.targetContentField;
    }

    /**
     * Gets the Azure Search endpoint
     * (https://[service name].search.windows.net).
     * @param endpoint Azure Search endpoint
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setEndpoint(final String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * The Azure API version. Default is {@link #DEFAULT_API_VERSION}.
     * @param apiVersion Azure API version
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setApiVersion(final String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * The Azure API admin key.
     * @param apiKey Azure API admin key
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setApiKey(final String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The index name.
     * @param indexName the index name
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setIndexName(final String indexName) {
        this.indexName = indexName;
        return this;
    }

    /**
     * Whether to disable document reference encoding. By default, references
     * are encoded using a URL-safe Base64 encoding.  When <code>true</code>,
     * document references will be sent as is if they pass validation.
     * @param disableDocKeyEncoding <code>true</code> if disabling
     *        reference encoding
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setDisableDocKeyEncoding(final boolean disableDocKeyEncoding) {
        this.disableDocKeyEncoding = disableDocKeyEncoding;
        return this;
    }

    /**
     * Whether to ignore validation errors.  By default, an exception is
     * thrown if a document contains a field that Azure Search will reject.
     * When <code>true</code> the validation errors are logged
     * instead and the faulty field or document is not committed.
     * @param ignoreValidationErrors <code>true</code> when ignoring validation
     *        errors
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setIgnoreValidationErrors(final boolean ignoreValidationErrors) {
        this.ignoreValidationErrors = ignoreValidationErrors;
        return this;
    }

    /**
     * Whether to ignore response errors.  By default, an exception is
     * thrown if the Azure Search response contains an error.
     * When <code>true</code> the errors are logged instead.
     * @param ignoreResponseErrors <code>true</code> when ignoring response
     *        errors
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setIgnoreResponseErrors(final boolean ignoreResponseErrors) {
        this.ignoreResponseErrors = ignoreResponseErrors;
        return this;
    }

    /**
     * The fields which values should always be treated as array.
     * Expects a comma-separated-value list or regular expression, based
     * on the returned value of {@link #isArrayFieldsRegex()}.
     * @param arrayFields list of fields or regular expression matching fields
     * @see #setArrayFieldsRegex(boolean)
     * @see #isArrayFieldsRegex()
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setArrayFields(final String arrayFields) {
        this.arrayFields = arrayFields;
        return this;
    }

    /**
     * Whether the list of fields to be always treated as array
     * is represented as regular expression.
     * @param arrayFieldsRegex <code>true</code> if regular expression
     * @see #setArrayFields(String)
     * @see #getArrayFields()
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setArrayFieldsRegex(final boolean arrayFieldsRegex) {
        this.arrayFieldsRegex = arrayFieldsRegex;
        return this;
    }

    /**
     * Whether to use integrated Windows Authentication (if applicable).
     * @param useWindowsAuth <code>true</code> if using Windows Authentication
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setUseWindowsAuth(final boolean useWindowsAuth) {
        this.useWindowsAuth = useWindowsAuth;
        return this;
    }

    /**
     * The document field name containing the value to be stored
     * in Azure Search document key field. Default is not a field
     * (<code>null</code>), but rather
     * the document reference.
     * @param sourceKeyField name of field containing id value,
     *        or <code>null</code>
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setSourceKeyField(final String sourceKeyField) {
        this.sourceKeyField = sourceKeyField;
        return this;
    }

    /**
     * The name of Azure Search key field where to store a
     * document unique identifier (sourceKeyField).  Default is "id".
     * @param targetKeyField name of Solr ID field
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setTargetKeyField(final String targetKeyField) {
        this.targetKeyField = targetKeyField;
        return this;
    }

    /**
     * The name of the Azure Search field where content will be stored.
     * Default is "content".
     * Specifying a <code>null</code> value will disable storing the content.
     * @param targetContentField field name
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AzureSearchCommitterConfig setTargetContentField(final String targetContentField) {
        this.targetContentField = targetContentField;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof AzureSearchCommitterConfig)) return false;
        final AzureSearchCommitterConfig other = (AzureSearchCommitterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.isDisableDocKeyEncoding() != other.isDisableDocKeyEncoding()) return false;
        if (this.isIgnoreValidationErrors() != other.isIgnoreValidationErrors()) return false;
        if (this.isIgnoreResponseErrors() != other.isIgnoreResponseErrors()) return false;
        if (this.isArrayFieldsRegex() != other.isArrayFieldsRegex()) return false;
        if (this.isUseWindowsAuth() != other.isUseWindowsAuth()) return false;
        final java.lang.Object this$endpoint = this.getEndpoint();
        final java.lang.Object other$endpoint = other.getEndpoint();
        if (this$endpoint == null ? other$endpoint != null : !this$endpoint.equals(other$endpoint)) return false;
        final java.lang.Object this$apiVersion = this.getApiVersion();
        final java.lang.Object other$apiVersion = other.getApiVersion();
        if (this$apiVersion == null ? other$apiVersion != null : !this$apiVersion.equals(other$apiVersion)) return false;
        final java.lang.Object this$apiKey = this.getApiKey();
        final java.lang.Object other$apiKey = other.getApiKey();
        if (this$apiKey == null ? other$apiKey != null : !this$apiKey.equals(other$apiKey)) return false;
        final java.lang.Object this$indexName = this.getIndexName();
        final java.lang.Object other$indexName = other.getIndexName();
        if (this$indexName == null ? other$indexName != null : !this$indexName.equals(other$indexName)) return false;
        final java.lang.Object this$arrayFields = this.getArrayFields();
        final java.lang.Object other$arrayFields = other.getArrayFields();
        if (this$arrayFields == null ? other$arrayFields != null : !this$arrayFields.equals(other$arrayFields)) return false;
        final java.lang.Object this$proxySettings = this.getProxySettings();
        final java.lang.Object other$proxySettings = other.getProxySettings();
        if (this$proxySettings == null ? other$proxySettings != null : !this$proxySettings.equals(other$proxySettings)) return false;
        final java.lang.Object this$sourceKeyField = this.getSourceKeyField();
        final java.lang.Object other$sourceKeyField = other.getSourceKeyField();
        if (this$sourceKeyField == null ? other$sourceKeyField != null : !this$sourceKeyField.equals(other$sourceKeyField)) return false;
        final java.lang.Object this$targetKeyField = this.getTargetKeyField();
        final java.lang.Object other$targetKeyField = other.getTargetKeyField();
        if (this$targetKeyField == null ? other$targetKeyField != null : !this$targetKeyField.equals(other$targetKeyField)) return false;
        final java.lang.Object this$targetContentField = this.getTargetContentField();
        final java.lang.Object other$targetContentField = other.getTargetContentField();
        if (this$targetContentField == null ? other$targetContentField != null : !this$targetContentField.equals(other$targetContentField)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof AzureSearchCommitterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + (this.isDisableDocKeyEncoding() ? 79 : 97);
        result = result * PRIME + (this.isIgnoreValidationErrors() ? 79 : 97);
        result = result * PRIME + (this.isIgnoreResponseErrors() ? 79 : 97);
        result = result * PRIME + (this.isArrayFieldsRegex() ? 79 : 97);
        result = result * PRIME + (this.isUseWindowsAuth() ? 79 : 97);
        final java.lang.Object $endpoint = this.getEndpoint();
        result = result * PRIME + ($endpoint == null ? 43 : $endpoint.hashCode());
        final java.lang.Object $apiVersion = this.getApiVersion();
        result = result * PRIME + ($apiVersion == null ? 43 : $apiVersion.hashCode());
        final java.lang.Object $apiKey = this.getApiKey();
        result = result * PRIME + ($apiKey == null ? 43 : $apiKey.hashCode());
        final java.lang.Object $indexName = this.getIndexName();
        result = result * PRIME + ($indexName == null ? 43 : $indexName.hashCode());
        final java.lang.Object $arrayFields = this.getArrayFields();
        result = result * PRIME + ($arrayFields == null ? 43 : $arrayFields.hashCode());
        final java.lang.Object $proxySettings = this.getProxySettings();
        result = result * PRIME + ($proxySettings == null ? 43 : $proxySettings.hashCode());
        final java.lang.Object $sourceKeyField = this.getSourceKeyField();
        result = result * PRIME + ($sourceKeyField == null ? 43 : $sourceKeyField.hashCode());
        final java.lang.Object $targetKeyField = this.getTargetKeyField();
        result = result * PRIME + ($targetKeyField == null ? 43 : $targetKeyField.hashCode());
        final java.lang.Object $targetContentField = this.getTargetContentField();
        result = result * PRIME + ($targetContentField == null ? 43 : $targetContentField.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "AzureSearchCommitterConfig(super=" + super.toString() + ", endpoint=" + this.getEndpoint() + ", apiVersion=" + this.getApiVersion() + ", apiKey=" + this.getApiKey() + ", indexName=" + this.getIndexName() + ", disableDocKeyEncoding=" + this.isDisableDocKeyEncoding() + ", ignoreValidationErrors=" + this.isIgnoreValidationErrors() + ", ignoreResponseErrors=" + this.isIgnoreResponseErrors() + ", arrayFields=" + this.getArrayFields() + ", arrayFieldsRegex=" + this.isArrayFieldsRegex() + ", useWindowsAuth=" + this.isUseWindowsAuth() + ", proxySettings=" + this.getProxySettings() + ", sourceKeyField=" + this.getSourceKeyField() + ", targetKeyField=" + this.getTargetKeyField() + ", targetContentField=" + this.getTargetContentField() + ")";
    }
}
