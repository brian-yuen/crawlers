// Generated by delombok at Fri Mar 08 16:24:08 MST 2024
/* Copyright 2020-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.idol;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import com.norconex.committer.core.batch.BaseBatchCommitterConfig;

/**
 * IDOL Committer configuration.
 * @author Pascal Essiembre
 */
@SuppressWarnings("javadoc")
public class IdolCommitterConfig extends BaseBatchCommitterConfig implements Serializable {
    private static final long serialVersionUID = 1L;
    public static final String DEFAULT_URL = "http://localhost:9001";
    /**
     * Gets the <code>DREADDDATA</code> optional URL parameters.
     */
    private final Map<String, String> dreAddDataParams = new HashMap<>();
    /**
     * Gets the <code>DREDELETEREF</code> optional URL parameters.
     */
    private final Map<String, String> dreDeleteRefParams = new HashMap<>();
    /**
     * The IDOL database name.
     */
    private String databaseName;
    /**
     * The IDOL index URL (default is <code>http://localhost:9001</code>).
     */
    private String url = DEFAULT_URL;
    /**
     * Whether the IDOL index URL points to a Connector Framework Server
     * (CFS).
     */
    private boolean cfs;
    /**
     * The document field name containing the value to be stored
     * in IDOL <code>DREREFERENCE</code> field. Set to <code>null</code>
     * in order to use the document reference instead of a field (default).
     */
    private String sourceReferenceField;
    /**
     * The document field name containing the value to be stored
     * in IDOL <code>DRECONTENT</code> field. Set to <code>null</code> in
     * order to use the document content stream instead of a field (default).
     */
    private String sourceContentField;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public IdolCommitterConfig() {
    }

    /**
     * Gets the <code>DREADDDATA</code> optional URL parameters.
     * @return URL parameters (key=parameter name; value=parameter value)
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Map<String, String> getDreAddDataParams() {
        return this.dreAddDataParams;
    }

    /**
     * Gets the <code>DREDELETEREF</code> optional URL parameters.
     * @return URL parameters (key=parameter name; value=parameter value)
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Map<String, String> getDreDeleteRefParams() {
        return this.dreDeleteRefParams;
    }

    /**
     * The IDOL database name.
     * @return IDOL database name
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDatabaseName() {
        return this.databaseName;
    }

    /**
     * The IDOL index URL (default is <code>http://localhost:9001</code>).
     * @return IDOL URL
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Whether the IDOL index URL points to a Connector Framework Server
     * (CFS).
     * @return <code>true</code> if committing to a CFS server
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isCfs() {
        return this.cfs;
    }

    /**
     * The document field name containing the value to be stored
     * in IDOL <code>DREREFERENCE</code> field. Set to <code>null</code>
     * in order to use the document reference instead of a field (default).
     * @return name of field containing id value
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceReferenceField() {
        return this.sourceReferenceField;
    }

    /**
     * The document field name containing the value to be stored
     * in IDOL <code>DRECONTENT</code> field. Set to <code>null</code> in
     * order to use the document content stream instead of a field (default).
     * @return name of field containing content value
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceContentField() {
        return this.sourceContentField;
    }

    /**
     * The IDOL database name.
     * @param databaseName IDOL database name
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public IdolCommitterConfig setDatabaseName(final String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * The IDOL index URL (default is <code>http://localhost:9001</code>).
     * @param url the IDOL URL
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public IdolCommitterConfig setUrl(final String url) {
        this.url = url;
        return this;
    }

    /**
     * Whether the IDOL index URL points to a Connector Framework Server
     * (CFS).
     * @param cfs <code>true</code> if committing to a CFS server
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public IdolCommitterConfig setCfs(final boolean cfs) {
        this.cfs = cfs;
        return this;
    }

    /**
     * The document field name containing the value to be stored
     * in IDOL <code>DREREFERENCE</code> field. Set to <code>null</code>
     * in order to use the document reference instead of a field (default).
     * @param sourceReferenceField name of field containing reference value,
     *        or <code>null</code>
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public IdolCommitterConfig setSourceReferenceField(final String sourceReferenceField) {
        this.sourceReferenceField = sourceReferenceField;
        return this;
    }

    /**
     * The document field name containing the value to be stored
     * in IDOL <code>DRECONTENT</code> field. Set to <code>null</code> in
     * order to use the document content stream instead of a field (default).
     * @param sourceContentField name of field containing content value,
     *        or <code>null</code>
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public IdolCommitterConfig setSourceContentField(final String sourceContentField) {
        this.sourceContentField = sourceContentField;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof IdolCommitterConfig)) return false;
        final IdolCommitterConfig other = (IdolCommitterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.isCfs() != other.isCfs()) return false;
        final java.lang.Object this$dreAddDataParams = this.getDreAddDataParams();
        final java.lang.Object other$dreAddDataParams = other.getDreAddDataParams();
        if (this$dreAddDataParams == null ? other$dreAddDataParams != null : !this$dreAddDataParams.equals(other$dreAddDataParams)) return false;
        final java.lang.Object this$dreDeleteRefParams = this.getDreDeleteRefParams();
        final java.lang.Object other$dreDeleteRefParams = other.getDreDeleteRefParams();
        if (this$dreDeleteRefParams == null ? other$dreDeleteRefParams != null : !this$dreDeleteRefParams.equals(other$dreDeleteRefParams)) return false;
        final java.lang.Object this$databaseName = this.getDatabaseName();
        final java.lang.Object other$databaseName = other.getDatabaseName();
        if (this$databaseName == null ? other$databaseName != null : !this$databaseName.equals(other$databaseName)) return false;
        final java.lang.Object this$url = this.getUrl();
        final java.lang.Object other$url = other.getUrl();
        if (this$url == null ? other$url != null : !this$url.equals(other$url)) return false;
        final java.lang.Object this$sourceReferenceField = this.getSourceReferenceField();
        final java.lang.Object other$sourceReferenceField = other.getSourceReferenceField();
        if (this$sourceReferenceField == null ? other$sourceReferenceField != null : !this$sourceReferenceField.equals(other$sourceReferenceField)) return false;
        final java.lang.Object this$sourceContentField = this.getSourceContentField();
        final java.lang.Object other$sourceContentField = other.getSourceContentField();
        if (this$sourceContentField == null ? other$sourceContentField != null : !this$sourceContentField.equals(other$sourceContentField)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof IdolCommitterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + (this.isCfs() ? 79 : 97);
        final java.lang.Object $dreAddDataParams = this.getDreAddDataParams();
        result = result * PRIME + ($dreAddDataParams == null ? 43 : $dreAddDataParams.hashCode());
        final java.lang.Object $dreDeleteRefParams = this.getDreDeleteRefParams();
        result = result * PRIME + ($dreDeleteRefParams == null ? 43 : $dreDeleteRefParams.hashCode());
        final java.lang.Object $databaseName = this.getDatabaseName();
        result = result * PRIME + ($databaseName == null ? 43 : $databaseName.hashCode());
        final java.lang.Object $url = this.getUrl();
        result = result * PRIME + ($url == null ? 43 : $url.hashCode());
        final java.lang.Object $sourceReferenceField = this.getSourceReferenceField();
        result = result * PRIME + ($sourceReferenceField == null ? 43 : $sourceReferenceField.hashCode());
        final java.lang.Object $sourceContentField = this.getSourceContentField();
        result = result * PRIME + ($sourceContentField == null ? 43 : $sourceContentField.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "IdolCommitterConfig(super=" + super.toString() + ", dreAddDataParams=" + this.getDreAddDataParams() + ", dreDeleteRefParams=" + this.getDreDeleteRefParams() + ", databaseName=" + this.getDatabaseName() + ", url=" + this.getUrl() + ", cfs=" + this.isCfs() + ", sourceReferenceField=" + this.getSourceReferenceField() + ", sourceContentField=" + this.getSourceContentField() + ")";
    }
}
