// Generated by delombok at Fri Mar 08 16:24:05 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.committer.elasticsearch;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import com.norconex.committer.core.batch.BaseBatchCommitterConfig;
import com.norconex.commons.lang.collection.CollectionUtil;
import com.norconex.commons.lang.security.Credentials;
import lombok.NonNull;

@SuppressWarnings("javadoc")
public class ElasticsearchCommitterConfig extends BaseBatchCommitterConfig {
    public static final String DEFAULT_ELASTICSEARCH_CONTENT_FIELD = "content";
    public static final String DEFAULT_NODE = "http://localhost:9200";
    /**
     * 1 second.
     */
    public static final Duration DEFAULT_CONNECTION_TIMEOUT = Duration.ofSeconds(1);
    /**
     * 30 seconds.
     */
    public static final Duration DEFAULT_SOCKET_TIMEOUT = Duration.ofSeconds(30);
    /**
     * One or more Elasticsearch nodes to connect to.
     * Defaults to {@value ElasticsearchCommitterConfig#DEFAULT_NODE}
     * @param nodes elastic nodes
     * @return elastic nodes
     */
    private final List<String> nodes = new ArrayList<>(List.of(DEFAULT_NODE));
    /**
     * The Elasticsearch index name.
     */
    private String indexName;
    /**
     * The type name. Type name is deprecated if you
     * are using Elasticsearch 7.0 or higher and should be <code>null</code>.
     */
    private String typeName;
    /**
     * Whether to ignore response errors.  By default, an exception is
     * thrown if the Elasticsearch response contains an error.
     * When <code>true</code> the errors are logged instead.
     */
    private boolean ignoreResponseErrors;
    /**
     * Whether automatic discovery of Elasticsearch cluster nodes should be
     * enabled.
     */
    private boolean discoverNodes;
    /**
     * Elasticsearch credentials, if applicable.
     * @param credentials Elasticsearch credentials
     * @return Elasticsearch credentials
     */
    private final Credentials credentials = new Credentials();
    /**
     * The character used to replace dots in field names.
     * Default is <code>null</code> (does not replace dots).
     */
    private String dotReplacement;
    /**
     * The regular expression matching fields that contains a JSON
     * object for its value (as opposed to a regular string).
     * Default is <code>null</code>.
     */
    private String jsonFieldsPattern;
    /**
     * Elasticsearch connection timeout. Defaults to
     * {@link ElasticsearchCommitterConfig#DEFAULT_CONNECTION_TIMEOUT}
     */
    @NonNull
    private Duration connectionTimeout = DEFAULT_CONNECTION_TIMEOUT;
    /**
     * Elasticsearch socket timeout.
     */
    @NonNull
    private Duration socketTimeout = DEFAULT_SOCKET_TIMEOUT;
    /**
     * Whether to fix IDs that are too long for Elasticsearch
     * ID limitation (512 bytes max). If <code>true</code>,
     * long IDs will be truncated and a hash code representing the
     * truncated part will be appended.
     */
    private boolean fixBadIds;
    /**
     * The document field name containing the value to be stored
     * in Elasticsearch "_id" field. Set to <code>null</code> to use the
     * document reference instead of a field (default).
     */
    private String sourceIdField;
    /**
     * The name of the Elasticsearch field where content will be stored.
     * Default is "content". A <code>null</code> value disables storing
     * the content.
     */
    private String targetContentField = DEFAULT_ELASTICSEARCH_CONTENT_FIELD;

    /**
     * Gets an unmodifiable list of Elasticsearch cluster node URLs.
     * Defaults to "http://localhost:9200".
     * @return Elasticsearch nodes
     */
    public List<String> getNodes() {
        return Collections.unmodifiableList(nodes);
    }

    /**
     * Sets cluster node URLs.
     * Node URLs with no port are assumed to be using port 80.
     * @param nodes Elasticsearch cluster nodes
     */
    public void setNodes(List<String> nodes) {
        CollectionUtil.setAll(this.nodes, nodes);
    }

    /**
     * Gets Elasticsearch authentication credentials.
     * @return credentials
     */
    public Credentials getCredentials() {
        return credentials;
    }

    /**
     * Sets Elasticsearch authentication credentials.
     * @param credentials the credentials
     */
    public void setCredentials(Credentials credentials) {
        this.credentials.copyFrom(credentials);
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig() {
    }

    /**
     * The Elasticsearch index name.
     * @return index name
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * The type name. Type name is deprecated if you
     * are using Elasticsearch 7.0 or higher and should be <code>null</code>.
     * @return type name
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTypeName() {
        return this.typeName;
    }

    /**
     * Whether to ignore response errors.  By default, an exception is
     * thrown if the Elasticsearch response contains an error.
     * When <code>true</code> the errors are logged instead.
     * @return <code>true</code> when ignoring response errors
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isIgnoreResponseErrors() {
        return this.ignoreResponseErrors;
    }

    /**
     * Whether automatic discovery of Elasticsearch cluster nodes should be
     * enabled.
     * @return <code>true</code> if enabled
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isDiscoverNodes() {
        return this.discoverNodes;
    }

    /**
     * The character used to replace dots in field names.
     * Default is <code>null</code> (does not replace dots).
     * @return replacement character or <code>null</code>
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDotReplacement() {
        return this.dotReplacement;
    }

    /**
     * The regular expression matching fields that contains a JSON
     * object for its value (as opposed to a regular string).
     * Default is <code>null</code>.
     * @return regular expression
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getJsonFieldsPattern() {
        return this.jsonFieldsPattern;
    }

    /**
     * Elasticsearch connection timeout. Defaults to
     * {@link ElasticsearchCommitterConfig#DEFAULT_CONNECTION_TIMEOUT}
     * @return connection duration
     */
    @NonNull
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Duration getConnectionTimeout() {
        return this.connectionTimeout;
    }

    /**
     * Elasticsearch socket timeout.
     * @return socket timeout duration
     */
    @NonNull
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Duration getSocketTimeout() {
        return this.socketTimeout;
    }

    /**
     * Whether to fix IDs that are too long for Elasticsearch
     * ID limitation (512 bytes max). If <code>true</code>,
     * long IDs will be truncated and a hash code representing the
     * truncated part will be appended.
     * @return <code>true</code> to fix IDs that are too long
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isFixBadIds() {
        return this.fixBadIds;
    }

    /**
     * The document field name containing the value to be stored
     * in Elasticsearch "_id" field. Set to <code>null</code> to use the
     * document reference instead of a field (default).
     * @return name of field containing id value
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceIdField() {
        return this.sourceIdField;
    }

    /**
     * The name of the Elasticsearch field where content will be stored.
     * Default is "content". A <code>null</code> value disables storing
     * the content.
     * @return Elasticsearch content field name
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTargetContentField() {
        return this.targetContentField;
    }

    /**
     * The Elasticsearch index name.
     * @param indexName the index name
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setIndexName(final String indexName) {
        this.indexName = indexName;
        return this;
    }

    /**
     * The type name. Type name is deprecated if you
     * are using Elasticsearch 7.0 or higher and should be <code>null</code>.
     * @param typeName type name
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setTypeName(final String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Whether to ignore response errors.  By default, an exception is
     * thrown if the Elasticsearch response contains an error.
     * When <code>true</code> the errors are logged instead.
     * @param ignoreResponseErrors <code>true</code> when ignoring response
     *        errors
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setIgnoreResponseErrors(final boolean ignoreResponseErrors) {
        this.ignoreResponseErrors = ignoreResponseErrors;
        return this;
    }

    /**
     * Whether automatic discovery of Elasticsearch cluster nodes should be
     * enabled.
     * @param discoverNodes <code>true</code> if enabled
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setDiscoverNodes(final boolean discoverNodes) {
        this.discoverNodes = discoverNodes;
        return this;
    }

    /**
     * The character used to replace dots in field names.
     * Default is <code>null</code> (does not replace dots).
     * @param dotReplacement replacement character or <code>null</code>
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setDotReplacement(final String dotReplacement) {
        this.dotReplacement = dotReplacement;
        return this;
    }

    /**
     * The regular expression matching fields that contains a JSON
     * object for its value (as opposed to a regular string).
     * Default is <code>null</code>.
     * @param jsonFieldsPattern regular expression
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setJsonFieldsPattern(final String jsonFieldsPattern) {
        this.jsonFieldsPattern = jsonFieldsPattern;
        return this;
    }

    /**
     * Elasticsearch connection timeout. Defaults to
     * {@link ElasticsearchCommitterConfig#DEFAULT_CONNECTION_TIMEOUT}
     * @param connectionTimeout connection timeout duration
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setConnectionTimeout(@NonNull final Duration connectionTimeout) {
        java.util.Objects.requireNonNull(connectionTimeout, "connectionTimeout is marked non-null but is null");
        this.connectionTimeout = connectionTimeout;
        return this;
    }

    /**
     * Elasticsearch socket timeout.
     * @param socketTimeout socket timeout duration
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setSocketTimeout(@NonNull final Duration socketTimeout) {
        java.util.Objects.requireNonNull(socketTimeout, "socketTimeout is marked non-null but is null");
        this.socketTimeout = socketTimeout;
        return this;
    }

    /**
     * Whether to fix IDs that are too long for Elasticsearch
     * ID limitation (512 bytes max). If <code>true</code>,
     * long IDs will be truncated and a hash code representing the
     * truncated part will be appended.
     * @param fixBadIds <code>true</code> to fix IDs that are too long
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setFixBadIds(final boolean fixBadIds) {
        this.fixBadIds = fixBadIds;
        return this;
    }

    /**
     * The document field name containing the value to be stored
     * in Elasticsearch "_id" field. Set to <code>null</code> to use the
     * document reference instead of a field (default).
     * @param sourceIdField name of source document field containing id value,
     *        or <code>null</code>
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setSourceIdField(final String sourceIdField) {
        this.sourceIdField = sourceIdField;
        return this;
    }

    /**
     * The name of the Elasticsearch field where content will be stored.
     * Default is "content". A <code>null</code> value disables storing
     * the content.
     * @param targetContentField Elasticsearch content field name
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticsearchCommitterConfig setTargetContentField(final String targetContentField) {
        this.targetContentField = targetContentField;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ElasticsearchCommitterConfig)) return false;
        final ElasticsearchCommitterConfig other = (ElasticsearchCommitterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.isIgnoreResponseErrors() != other.isIgnoreResponseErrors()) return false;
        if (this.isDiscoverNodes() != other.isDiscoverNodes()) return false;
        if (this.isFixBadIds() != other.isFixBadIds()) return false;
        final java.lang.Object this$nodes = this.getNodes();
        final java.lang.Object other$nodes = other.getNodes();
        if (this$nodes == null ? other$nodes != null : !this$nodes.equals(other$nodes)) return false;
        final java.lang.Object this$indexName = this.getIndexName();
        final java.lang.Object other$indexName = other.getIndexName();
        if (this$indexName == null ? other$indexName != null : !this$indexName.equals(other$indexName)) return false;
        final java.lang.Object this$typeName = this.getTypeName();
        final java.lang.Object other$typeName = other.getTypeName();
        if (this$typeName == null ? other$typeName != null : !this$typeName.equals(other$typeName)) return false;
        final java.lang.Object this$credentials = this.getCredentials();
        final java.lang.Object other$credentials = other.getCredentials();
        if (this$credentials == null ? other$credentials != null : !this$credentials.equals(other$credentials)) return false;
        final java.lang.Object this$dotReplacement = this.getDotReplacement();
        final java.lang.Object other$dotReplacement = other.getDotReplacement();
        if (this$dotReplacement == null ? other$dotReplacement != null : !this$dotReplacement.equals(other$dotReplacement)) return false;
        final java.lang.Object this$jsonFieldsPattern = this.getJsonFieldsPattern();
        final java.lang.Object other$jsonFieldsPattern = other.getJsonFieldsPattern();
        if (this$jsonFieldsPattern == null ? other$jsonFieldsPattern != null : !this$jsonFieldsPattern.equals(other$jsonFieldsPattern)) return false;
        final java.lang.Object this$connectionTimeout = this.getConnectionTimeout();
        final java.lang.Object other$connectionTimeout = other.getConnectionTimeout();
        if (this$connectionTimeout == null ? other$connectionTimeout != null : !this$connectionTimeout.equals(other$connectionTimeout)) return false;
        final java.lang.Object this$socketTimeout = this.getSocketTimeout();
        final java.lang.Object other$socketTimeout = other.getSocketTimeout();
        if (this$socketTimeout == null ? other$socketTimeout != null : !this$socketTimeout.equals(other$socketTimeout)) return false;
        final java.lang.Object this$sourceIdField = this.getSourceIdField();
        final java.lang.Object other$sourceIdField = other.getSourceIdField();
        if (this$sourceIdField == null ? other$sourceIdField != null : !this$sourceIdField.equals(other$sourceIdField)) return false;
        final java.lang.Object this$targetContentField = this.getTargetContentField();
        final java.lang.Object other$targetContentField = other.getTargetContentField();
        if (this$targetContentField == null ? other$targetContentField != null : !this$targetContentField.equals(other$targetContentField)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ElasticsearchCommitterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + (this.isIgnoreResponseErrors() ? 79 : 97);
        result = result * PRIME + (this.isDiscoverNodes() ? 79 : 97);
        result = result * PRIME + (this.isFixBadIds() ? 79 : 97);
        final java.lang.Object $nodes = this.getNodes();
        result = result * PRIME + ($nodes == null ? 43 : $nodes.hashCode());
        final java.lang.Object $indexName = this.getIndexName();
        result = result * PRIME + ($indexName == null ? 43 : $indexName.hashCode());
        final java.lang.Object $typeName = this.getTypeName();
        result = result * PRIME + ($typeName == null ? 43 : $typeName.hashCode());
        final java.lang.Object $credentials = this.getCredentials();
        result = result * PRIME + ($credentials == null ? 43 : $credentials.hashCode());
        final java.lang.Object $dotReplacement = this.getDotReplacement();
        result = result * PRIME + ($dotReplacement == null ? 43 : $dotReplacement.hashCode());
        final java.lang.Object $jsonFieldsPattern = this.getJsonFieldsPattern();
        result = result * PRIME + ($jsonFieldsPattern == null ? 43 : $jsonFieldsPattern.hashCode());
        final java.lang.Object $connectionTimeout = this.getConnectionTimeout();
        result = result * PRIME + ($connectionTimeout == null ? 43 : $connectionTimeout.hashCode());
        final java.lang.Object $socketTimeout = this.getSocketTimeout();
        result = result * PRIME + ($socketTimeout == null ? 43 : $socketTimeout.hashCode());
        final java.lang.Object $sourceIdField = this.getSourceIdField();
        result = result * PRIME + ($sourceIdField == null ? 43 : $sourceIdField.hashCode());
        final java.lang.Object $targetContentField = this.getTargetContentField();
        result = result * PRIME + ($targetContentField == null ? 43 : $targetContentField.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ElasticsearchCommitterConfig(super=" + super.toString() + ", nodes=" + this.getNodes() + ", indexName=" + this.getIndexName() + ", typeName=" + this.getTypeName() + ", ignoreResponseErrors=" + this.isIgnoreResponseErrors() + ", discoverNodes=" + this.isDiscoverNodes() + ", credentials=" + this.getCredentials() + ", dotReplacement=" + this.getDotReplacement() + ", jsonFieldsPattern=" + this.getJsonFieldsPattern() + ", connectionTimeout=" + this.getConnectionTimeout() + ", socketTimeout=" + this.getSocketTimeout() + ", fixBadIds=" + this.isFixBadIds() + ", sourceIdField=" + this.getSourceIdField() + ", targetContentField=" + this.getTargetContentField() + ")";
    }
}
