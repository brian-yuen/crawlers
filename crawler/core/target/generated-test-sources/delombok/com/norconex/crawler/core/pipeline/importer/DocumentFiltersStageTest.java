// Generated by delombok at Fri Mar 08 16:24:35 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.pipeline.importer;

import static org.assertj.core.api.Assertions.assertThat;
import java.nio.file.Path;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import com.norconex.crawler.core.CoreStubber;
import com.norconex.crawler.core.filter.DocumentFilter;
import com.norconex.crawler.core.filter.OnMatch;
import com.norconex.crawler.core.filter.OnMatchFilter;
import com.norconex.importer.doc.Doc;

class DocumentFiltersStageTest {
    @TempDir
    private Path tempDir;

    @Test
    void testDocumentFiltersStage() {
        var doc = CoreStubber.crawlDoc("ref");
        var crawler = CoreStubber.crawler(tempDir);
        var ctx = new ImporterPipelineContext(crawler, doc);
        var stage = new DocumentFiltersStage();
        // no filters is equal to a match
        assertThat(stage.test(ctx)).isTrue();
        // test match
        crawler.getConfiguration().setDocumentFilters(List.of(new TestFilter(OnMatch.INCLUDE, true)));
        assertThat(stage.test(ctx)).isTrue();
        // test no match
        crawler.getConfiguration().setDocumentFilters(List.of(new TestFilter(OnMatch.INCLUDE, false)));
        assertThat(stage.test(ctx)).isFalse();
        // exclude
        crawler.getConfiguration().setDocumentFilters(List.of(new TestFilter(OnMatch.EXCLUDE, false)));
        assertThat(stage.test(ctx)).isFalse();
    }


    static class TestFilter implements DocumentFilter, OnMatchFilter {
        private OnMatch onMatch;
        private boolean accepts;

        @Override
        public boolean acceptDocument(Doc document) {
            return accepts;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public OnMatch getOnMatch() {
            return this.onMatch;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean isAccepts() {
            return this.accepts;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setOnMatch(final OnMatch onMatch) {
            this.onMatch = onMatch;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setAccepts(final boolean accepts) {
            this.accepts = accepts;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof DocumentFiltersStageTest.TestFilter)) return false;
            final DocumentFiltersStageTest.TestFilter other = (DocumentFiltersStageTest.TestFilter) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.isAccepts() != other.isAccepts()) return false;
            final java.lang.Object this$onMatch = this.getOnMatch();
            final java.lang.Object other$onMatch = other.getOnMatch();
            if (this$onMatch == null ? other$onMatch != null : !this$onMatch.equals(other$onMatch)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof DocumentFiltersStageTest.TestFilter;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + (this.isAccepts() ? 79 : 97);
            final java.lang.Object $onMatch = this.getOnMatch();
            result = result * PRIME + ($onMatch == null ? 43 : $onMatch.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "DocumentFiltersStageTest.TestFilter(onMatch=" + this.getOnMatch() + ", accepts=" + this.isAccepts() + ")";
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public TestFilter(final OnMatch onMatch, final boolean accepts) {
            this.onMatch = onMatch;
            this.accepts = accepts;
        }
    }
}
