// Generated by delombok at Fri Mar 08 16:24:35 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.fetch;

import static org.assertj.core.api.Assertions.assertThat;
import java.util.List;
import org.junit.jupiter.api.Test;
import com.norconex.crawler.core.doc.CrawlDocState;

class MultiFetchResponseTest {

    static class TestResponse implements FetchResponse {
        private final String salt;

        @Override
        public int getStatusCode() {
            return 123;
        }

        @Override
        public String getReasonPhrase() {
            return "Just because.";
        }

        @Override
        public Exception getException() {
            return new IllegalArgumentException("TEST");
        }

        @Override
        public CrawlDocState getCrawlDocState() {
            return CrawlDocState.MODIFIED;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public TestResponse(final String salt) {
            this.salt = salt;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getSalt() {
            return this.salt;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof MultiFetchResponseTest.TestResponse)) return false;
            final MultiFetchResponseTest.TestResponse other = (MultiFetchResponseTest.TestResponse) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            final java.lang.Object this$salt = this.getSalt();
            final java.lang.Object other$salt = other.getSalt();
            if (this$salt == null ? other$salt != null : !this$salt.equals(other$salt)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof MultiFetchResponseTest.TestResponse;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final java.lang.Object $salt = this.getSalt();
            result = result * PRIME + ($salt == null ? 43 : $salt.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "MultiFetchResponseTest.TestResponse(salt=" + this.getSalt() + ")";
        }
    }

//    @Data
//    static class TestFetcher
//            implements Fetcher<MockFetchRequest, TestResponse> {
//        private final String salt;
//        @Override
//        public boolean accept(MockFetchRequest fetchRequest) {
//            return true;
//        }
//        @Override
//        public TestResponse fetch(MockFetchRequest fetchRequest)
//                throws FetchException {
//            return null;
//        }
//    }
    @Test
    void testGenericMultiFetchResponse() {
        var resp1 = new TestResponse("resp1");
        var resp2 = new TestResponse("resp2");
        var gmfr = new MultiFetchResponse<TestResponse>(List.of(resp1, resp2));
        assertThat(gmfr.getStatusCode()).isEqualTo(123);
        assertThat(gmfr.getReasonPhrase()).isEqualTo("Just because.");
        assertThat(gmfr.getException().getMessage()).isEqualTo("TEST");
        assertThat(gmfr.getCrawlDocState()).isSameAs(CrawlDocState.MODIFIED);
        assertThat(gmfr.getFetchResponses()).containsExactlyInAnyOrder(resp1, resp2);
        assertThat(gmfr.getLastFetchResponse()).containsSame(resp2);
        assertThat(gmfr).hasToString("123 Just because.");
    }
}
