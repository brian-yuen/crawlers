// Generated by delombok at Fri Mar 08 16:24:35 MST 2024
/* Copyright 2022 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.fetch;

import com.norconex.crawler.core.doc.CrawlDocState;
import lombok.NonNull;

public class MockFetcher extends AbstractFetcher<MockFetchRequest, MockFetchResponse, BaseFetcherConfig> {
    private BaseFetcherConfig configuration = new BaseFetcherConfig();
    private Boolean denyRequest;
    private boolean returnBadStatus;

    @Override
    public MockFetchResponse fetch(MockFetchRequest fetchRequest) throws FetchException {
        var resp = new MockFetchResponseImpl();
        resp.setCrawlDocState(returnBadStatus ? CrawlDocState.BAD_STATUS : CrawlDocState.NEW);
        return resp;
    }

    @Override
    protected boolean acceptRequest(@NonNull MockFetchRequest fetchRequest) {
        java.util.Objects.requireNonNull(fetchRequest, "fetchRequest is marked non-null but is null");
        if (denyRequest == null) {
            return super.acceptRequest(fetchRequest);
        }
        return !denyRequest;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MockFetcher() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BaseFetcherConfig getConfiguration() {
        return this.configuration;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Boolean getDenyRequest() {
        return this.denyRequest;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isReturnBadStatus() {
        return this.returnBadStatus;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MockFetcher setConfiguration(final BaseFetcherConfig configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MockFetcher setDenyRequest(final Boolean denyRequest) {
        this.denyRequest = denyRequest;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MockFetcher setReturnBadStatus(final boolean returnBadStatus) {
        this.returnBadStatus = returnBadStatus;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof MockFetcher)) return false;
        final MockFetcher other = (MockFetcher) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.isReturnBadStatus() != other.isReturnBadStatus()) return false;
        final java.lang.Object this$denyRequest = this.getDenyRequest();
        final java.lang.Object other$denyRequest = other.getDenyRequest();
        if (this$denyRequest == null ? other$denyRequest != null : !this$denyRequest.equals(other$denyRequest)) return false;
        final java.lang.Object this$configuration = this.getConfiguration();
        final java.lang.Object other$configuration = other.getConfiguration();
        if (this$configuration == null ? other$configuration != null : !this$configuration.equals(other$configuration)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof MockFetcher;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + (this.isReturnBadStatus() ? 79 : 97);
        final java.lang.Object $denyRequest = this.getDenyRequest();
        result = result * PRIME + ($denyRequest == null ? 43 : $denyRequest.hashCode());
        final java.lang.Object $configuration = this.getConfiguration();
        result = result * PRIME + ($configuration == null ? 43 : $configuration.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "MockFetcher(super=" + super.toString() + ", configuration=" + this.getConfiguration() + ", denyRequest=" + this.getDenyRequest() + ", returnBadStatus=" + this.isReturnBadStatus() + ")";
    }
}
