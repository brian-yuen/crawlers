// Generated by delombok at Fri Mar 08 16:24:35 MST 2024
/* Copyright 2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.pipeline.queue;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;
import org.apache.commons.lang3.mutable.MutableBoolean;
import com.norconex.commons.lang.Sleeper;
import com.norconex.crawler.core.crawler.CrawlerImpl.QueueInitContext;
import com.norconex.crawler.core.doc.CrawlDocRecord;

public class MockQueueInitializer implements Function<QueueInitContext, MutableBoolean> {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(MockQueueInitializer.class);
    private final List<String> startReferences = new ArrayList<>();
    private boolean async;
    private long delay;
    private final MutableBoolean done = new MutableBoolean(false);

    public MockQueueInitializer(String... startReferences) {
        this.startReferences.addAll(List.of(startReferences));
    }

    @Override
    public MutableBoolean apply(QueueInitContext ctx) {
        if (async) {
            new Thread(() -> queueAll(ctx)).start();
        } else {
            queueAll(ctx);
        }
        return done;
    }

    private void queueAll(QueueInitContext ctx) {
        for (String ref : startReferences) {
            if (ctx.getCrawler().isStopped()) {
                LOG.info("Crawler stop requested, no longer queuing.");
                break;
            }
            Sleeper.sleepMillis(getDelay());
            ctx.queue(new CrawlDocRecord(ref));
        }
        done.setTrue();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<String> getStartReferences() {
        return this.startReferences;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isAsync() {
        return this.async;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getDelay() {
        return this.delay;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MutableBoolean getDone() {
        return this.done;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setAsync(final boolean async) {
        this.async = async;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDelay(final long delay) {
        this.delay = delay;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof MockQueueInitializer)) return false;
        final MockQueueInitializer other = (MockQueueInitializer) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isAsync() != other.isAsync()) return false;
        if (this.getDelay() != other.getDelay()) return false;
        final java.lang.Object this$startReferences = this.getStartReferences();
        final java.lang.Object other$startReferences = other.getStartReferences();
        if (this$startReferences == null ? other$startReferences != null : !this$startReferences.equals(other$startReferences)) return false;
        final java.lang.Object this$done = this.getDone();
        final java.lang.Object other$done = other.getDone();
        if (this$done == null ? other$done != null : !this$done.equals(other$done)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof MockQueueInitializer;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isAsync() ? 79 : 97);
        final long $delay = this.getDelay();
        result = result * PRIME + (int) ($delay >>> 32 ^ $delay);
        final java.lang.Object $startReferences = this.getStartReferences();
        result = result * PRIME + ($startReferences == null ? 43 : $startReferences.hashCode());
        final java.lang.Object $done = this.getDone();
        result = result * PRIME + ($done == null ? 43 : $done.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "MockQueueInitializer(startReferences=" + this.getStartReferences() + ", async=" + this.isAsync() + ", delay=" + this.getDelay() + ", done=" + this.getDone() + ")";
    }
}
