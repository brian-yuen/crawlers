// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2014-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.filter.impl;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import com.norconex.commons.lang.collection.CollectionUtil;
import com.norconex.crawler.core.filter.OnMatch;

/**
 * <p>
 * Filters a reference based on a comma-separated list of extensions.
 * Extensions are typically the last characters of a file name, after the
 * last dot.
 * </p>
 *
 * {@nx.xml.usage
 * <filter class="com.norconex.crawler.core.filter.impl.ExtensionReferenceFilter"
 *     onMatch="[include|exclude]"
 *     ignoreCase="[false|true]" >
 *   (comma-separated list of extensions)
 * </filter>
 * }
 *
 * {@nx.xml.example
 * <filter class="com.norconex.crawler.core.filter.impl.ExtensionReferenceFilter">
 *   html,htm,php,asp
 * </filter>
 * }
 * <p>
 * The above example will only accept references with the following
 * extensions: .html, .htm, .php, and .asp.
 * </p>
 */
public class ExtensionReferenceFilterConfig {
    private boolean ignoreCase;
    private final Set<String> extensions = new HashSet<>();
    private OnMatch onMatch = OnMatch.INCLUDE;

    public Set<String> getExtensions() {
        return Collections.unmodifiableSet(extensions);
    }

    public ExtensionReferenceFilterConfig setExtensions(List<String> extensions) {
        CollectionUtil.setAll(this.extensions, extensions);
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ExtensionReferenceFilterConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isIgnoreCase() {
        return this.ignoreCase;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public OnMatch getOnMatch() {
        return this.onMatch;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ExtensionReferenceFilterConfig setIgnoreCase(final boolean ignoreCase) {
        this.ignoreCase = ignoreCase;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ExtensionReferenceFilterConfig setOnMatch(final OnMatch onMatch) {
        this.onMatch = onMatch;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ExtensionReferenceFilterConfig)) return false;
        final ExtensionReferenceFilterConfig other = (ExtensionReferenceFilterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isIgnoreCase() != other.isIgnoreCase()) return false;
        final java.lang.Object this$extensions = this.getExtensions();
        final java.lang.Object other$extensions = other.getExtensions();
        if (this$extensions == null ? other$extensions != null : !this$extensions.equals(other$extensions)) return false;
        final java.lang.Object this$onMatch = this.getOnMatch();
        final java.lang.Object other$onMatch = other.getOnMatch();
        if (this$onMatch == null ? other$onMatch != null : !this$onMatch.equals(other$onMatch)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ExtensionReferenceFilterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isIgnoreCase() ? 79 : 97);
        final java.lang.Object $extensions = this.getExtensions();
        result = result * PRIME + ($extensions == null ? 43 : $extensions.hashCode());
        final java.lang.Object $onMatch = this.getOnMatch();
        result = result * PRIME + ($onMatch == null ? 43 : $onMatch.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ExtensionReferenceFilterConfig(ignoreCase=" + this.isIgnoreCase() + ", extensions=" + this.getExtensions() + ", onMatch=" + this.getOnMatch() + ")";
    }
}
