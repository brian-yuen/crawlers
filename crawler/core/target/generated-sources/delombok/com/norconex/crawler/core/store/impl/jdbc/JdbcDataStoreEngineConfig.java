// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2021-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.store.impl.jdbc;

import com.norconex.commons.lang.map.Properties;

/**
 * <p>
 * Data store engine using a JDBC-compatible database for storing
 * crawl data.
 * </p>
 * <h3>Database JDBC driver</h3>
 * <p>
 * To use this data store engine, you need its JDBC database driver
 * on the classpath.
 * </p>
 * <h3>Database datasource configuration</h3>
 * <p>
 * This JDBC data store engine uses
 * <a href="https://github.com/brettwooldridge/HikariCP">Hikari</a> as the JDBC
 * datasource implementation, which provides efficient connection-pooling.
 * Refer to
 * <a href="https://github.com/brettwooldridge/HikariCP#gear-configuration-knobs-baby">
 * Hikari's documentation</a> for all configuration options.  The Hikari options
 * are passed as-is, via <code>datasource</code> properties as shown below.
 * </p>
 * <h3>Data types</h3>
 * <p>
 * This class only use a few data types to store its data in a generic way.
 * It will try to detect what data type to use for your database. If you
 * get errors related to field data types not being supported, you have
 * the option to redefined them.
 * </p>
 *
 * {@nx.xml.usage
 * <dataStoreEngine class="com.norconex.crawler.core.store.impl.jdbc.JdbcDataStoreEngine">
 *   <!-- Hikari datasource configuration properties: -->
 *   <datasource>
 *     <property name="(property name)">(property value)</property>
 *   </datasource>
 *   <tablePrefix>
 *     (Optional prefix used for table creation. Default is the collector
 *      id plus the crawler id, each followed by an underscore character.
 *      The value is first modified to convert spaces to underscores, and
 *      to strip unsupported characters. The supported
 *      characters are: alphanumeric, period, and underscore.
 *      )
 *   </tablePrefix>
 *   <!--
 *     Optionally overwrite default SQL data type used.  You should only
 *     use if you get data type-related errors.
 *     -->
 *   <dataTypes>
 *     <varchar   use="(equivalent data type for your database)" />
 *     <timestamp use="(equivalent data type for your database)" />
 *     <text      use="(equivalent data type for your database)" />
 *   </dataTypes>
 * </dataStoreEngine>
 * }
 *
 * {@nx.xml.example
 * <dataStoreEngine class="JdbcDataStoreEngine">
 *   <datasource>
 *     <property name="jdbcUrl">jdbc:mysql://localhost:33060/sample</property>
 *     <property name="username">dbuser</property>
 *     <property name="password">dbpwd</property>
 *     <property name="connectionTimeout">1000</property>
 *   </datasource>
 * </dataStoreEngine>
 * }
 * <p>
 * The above example contains basic settings for creating a MySQL data source.
 * </p>
 */
public class JdbcDataStoreEngineConfig {
    private Properties properties = new Properties();
    private String varcharType;
    private String timestampType;
    private String textType;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public JdbcDataStoreEngineConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Properties getProperties() {
        return this.properties;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getVarcharType() {
        return this.varcharType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTimestampType() {
        return this.timestampType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTextType() {
        return this.textType;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public JdbcDataStoreEngineConfig setProperties(final Properties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public JdbcDataStoreEngineConfig setVarcharType(final String varcharType) {
        this.varcharType = varcharType;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public JdbcDataStoreEngineConfig setTimestampType(final String timestampType) {
        this.timestampType = timestampType;
        return this;
    }

    /**
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public JdbcDataStoreEngineConfig setTextType(final String textType) {
        this.textType = textType;
        return this;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof JdbcDataStoreEngineConfig)) return false;
        final JdbcDataStoreEngineConfig other = (JdbcDataStoreEngineConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$properties = this.getProperties();
        final java.lang.Object other$properties = other.getProperties();
        if (this$properties == null ? other$properties != null : !this$properties.equals(other$properties)) return false;
        final java.lang.Object this$varcharType = this.getVarcharType();
        final java.lang.Object other$varcharType = other.getVarcharType();
        if (this$varcharType == null ? other$varcharType != null : !this$varcharType.equals(other$varcharType)) return false;
        final java.lang.Object this$timestampType = this.getTimestampType();
        final java.lang.Object other$timestampType = other.getTimestampType();
        if (this$timestampType == null ? other$timestampType != null : !this$timestampType.equals(other$timestampType)) return false;
        final java.lang.Object this$textType = this.getTextType();
        final java.lang.Object other$textType = other.getTextType();
        if (this$textType == null ? other$textType != null : !this$textType.equals(other$textType)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof JdbcDataStoreEngineConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $properties = this.getProperties();
        result = result * PRIME + ($properties == null ? 43 : $properties.hashCode());
        final java.lang.Object $varcharType = this.getVarcharType();
        result = result * PRIME + ($varcharType == null ? 43 : $varcharType.hashCode());
        final java.lang.Object $timestampType = this.getTimestampType();
        result = result * PRIME + ($timestampType == null ? 43 : $timestampType.hashCode());
        final java.lang.Object $textType = this.getTextType();
        result = result * PRIME + ($textType == null ? 43 : $textType.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "JdbcDataStoreEngineConfig(properties=" + this.getProperties() + ", varcharType=" + this.getVarcharType() + ", timestampType=" + this.getTimestampType() + ", textType=" + this.getTextType() + ")";
    }
}
