// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2020-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.store.impl.mvstore;

import java.io.IOException;
import java.nio.file.Path;
import java.util.Optional;
import java.util.Set;
import org.apache.commons.io.FileUtils;
import org.h2.mvstore.MVMap;
import org.h2.mvstore.MVStore;
import org.h2.mvstore.MVStoreException;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.norconex.commons.lang.config.Configurable;
import com.norconex.commons.lang.unit.DataUnit;
import com.norconex.crawler.core.crawler.Crawler;
import com.norconex.crawler.core.crawler.CrawlerException;
import com.norconex.crawler.core.store.DataStore;
import com.norconex.crawler.core.store.DataStoreEngine;
import com.norconex.crawler.core.store.DataStoreException;

public class MVStoreDataStoreEngine implements DataStoreEngine, Configurable<MVStoreDataStoreEngineConfig> {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(MVStoreDataStoreEngine.class);
    private static final String STORE_TYPES_KEY = MVStoreDataStoreEngine.class.getSimpleName() + "--storetypes";
    @JsonProperty(Configurable.PROPERTY)
    private final MVStoreDataStoreEngineConfig cfg = new MVStoreDataStoreEngineConfig();
    private MVStore mvstore;
    private Path engineDir;
    private MVMap<String, Class<?>> storeTypes;

    @Override
    public MVStoreDataStoreEngineConfig getConfiguration() {
        return cfg;
    }

    @Override
    public void init(Crawler crawler) {
        var builder = new MVStore.Builder();
        if (cfg.getPageSplitSize() != null) {
            //MVStore expects it as bytes
            builder.pageSplitSize(asInt(cfg.getPageSplitSize()));
        }
        if (Integer.valueOf(1).equals(cfg.getCompress())) {
            builder.compress();
        }
        if (Integer.valueOf(2).equals(cfg.getCompress())) {
            builder.compressHigh();
        }
        if (cfg.getCacheConcurrency() != null) {
            builder.cacheConcurrency(cfg.getCacheConcurrency());
        }
        if (cfg.getCacheSize() != null) {
            //MVStore expects it as megabytes
            builder.cacheSize(DataUnit.B.to(cfg.getCacheSize(), DataUnit.MB).intValue());
        }
        if (cfg.getAutoCompactFillRate() != null) {
            builder.autoCompactFillRate(cfg.getAutoCompactFillRate());
        }
        if (cfg.getAutoCommitBufferSize() != null) {
            //MVStore expects it as kilobytes
            builder.autoCommitBufferSize(DataUnit.B.to(cfg.getAutoCommitBufferSize(), DataUnit.KB).intValue());
        }
        if (Long.valueOf(0).equals(cfg.getAutoCommitDelay())) {
            builder.autoCommitDisabled();
        }
        if (cfg.isEphemeral()) {
            builder.fileName(null);
        } else {
            engineDir = crawler.getWorkDir().resolve("datastore");
            try {
                FileUtils.forceMkdir(engineDir.toFile());
            } catch (IOException e) {
                throw new DataStoreException("Cannot create data store engine directory: " + engineDir, e);
            }
            builder.fileName(engineDir.resolve("mvstore").toAbsolutePath().toString());
        }
        try {
            mvstore = builder.open();
        } catch (MVStoreException e) {
            LOG.warn("""
                An exception occurred while trying to open the store engine. This could happen due to an abnormal shutdown on a previous execution of the crawler. An attempt will be made to recover. It is advised to back-up the store engine if you want to preserve the crawl history.""", e);
            builder.recoveryMode();
            mvstore = builder.open();
            LOG.warn("Store engine recovery appears to be successful.");
        }
        if (cfg.getAutoCommitDelay() != null) {
            //MVStore expects it as milliseconds
            mvstore.setAutoCommitDelay(cfg.getAutoCommitDelay().intValue());
        }
        storeTypes = mvstore.openMap(STORE_TYPES_KEY);
        mvstore.commit();
    }

    private Integer asInt(Long l) {
        if (l == null) {
            return null;
        }
        return l.intValue();
    }

    @Override
    public boolean clean() {
        var names = getStoreNames();
        var hadStores = false;
        if (!names.isEmpty()) {
            hadStores = true;
            names.stream().forEach(this::dropStore);
        }
        dropStore(STORE_TYPES_KEY);
        var dirToDelete = engineDir.toFile();
        try {
            FileUtils.deleteDirectory(dirToDelete);
        } catch (IOException e) {
            throw new CrawlerException("Could not delete data store directory.", e);
        }
        return hadStores;
    }

    @Override
    public synchronized void close() {
        LOG.info("Closing data store engine...");
        if (mvstore != null && !mvstore.isClosed()) {
            LOG.info("Compacting data store...");
            mvstore.commit();
            //TODO method dropped from MVStore. Any replacemetn?
            //mvstore.compactMoveChunks();
            mvstore.close();
        }
        mvstore = null;
        engineDir = null;
        LOG.info("Data store engine closed.");
    }

    @Override
    public synchronized <T> DataStore<T> openStore(String name, Class<? extends T> type) {
        storeTypes.put(name, type);
        return new MVStoreDataStore<>(mvstore, name, type);
    }

    @Override
    public synchronized boolean dropStore(String name) {
        if (mvstore.hasMap(name)) {
            mvstore.removeMap(name);
            if (STORE_TYPES_KEY.equals(name)) {
                storeTypes = null;
            } else {
                storeTypes.remove(name);
            }
            return true;
        }
        return false;
    }

    @Override
    public boolean renameStore(DataStore<?> store, String newName) {
        MVStoreDataStore<?> mvDateStore = (MVStoreDataStore<?>) store;
        var hadMap = false;
        if (mvstore.hasMap(newName)) {
            hadMap = true;
        }
        storeTypes.put(newName, storeTypes.remove(mvDateStore.rename(newName)));
        return hadMap;
    }

    @Override
    @JsonIgnore
    public Set<String> getStoreNames() {
        // a fresh map instance is returned, so safe to remove entry.
        var names = mvstore.getMapNames();
        names.remove(STORE_TYPES_KEY);
        return names;
    }

    @Override
    @JsonIgnore
    public Optional<Class<?>> getStoreType(String name) {
        return Optional.ofNullable(storeTypes.get(name));
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof MVStoreDataStoreEngine)) return false;
        final MVStoreDataStoreEngine other = (MVStoreDataStoreEngine) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$cfg = this.cfg;
        final java.lang.Object other$cfg = other.cfg;
        if (this$cfg == null ? other$cfg != null : !this$cfg.equals(other$cfg)) return false;
        final java.lang.Object this$mvstore = this.mvstore;
        final java.lang.Object other$mvstore = other.mvstore;
        if (this$mvstore == null ? other$mvstore != null : !this$mvstore.equals(other$mvstore)) return false;
        final java.lang.Object this$engineDir = this.engineDir;
        final java.lang.Object other$engineDir = other.engineDir;
        if (this$engineDir == null ? other$engineDir != null : !this$engineDir.equals(other$engineDir)) return false;
        final java.lang.Object this$storeTypes = this.storeTypes;
        final java.lang.Object other$storeTypes = other.storeTypes;
        if (this$storeTypes == null ? other$storeTypes != null : !this$storeTypes.equals(other$storeTypes)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof MVStoreDataStoreEngine;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $cfg = this.cfg;
        result = result * PRIME + ($cfg == null ? 43 : $cfg.hashCode());
        final java.lang.Object $mvstore = this.mvstore;
        result = result * PRIME + ($mvstore == null ? 43 : $mvstore.hashCode());
        final java.lang.Object $engineDir = this.engineDir;
        result = result * PRIME + ($engineDir == null ? 43 : $engineDir.hashCode());
        final java.lang.Object $storeTypes = this.storeTypes;
        result = result * PRIME + ($storeTypes == null ? 43 : $storeTypes.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "MVStoreDataStoreEngine(cfg=" + this.cfg + ", mvstore=" + this.mvstore + ", engineDir=" + this.engineDir + ", storeTypes=" + this.storeTypes + ")";
    }
//
//    @Override
//    public void loadFromXML(XML xml) {
//        cfg.setPageSplitSize(
//                xml.getDataSize(Fields.pageSplitSize, cfg.getPageSplitSize()));
//        cfg.setCompress(xml.getInteger(Fields.compress, cfg.getCompress()));
//        cfg.setCacheConcurrency(xml.getInteger(
//                Fields.cacheConcurrency, cfg.getCacheConcurrency()));
//        cfg.setCacheSize(xml.getDataSize(Fields.cacheSize, cfg.getCacheSize()));
//        cfg.setAutoCompactFillRate(xml.getInteger(
//                Fields.autoCompactFillRate, cfg.getAutoCompactFillRate()));
//        cfg.setAutoCommitBufferSize(xml.getDataSize(
//                Fields.autoCommitBufferSize, cfg.getAutoCommitBufferSize()));
//        cfg.setAutoCommitDelay(xml.getDurationMillis(
//                Fields.autoCommitDelay, cfg.getAutoCommitDelay()));
//        cfg.setEphemeral(xml.getBoolean(Fields.ephemeral, cfg.isEphemeral()));
//    }
//
//    @Override
//    public void saveToXML(XML xml) {
//        xml.addElement(Fields.pageSplitSize, cfg.getPageSplitSize());
//        xml.addElement(Fields.compress, cfg.getCompress());
//        xml.addElement(Fields.cacheConcurrency, cfg.getCacheConcurrency());
//        xml.addElement(Fields.cacheSize, cfg.getCacheSize());
//        xml.addElement(Fields.autoCompactFillRate, cfg.getAutoCompactFillRate());
//        xml.addElement(Fields.autoCommitBufferSize, cfg.getAutoCommitBufferSize());
//        xml.addElement(Fields.autoCommitDelay, cfg.getAutoCommitDelay());
//        xml.addElement(Fields.ephemeral, cfg.isEphemeral());
//    }
}
