// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2014-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.checksum;

import com.norconex.commons.lang.map.PropertySetter;
import com.norconex.crawler.core.doc.CrawlDocMetadata;

/**
 * <p>Abstract implementation of {@link MetadataChecksummer} giving the option
 * to keep the generated checksum.  The checksum can be stored
 * in a target field name specified.  If no target field name is specified,
 * it stores it under the
 * metadata field name {@link CrawlDocMetadata#CHECKSUM_METADATA}.
 * </p><p>
 * <b>Implementors do not need to store the checksum themselves, this abstract
 * class does it.</b>
 * </p><p>
 * Implementors should offer this XML configuration usage:
 * </p>
 *
 * {@nx.xml #usage
 * <metadataChecksummer class="(subclass)">
 *    keep="[false|true]"
 *    toField="(optional metadata field to store the checksum)"
 *    onSet="[append|prepend|replace|optional]" />
 * }
 * <p>
 * <code>toField</code> is ignored unless the <code>keep</code>
 * attribute is set to <code>true</code>.
 * </p>
 */
@SuppressWarnings("javadoc")
public class BaseChecksummerConfig {
	/**
	 * Whether to keep the metadata checksum value as a new metadata field.
	 */
	private boolean keep;
	/**
	 * The metadata field to use to store the checksum value.
	 * Default value is set by checksummer implementations.
	 * Only applicable if {@link #isKeep()} returns {@code true}
	 */
	private String toField;
	/**
	 * The property setter to use when a value is set.
	 */
	private PropertySetter onSet;

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public BaseChecksummerConfig() {
	}

	/**
	 * Whether to keep the metadata checksum value as a new metadata field.
	 * @return <code>true</code> to keep the checksum
	 */
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public boolean isKeep() {
		return this.keep;
	}

	/**
	 * The metadata field to use to store the checksum value.
	 * Default value is set by checksummer implementations.
	 * Only applicable if {@link #isKeep()} returns {@code true}
	 * @return metadata field name
	 */
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public String getToField() {
		return this.toField;
	}

	/**
	 * The property setter to use when a value is set.
	 * @return property setter
	 */
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public PropertySetter getOnSet() {
		return this.onSet;
	}

	/**
	 * Whether to keep the metadata checksum value as a new metadata field.
	 * @param keep <code>true</code> to keep the checksum
	 * @return {@code this}.
	 */
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public BaseChecksummerConfig setKeep(final boolean keep) {
		this.keep = keep;
		return this;
	}

	/**
	 * The metadata field to use to store the checksum value.
	 * Default value is set by checksummer implementations.
	 * Only applicable if {@link #isKeep()} returns {@code true}
	 * @param toField the metadata field name
	 * @return {@code this}.
	 */
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public BaseChecksummerConfig setToField(final String toField) {
		this.toField = toField;
		return this;
	}

	/**
	 * The property setter to use when a value is set.
	 * @param onSet property setter
	 * @return {@code this}.
	 */
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public BaseChecksummerConfig setOnSet(final PropertySetter onSet) {
		this.onSet = onSet;
		return this;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof BaseChecksummerConfig)) return false;
		final BaseChecksummerConfig other = (BaseChecksummerConfig) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (this.isKeep() != other.isKeep()) return false;
		final java.lang.Object this$toField = this.getToField();
		final java.lang.Object other$toField = other.getToField();
		if (this$toField == null ? other$toField != null : !this$toField.equals(other$toField)) return false;
		final java.lang.Object this$onSet = this.getOnSet();
		final java.lang.Object other$onSet = other.getOnSet();
		if (this$onSet == null ? other$onSet != null : !this$onSet.equals(other$onSet)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof BaseChecksummerConfig;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + (this.isKeep() ? 79 : 97);
		final java.lang.Object $toField = this.getToField();
		result = result * PRIME + ($toField == null ? 43 : $toField.hashCode());
		final java.lang.Object $onSet = this.getOnSet();
		result = result * PRIME + ($onSet == null ? 43 : $onSet.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public java.lang.String toString() {
		return "BaseChecksummerConfig(keep=" + this.isKeep() + ", toField=" + this.getToField() + ", onSet=" + this.getOnSet() + ")";
	}
}
