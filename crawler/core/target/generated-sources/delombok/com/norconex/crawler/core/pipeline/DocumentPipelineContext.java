// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2014-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.pipeline;

import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import com.norconex.commons.lang.io.CachedInputStream;
import com.norconex.crawler.core.crawler.Crawler;
import com.norconex.crawler.core.doc.CrawlDoc;
import com.norconex.crawler.core.doc.CrawlDocRecord;
import lombok.NonNull;

/**
 * Pipeline context for document processing.
 */
public class DocumentPipelineContext extends AbstractPipelineContext {
    private CrawlDoc document;

    public DocumentPipelineContext(@NonNull Crawler crawler, @NonNull CrawlDoc document) {
        super(crawler);
        java.util.Objects.requireNonNull(crawler, "crawler is marked non-null but is null");
        java.util.Objects.requireNonNull(document, "document is marked non-null but is null");
        this.document = document;
    }

    public CrawlDoc getDocument() {
        return document;
    }

    public CrawlDocRecord getDocRecord() {
        return document.getDocRecord();
    }

    /**
     * Gets cached crawl data.
     * @return cached crawl data
     */
    public CrawlDocRecord getCachedDocRecord() {
        return document.getCachedDocRecord();
    }

    public CachedInputStream getContent() {
        return getDocument().getInputStream();
    }

    public Reader getContentReader() {
        return new InputStreamReader(getDocument().getInputStream(), StandardCharsets.UTF_8);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof DocumentPipelineContext)) return false;
        final DocumentPipelineContext other = (DocumentPipelineContext) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        final java.lang.Object this$document = this.getDocument();
        final java.lang.Object other$document = other.getDocument();
        if (this$document == null ? other$document != null : !this$document.equals(other$document)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof DocumentPipelineContext;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        final java.lang.Object $document = this.getDocument();
        result = result * PRIME + ($document == null ? 43 : $document.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "DocumentPipelineContext(super=" + super.toString() + ", document=" + this.getDocument() + ")";
    }
}
