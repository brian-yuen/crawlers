// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2020-2022 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.cli;

import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.file.Path;
import com.norconex.commons.lang.ExceptionUtil;
import com.norconex.commons.lang.bean.BeanMapper.Format;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

/**
 * Resolve all includes and variables substitution and print the
 * resulting configuration to facilitate sharing.
 */
@Command(name = "configrender", description = "Render effective configuration")
public class ConfigRenderCommand extends AbstractSubCommand {
    @Option(names = {"-o", "-output"}, description = "Render to a file", required = false)
    private Path output;
    @Option(names = {"-i", "-indent"}, description = "Number of spaces used for indentation (default: 2).", required = false)
    private int indent = 2;

    @Override
    public void runCommand() {
        //TODO support different format, either explicit, on file extension
        // or default to XML
        try (var out = output != null ? new FileWriter(output.toFile()) : new StringWriter()) {
            getBeanMapper().write(getCrawlSession().getCrawlSessionConfig(), out, Format.XML);
            if (output == null) {
                printOut(((StringWriter) out).toString());
            }
        } catch (IOException e) {
            printErr("Could not render config: " + ExceptionUtil.getFormattedMessages(e));
        }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ConfigRenderCommand)) return false;
        final ConfigRenderCommand other = (ConfigRenderCommand) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.indent != other.indent) return false;
        final java.lang.Object this$output = this.output;
        final java.lang.Object other$output = other.output;
        if (this$output == null ? other$output != null : !this$output.equals(other$output)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ConfigRenderCommand;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + this.indent;
        final java.lang.Object $output = this.output;
        result = result * PRIME + ($output == null ? 43 : $output.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ConfigRenderCommand(super=" + super.toString() + ", output=" + this.output + ", indent=" + this.indent + ")";
    }
}
