// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2019-2022 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.cli;

import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

/**
 * Start the crawl session.
 */
@Command(name = "start", description = "Start a crawl session")
public class StartCommand extends AbstractSubCommand {
    @Option(names = {"-clean"}, description = "Clean stored data from previous crawl sessions " + "before start. Same as invoking the \"clean\" and " + "\"start\" commands one after the other.", required = false)
    private boolean clean;

    @Override
    public void runCommand() {
        if (clean) {
            getCrawlSession().clean();
        }
        getCrawlSession().start();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof StartCommand)) return false;
        final StartCommand other = (StartCommand) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.clean != other.clean) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof StartCommand;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + (this.clean ? 79 : 97);
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "StartCommand(super=" + super.toString() + ", clean=" + this.clean + ")";
    }
}
