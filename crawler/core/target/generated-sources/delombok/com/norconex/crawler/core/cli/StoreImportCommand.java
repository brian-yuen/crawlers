// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2019-2022 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.cli;

import java.nio.file.Path;
import java.util.List;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

/**
 * Import crawl store from specified file.
 */
@Command(name = "storeimport", description = "Import crawl store from specified files")
public class StoreImportCommand extends AbstractSubCommand {
    @Option(names = {"-f", "-file"}, description = "Data store files to import.", required = true, split = ",")
    private List<Path> inFiles;

    @Override
    public void runCommand() {
        getCrawlSession().importDataStore(inFiles);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof StoreImportCommand)) return false;
        final StoreImportCommand other = (StoreImportCommand) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        final java.lang.Object this$inFiles = this.inFiles;
        final java.lang.Object other$inFiles = other.inFiles;
        if (this$inFiles == null ? other$inFiles != null : !this$inFiles.equals(other$inFiles)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof StoreImportCommand;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        final java.lang.Object $inFiles = this.inFiles;
        result = result * PRIME + ($inFiles == null ? 43 : $inFiles.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "StoreImportCommand(super=" + super.toString() + ", inFiles=" + this.inFiles + ")";
    }
}
