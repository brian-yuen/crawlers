// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2019-2022 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.doc;

import java.time.ZonedDateTime;
import org.apache.commons.lang3.builder.ToStringExclude;
import com.norconex.commons.lang.bean.BeanUtil;
import com.norconex.importer.doc.DocRecord;
//@JsonAutoDetect(
//    getterVisibility = JsonAutoDetect.Visibility.NONE,
//    isGetterVisibility = JsonAutoDetect.Visibility.NONE
//)
public class CrawlDocRecord extends DocRecord {
    //TODO create @ignore metadata to prevent storing some fields?
    private static final long serialVersionUID = 1L;

    //TODO make this a top-level enum.
    public enum Stage {
        QUEUED, ACTIVE, PROCESSED /*, CACHED*/;

        public boolean is(Stage stage) {
            return stage != null && stage == this;
        }
    } //TODO add NONE?

    // for crawlers that support this notion
    private int depth;
    private String originalReference; //TODO keep the trail if it changes often?
    @ToStringExclude
    private String parentRootReference;
    private CrawlDocState state;
    @ToStringExclude
    private String metaChecksum;
    @ToStringExclude
    private String contentChecksum;
    @ToStringExclude
    private ZonedDateTime crawlDate;
    private ZonedDateTime lastModified;

    public CrawlDocRecord() {
    }

    public CrawlDocRecord(String reference) {
        super(reference);
    }

    /**
     * Copy constructor.
     * @param docDetails document details to copy
     */
    public CrawlDocRecord(DocRecord docDetails) {
        super(docDetails);
    }

    public CrawlDocRecord withReference(String reference) {
        var docInfo = BeanUtil.clone(this);
        docInfo.setReference(reference);
        return docInfo;
    }

    /**
     * Gets the document location depth.
     * @return document location depth
     */
    public int getDepth() {
        return depth;
    }

    /**
     * Sets the document location depth.
     * @param depth document location depth
     */
    public final void setDepth(int depth) {
        this.depth = depth;
    }

    public String getOriginalReference() {
        return originalReference;
    }

    public void setOriginalReference(String originalReference) {
        this.originalReference = originalReference;
    }

    //TODO Get rid of parentRootReference? (not used?)
    // Store an embedded trail instead?
    public String getParentRootReference() {
        return parentRootReference;
    }

    public void setParentRootReference(String parentRootReference) {
        this.parentRootReference = parentRootReference;
    }

    public CrawlDocState getState() {
        return state;
    }

    public void setState(CrawlDocState state) {
        this.state = state;
    }

    public String getMetaChecksum() {
        return metaChecksum;
    }

    public void setMetaChecksum(String metaChecksum) {
        this.metaChecksum = metaChecksum;
    }

    /**
     * Gets the content checksum.
     * @return the content checksum
     */
    public String getContentChecksum() {
        return contentChecksum;
    }

    /**
     * Sets the content checksum.
     * @param contentChecksum content checksum
     */
    public void setContentChecksum(String contentChecksum) {
        this.contentChecksum = contentChecksum;
    }

    /**
     * Gets the crawl date.
     * @return the crawl date
     */
    public ZonedDateTime getCrawlDate() {
        return crawlDate;
    }

    /**
     * Sets the crawl date.
     * @param crawlDate the crawl date
     */
    public void setCrawlDate(ZonedDateTime crawlDate) {
        this.crawlDate = crawlDate;
    }

    public ZonedDateTime getLastModified() {
        return lastModified;
    }

    public void setLastModified(ZonedDateTime lastModified) {
        this.lastModified = lastModified;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof CrawlDocRecord)) return false;
        final CrawlDocRecord other = (CrawlDocRecord) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.getDepth() != other.getDepth()) return false;
        final java.lang.Object this$originalReference = this.getOriginalReference();
        final java.lang.Object other$originalReference = other.getOriginalReference();
        if (this$originalReference == null ? other$originalReference != null : !this$originalReference.equals(other$originalReference)) return false;
        final java.lang.Object this$parentRootReference = this.getParentRootReference();
        final java.lang.Object other$parentRootReference = other.getParentRootReference();
        if (this$parentRootReference == null ? other$parentRootReference != null : !this$parentRootReference.equals(other$parentRootReference)) return false;
        final java.lang.Object this$state = this.getState();
        final java.lang.Object other$state = other.getState();
        if (this$state == null ? other$state != null : !this$state.equals(other$state)) return false;
        final java.lang.Object this$metaChecksum = this.getMetaChecksum();
        final java.lang.Object other$metaChecksum = other.getMetaChecksum();
        if (this$metaChecksum == null ? other$metaChecksum != null : !this$metaChecksum.equals(other$metaChecksum)) return false;
        final java.lang.Object this$contentChecksum = this.getContentChecksum();
        final java.lang.Object other$contentChecksum = other.getContentChecksum();
        if (this$contentChecksum == null ? other$contentChecksum != null : !this$contentChecksum.equals(other$contentChecksum)) return false;
        final java.lang.Object this$crawlDate = this.getCrawlDate();
        final java.lang.Object other$crawlDate = other.getCrawlDate();
        if (this$crawlDate == null ? other$crawlDate != null : !this$crawlDate.equals(other$crawlDate)) return false;
        final java.lang.Object this$lastModified = this.getLastModified();
        final java.lang.Object other$lastModified = other.getLastModified();
        if (this$lastModified == null ? other$lastModified != null : !this$lastModified.equals(other$lastModified)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof CrawlDocRecord;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + this.getDepth();
        final java.lang.Object $originalReference = this.getOriginalReference();
        result = result * PRIME + ($originalReference == null ? 43 : $originalReference.hashCode());
        final java.lang.Object $parentRootReference = this.getParentRootReference();
        result = result * PRIME + ($parentRootReference == null ? 43 : $parentRootReference.hashCode());
        final java.lang.Object $state = this.getState();
        result = result * PRIME + ($state == null ? 43 : $state.hashCode());
        final java.lang.Object $metaChecksum = this.getMetaChecksum();
        result = result * PRIME + ($metaChecksum == null ? 43 : $metaChecksum.hashCode());
        final java.lang.Object $contentChecksum = this.getContentChecksum();
        result = result * PRIME + ($contentChecksum == null ? 43 : $contentChecksum.hashCode());
        final java.lang.Object $crawlDate = this.getCrawlDate();
        result = result * PRIME + ($crawlDate == null ? 43 : $crawlDate.hashCode());
        final java.lang.Object $lastModified = this.getLastModified();
        result = result * PRIME + ($lastModified == null ? 43 : $lastModified.hashCode());
        return result;
    }
}
