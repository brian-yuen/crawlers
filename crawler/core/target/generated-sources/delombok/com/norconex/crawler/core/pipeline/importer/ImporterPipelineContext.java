// Generated by delombok at Fri Mar 08 16:24:33 MST 2024
/* Copyright 2014-2023 Norconex Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.norconex.crawler.core.pipeline.importer;

import com.norconex.crawler.core.crawler.Crawler;
import com.norconex.crawler.core.doc.CrawlDoc;
import com.norconex.crawler.core.fetch.FetchDirective;
import com.norconex.crawler.core.fetch.FetchDirectiveSupport;
import com.norconex.crawler.core.pipeline.DocumentPipelineContext;
import com.norconex.importer.response.ImporterResponse;

/**
 * A context object for crawler pipelines dealing
 * with {@link ImporterResponse}.
 */
public class ImporterPipelineContext extends DocumentPipelineContext {
    private ImporterResponse importerResponse;
    //TODO see if we can work with this instead of "flags"
    private boolean delete;

    //TODO needed? The orphan flag is stored in the document itself
    // Shall we store the deletion flag in the document as well??
    //private boolean orphan;
    /**
     * Constructor.
     * @param crawler the crawler
     * @param document current crawl document
     */
    public ImporterPipelineContext(Crawler crawler, CrawlDoc document) {
        super(crawler, document);
    }

    /**
     * Whether a metadata fetch request was performed already. Based on whether
     * metadata fetch support is enabled via configuration
     * and we are now doing a document fetch request (which suggests
     * a METADATA request would have had to be performed).
     * @param currentDirective the current directive
     * @return <code>true</code> if the metadata directive was executed
     */
    public boolean isMetadataDirectiveExecuted(FetchDirective currentDirective) {
        // If both DOCUMENT and METADATA fetching were requested and the
        // current directive is DOCUMENT, then metadata had to be performed.
        return currentDirective == FetchDirective.DOCUMENT && FetchDirectiveSupport.isEnabled(getConfig().getMetadataFetchSupport());
    }

    /**
     * Whether a fetch directive has been enabled according to configuration.
     * That is, its use is either "required" or "optional".
     * @param directive fetch directive
     * @return <code>true</code> if the supplied directive is enabled
     */
    public boolean isFetchDirectiveEnabled(FetchDirective directive) {
        return (directive == FetchDirective.METADATA && FetchDirectiveSupport.isEnabled(getConfig().getMetadataFetchSupport())) || (directive == FetchDirective.DOCUMENT && FetchDirectiveSupport.isEnabled(getConfig().getDocumentFetchSupport()));
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImporterResponse getImporterResponse() {
        return this.importerResponse;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isDelete() {
        return this.delete;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setImporterResponse(final ImporterResponse importerResponse) {
        this.importerResponse = importerResponse;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDelete(final boolean delete) {
        this.delete = delete;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ImporterPipelineContext)) return false;
        final ImporterPipelineContext other = (ImporterPipelineContext) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.isDelete() != other.isDelete()) return false;
        final java.lang.Object this$importerResponse = this.getImporterResponse();
        final java.lang.Object other$importerResponse = other.getImporterResponse();
        if (this$importerResponse == null ? other$importerResponse != null : !this$importerResponse.equals(other$importerResponse)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ImporterPipelineContext;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + (this.isDelete() ? 79 : 97);
        final java.lang.Object $importerResponse = this.getImporterResponse();
        result = result * PRIME + ($importerResponse == null ? 43 : $importerResponse.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ImporterPipelineContext(super=" + super.toString() + ", importerResponse=" + this.getImporterResponse() + ", delete=" + this.isDelete() + ")";
    }
}
